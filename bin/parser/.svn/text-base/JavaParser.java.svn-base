// Generated from parser/JavaParser.all
package parser;
 import AST.*;
import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "JavaParser.beaver".
 */
public class JavaParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short IDENTIFIER = 1;
		static public final short LPAREN = 2;
		static public final short BOOLEAN = 3;
		static public final short BYTE = 4;
		static public final short SHORT = 5;
		static public final short INT = 6;
		static public final short LONG = 7;
		static public final short CHAR = 8;
		static public final short FLOAT = 9;
		static public final short DOUBLE = 10;
		static public final short VOID = 11;
		static public final short SUPER = 12;
		static public final short NEW = 13;
		static public final short THIS = 14;
		static public final short INTEGER_LITERAL = 15;
		static public final short LONG_LITERAL = 16;
		static public final short FLOATING_POINT_LITERAL = 17;
		static public final short DOUBLE_LITERAL = 18;
		static public final short BOOLEAN_LITERAL = 19;
		static public final short CHARACTER_LITERAL = 20;
		static public final short STRING_LITERAL = 21;
		static public final short NULL_LITERAL = 22;
		static public final short PLUSPLUS = 23;
		static public final short MINUSMINUS = 24;
		static public final short PLUS = 25;
		static public final short MINUS = 26;
		static public final short COMP = 27;
		static public final short NOT = 28;
		static public final short RPAREN = 29;
		static public final short SEMICOLON = 30;
		static public final short LBRACE = 31;
		static public final short SYNCHRONIZED = 32;
		static public final short AT = 33;
		static public final short STATIC = 34;
		static public final short PUBLIC = 35;
		static public final short PROTECTED = 36;
		static public final short PRIVATE = 37;
		static public final short ABSTRACT = 38;
		static public final short FINAL = 39;
		static public final short NATIVE = 40;
		static public final short TRANSIENT = 41;
		static public final short VOLATILE = 42;
		static public final short STRICTFP = 43;
		static public final short LBRACK = 44;
		static public final short COMMA = 45;
		static public final short RBRACE = 46;
		static public final short CLASS = 47;
		static public final short LT = 48;
		static public final short DOT = 49;
		static public final short WHILE = 50;
		static public final short DO = 51;
		static public final short FOR = 52;
		static public final short IF = 53;
		static public final short SWITCH = 54;
		static public final short BREAK = 55;
		static public final short CONTINUE = 56;
		static public final short ASSERT = 57;
		static public final short RETURN = 58;
		static public final short THROW = 59;
		static public final short TRY = 60;
		static public final short GT = 61;
		static public final short INTERFACE = 62;
		static public final short ENUM = 63;
		static public final short RSHIFT = 64;
		static public final short URSHIFT = 65;
		static public final short THROWS = 66;
		static public final short LSHIFT = 67;
		static public final short ELSE = 68;
		static public final short COLON = 69;
		static public final short QUESTION = 70;
		static public final short MULT = 71;
		static public final short EXTENDS = 72;
		static public final short IMPLEMENTS = 73;
		static public final short DIV = 74;
		static public final short MOD = 75;
		static public final short LTEQ = 76;
		static public final short GTEQ = 77;
		static public final short INSTANCEOF = 78;
		static public final short AND = 79;
		static public final short EQ = 80;
		static public final short RBRACK = 81;
		static public final short EQEQ = 82;
		static public final short NOTEQ = 83;
		static public final short XOR = 84;
		static public final short OR = 85;
		static public final short ANDAND = 86;
		static public final short IMPORT = 87;
		static public final short DEFAULT = 88;
		static public final short MULTEQ = 89;
		static public final short DIVEQ = 90;
		static public final short MODEQ = 91;
		static public final short PLUSEQ = 92;
		static public final short MINUSEQ = 93;
		static public final short LSHIFTEQ = 94;
		static public final short RSHIFTEQ = 95;
		static public final short URSHIFTEQ = 96;
		static public final short ANDEQ = 97;
		static public final short XOREQ = 98;
		static public final short OREQ = 99;
		static public final short CASE = 100;
		static public final short OROR = 101;
		static public final short CATCH = 102;
		static public final short PACKAGE = 103;
		static public final short ELLIPSIS = 104;
		static public final short FINALLY = 105;

		static public final String[] NAMES = {
			"EOF",
			"IDENTIFIER",
			"LPAREN",
			"BOOLEAN",
			"BYTE",
			"SHORT",
			"INT",
			"LONG",
			"CHAR",
			"FLOAT",
			"DOUBLE",
			"VOID",
			"SUPER",
			"NEW",
			"THIS",
			"INTEGER_LITERAL",
			"LONG_LITERAL",
			"FLOATING_POINT_LITERAL",
			"DOUBLE_LITERAL",
			"BOOLEAN_LITERAL",
			"CHARACTER_LITERAL",
			"STRING_LITERAL",
			"NULL_LITERAL",
			"PLUSPLUS",
			"MINUSMINUS",
			"PLUS",
			"MINUS",
			"COMP",
			"NOT",
			"RPAREN",
			"SEMICOLON",
			"LBRACE",
			"SYNCHRONIZED",
			"AT",
			"STATIC",
			"PUBLIC",
			"PROTECTED",
			"PRIVATE",
			"ABSTRACT",
			"FINAL",
			"NATIVE",
			"TRANSIENT",
			"VOLATILE",
			"STRICTFP",
			"LBRACK",
			"COMMA",
			"RBRACE",
			"CLASS",
			"LT",
			"DOT",
			"WHILE",
			"DO",
			"FOR",
			"IF",
			"SWITCH",
			"BREAK",
			"CONTINUE",
			"ASSERT",
			"RETURN",
			"THROW",
			"TRY",
			"GT",
			"INTERFACE",
			"ENUM",
			"RSHIFT",
			"URSHIFT",
			"THROWS",
			"LSHIFT",
			"ELSE",
			"COLON",
			"QUESTION",
			"MULT",
			"EXTENDS",
			"IMPLEMENTS",
			"DIV",
			"MOD",
			"LTEQ",
			"GTEQ",
			"INSTANCEOF",
			"AND",
			"EQ",
			"RBRACK",
			"EQEQ",
			"NOTEQ",
			"XOR",
			"OR",
			"ANDAND",
			"IMPORT",
			"DEFAULT",
			"MULTEQ",
			"DIVEQ",
			"MODEQ",
			"PLUSEQ",
			"MINUSEQ",
			"LSHIFTEQ",
			"RSHIFTEQ",
			"URSHIFTEQ",
			"ANDEQ",
			"XOREQ",
			"OREQ",
			"CASE",
			"OROR",
			"CATCH",
			"PACKAGE",
			"ELLIPSIS",
			"FINALLY"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjNGUS5BNtVqdc2bolIBax0UbtmD5xhw9YGSJkJn4Lks8lA8Yz5oo0MB1tiLCK5R22W5s" +
		"nAu8eO1VTcVytPMTdw#tkxGdulxdFsvTaahnlNbvUoipk4OtwYNOJTzFk$2UwX2wZoyLCjZ" +
		"FxHdGIdKMrwC9sOQrO6zQBzH5LeYE$Xb$FR#0tqhtKKrJIw$GaJQ89x5ZMdPwW$$7hQ7$7e" +
		"VbkheVu0kh1dwT9V25ruL$nPraxwigVu4$o#Vmf$ZH$XY$YY$cB$2M#XB$CN#6lygLy6L$E" +
		"dwD5j9XUf6wY5rNJRZIATXUFqtq8tKcxKmwzB2wF7xDrca4pb8O1ysvqEEe0Pdg9bj2B4ZC" +
		"LYOlzcCLWW$bbFsOgYXFp6Fw366GmFq83gL0yRXt3IlXmVX2LKRduCdxCpXDMIpQ17Svlee" +
		"t0F8HrO5EKdgzWEz5WYTcg46jTFPSOp1DTFLV5YvcUfcSqPZwTLh0fq7EHk4TXVfDsjGR7Z" +
		"vasItjW1x53MAQejDhuCTDygGs9cHzXzVTZvcU5sWQDZWypQfr4dnazZ#Q3s5XWLfR1ytaX" +
		"BxOUejtOWm7CB2s6FH#eCC#WORGPc2#Lw0tcV7fNOcPJhFjSstWxMCzKIGLnOhvQ31Ch$VR" +
		"CPy82TwCP#9okCLAd#37JS$G2JQ3Js7MYFspZGc0iLfZH4j5MOXQzhLjSsvYVx1XqzXVjw6" +
		"236NNxQxJcyWNMi$GM$n5QoZ1ZSeg$LN6t8fCQKXQx6vgVX5QqftHgfrenZVg9dahp6RxPV" +
		"fc#QReLOg5hBVtZQuMqQcghMo4MiY$u2y6QHolYnim#WuqleqEabG3pSbYqiXPsCtMWpGep" +
		"xhZMqZDiLDwQ0EQbHlDlqufGpEBI1FJy8Nq0Qpc4xgTNWVaWUBlk2lCSwXsEcHu8ivQx4i3" +
		"ijvRlsJXuZs3CdoU0kGXwdk3g#GvWtgmmIwHjb2Tfnpkuc0SaxVsAn42wqM3#YHtW$1wCsH" +
		"gO06QR7ANdWMfKBWJcNILcaGjlzQuUbQoTQnjvePXzDoQWvzS2UXRBDMP#hS7yGFoOhMpne" +
		"CGewnILQYOS8#EM9JQm0JfkjVLZPkUOCVYz7pEyPtnwrZwY6tMMtYzkT2SxFPsUx7GpRtTa" +
		"vz9mvI6Kfr5hZPvie6i5LHeTKlpeRgfBT79sPdVGHesEdSdciKRAHi#aaMmFfRk9T9UBRf9" +
		"1rz#rqRFh6Xq$r8$EwU7qq3tB#uhRQP0QzIUAzNvqJezaFHNjPhsOfExkeusIesStoh6dUz" +
		"PQgdkM9bhxkxeRRT2DSNt$hl6XiuwXFNs$98FEQaaRxSRy9kYkkzETNb6ZudthO#iJjVOwo" +
		"shgwgvxqcjSjDekI1PTcEx0#GY5hjmgS$tCjmRTeQxkZevJTxVvRXJV9OFEBlIWcuW$e7CE" +
		"O5NiLkMvzwHnxafYBuFkBJywApjETEFWcVPE2bsd2BehKjgJ7gL501qT4Mft8awxK$FVmAJ" +
		"GTQIDsXixtPnkucyrWooNzIdTJGkWSxg5ZbawCiuP98ldy0irElwQw4gNqXLq9Lr5LzCrT2" +
		"rTnpgntLXVreKDOyFP23QIZMAZsQvi3Fr5VzDHKbE#A#n2$YMruvluJVmIVX6VmI$cb$BB#" +
		"ENyIduLlvhb0ET6ogOJw5o#Xl$AF#Hlyc$utzmHhOKGcI8BMYcYtLdRW5R8nyfOEUlDUWQq" +
		"GZ$JByoYFzbXx7zi8ZjUz6Sdi7tOK8c1jMOLzBdgjtz4xuJRCP6tuBjms#uKgnry8eqJG#k" +
		"k7Vm1Vhzi1riZdX4adeZM3d4TwokkZDGEKSXF45paqx6nsa55x7mnWxAnSpezSZiIbKjdqK" +
		"0so3STNY#M$kQ8dSIdKgxL84LoBnA5LXPTBF9ZoHKLc3$wIRbyMehaJXIDMOPe8XR4aclj9" +
		"APRzoOkDxgTMer4Cz7SsPboOxPtLnhjkvwohKV4dDJ8jPjOZr6Uxppg4rFkorJakmxZuswQ" +
		"bngvyCJtK5zwqEuOK#uR69UNn1gNISYTH0#B1R7zcdWFSY#JSbFLlpH6x4pFGcvCFoG#Xjm" +
		"hKYhtAT5IoOsfPwixv7wMIhasYNtHvWNMup7bzd7MYozWpq#dIgxlRx6$zOHre7Wjffzyoy" +
		"eGNr4sd#Rx8pLoCSzEX6MDiz9ga5jW3Q1iiJ1bxVqLaYTPUq1cB3qtuHTOWsHxhQAKjNUWb" +
		"ON#RHbJxj7MsTOGfMSdPN8dOKw$e0R$FDoQQTqlzGnDfsOShOJSITQ9iUMo76kUzI3aRaYP" +
		"N7dQC96#i2R4jAinz9NrC6NxfaMJ6xv#YRewpKST$br59VNaPUnRjewjPp#m7zacjeNzmdv" +
		"ZVx2$w1jUGTzPk$F6l2bBvutuGjP0hUoNy9NYe3XMfu#pn3JnA$tEY77VHIoBtyFVmPxjO7" +
		"68E5GS9lwNZ5QjLMmwVL73g3cONOXPVfhrlzfhbIQnwTPkDD3tZwYqbbk7HTOgkuoUP#X5U" +
		"xEzcSQmKgpvnwWr$mB#HZnQJG3H5FqSm7gTDHQLhAczsRB4HFege5M98VoFB#GZrQdBtl7r" +
		"SmA8fkDlYjXWFOdFIjQSjMJJnJ5yS02H#9xloiUoQT3GGzPyUvEzYT$CzuNbJLE8ZkIhKuk" +
		"8HbjLz0shPEqLeWxs9jP17CiwUdIqAT8VT7II6WkT#0Sfrb5dQnIR0XGRM3KGNSu6iK7Y9A" +
		"nQNKHM3$5zw5YmElE5udg5Q5V#HMeHMSUp8VGTsns8TWUYFTdUx3Xn5ZifW0ZhW714ry6oY" +
		"zHU#rwnLtA8ujc1iLAv0wDlnVdiP0#Yv7Pp6$HkpZUDdQfsSuNMljPnj9RVnUys9ma9Q4qi" +
		"jCPR4#23ni3BXcZ7FOazGpw1uGUWbwTH1lOwL$krnixZRyJt3CsQef$0qFNMjTPabBxDUfx" +
		"FIsHKOlv9irwndhCxetyli5wm5bWBhKLOIHV1GrtABgQ1$6Z#613URBqa5j8jTAlzi$qpa3" +
		"wkFDS5V7LSIDFbqqFh56iMluNFJc2C5h6Px5hxPzO1tgBIcirkW1UvZSsL6CB$#F70F8tTo" +
		"q$rUmts4FyWlXFGk3Ns27r7tz0Nz5MaleNyzqFJVBFOHxwR#KBVhUe9mItyYzGY0fO3s5U#" +
		"sw0PEVkyPdt0#m7X0NBT46PxPtAEllpE#TBw47uiJNdMJFvRQX7n$dmW7yo7yI4SEkAZwMI" +
		"#6z0KXQ7PGrePtukFv#DWk$i1qVuAqQ5Yh#GGnJFIwMHp$bJ43zCZdH$EZwbXfEV5KU#dvZ" +
		"peA5YjhdSoXmUXJsGhVTFuYRI6J#6d8BQAdvQabrfeP9p17wMlCTB795SFFyUl0#jLW$LyM" +
		"XsaWmty2h4ruZfuF4tYKwaNP4yCdulOaUmeTepusYh1cleYVb#IVJJ6jFDMFijuu$VeVIy#" +
		"FfVVpk$aTqJoTd5fu14ZuGvuVYM1EefTWYHSm5$dR$4LeXLytIf8kGfIkXafjhH#vd0Abi8" +
		"xyawyZpN1xickvk$oXzYdV9x8gQKzlSy$qWZPTVmJQKzsJp6Fh#MVqnehXqihM5LB2T$oTS" +
		"OArlFlfGJs2D$CVwPsjCOykOeW8RQMQHEjvh$GOpGCzhw1$yx$O6lvNtnpy7DEDfvlvJvwd" +
		"DxXhNbpNihpU4EUmItEsD#2QLjY7$9kl3klOf#mZzL9Ufh$JHHQxRl6tSqqf9xM7VH6#5g4" +
		"sebijEJZskb850WpgaK9QeEEH2bD4arXvMleKOHQi6O9M#A1B9irh1qkIEvW#kvWqLTPnwD" +
		"YW1ZXEuVMY3t4dc9S4hYU1gucjSFbcuezaS9bdoicA2yuoJx7QUwCe3NES6UOCpG9NCy2rr" +
		"wrm#KCiQUQVZp2wQVwSP8uMans1a9VnuiJdTQ9u#8jWUkKMjhNAMAAmNMwE5FYSbgAyyGvz" +
		"dd0TO6O9YvA0bShu9fQIrnNYMiChcl5ZKfVDucRnQrY5d3D5dF5dOdYeYtYBk2wf7Qus4FY" +
		"VeFh0V6mmlMeU58y9fu2hgV5i#BvX77z9bu0hcjgEHx7YCLcFXaZNbUutX8hn2hnBd2j5Wl" +
		"51mdZ#aDynBBvW5hsuoVY6wElTPYv9QwDua$nZx21osUbMvGmhgrM9d0DhHqkgw7l1kCdRh" +
		"7o9Iwhq2grYgt6cDsQM6VGimdZ#iTg3boZQeVBFiHgPrOUxQrAXQkZLMrrixf0NmkjdbRlX" +
		"CSZi$e2r#wrrDSmQwJ1DThQK#7QnzgFnbW70PTj7MmTcZ0kOHqENFlK4bSJQwB1TQHrbB8l" +
		"x6Oj#LH#ZNMgTOvrPiAuUbZd0jU4Mk8w7nQaSLrkNQNqTOLrZNMzTHDmtG2C2TiNEzYQ0rm" +
		"HpXaIyXFFMdSRN7TQz#XTWlKe2FuBdy$GhWdZEjHw6RWcrTP$MSkC$zhLUaFfwrFh8vBN6l" +
		"MPi9zWLw9CDZ#sbhYaP8rBNb9V$YjPN8yfN2TlTxYUKBXEt#vmpPUunDNR6oxULk6wORl3r" +
		"LxXkcsxmrMfSDsntU6gLhWYd1XiOrnT5Qv7jZjSFHMk#Id7fNVymRZYVN#Qr8vVudfEL9hs" +
		"oNVprANUdnuExdytZ$W2CLxie##AtH9iVsznODtqYHXisZv6f8UTy98u0EalXgURiaF4IFw" +
		"nsxSaQhdUWuxyvrCazWwpcwb8JJTnrM#id$ak2l5FQJVHpICvvfaLEqlsczB8fwdMAijKeR" +
		"cqXbsaTD9FVTx2Zn1M8hPbTtQrwh4jDiLlMtHpHDiwKDdMcCIU8iEsP3lM#iv5wVSH32aht" +
		"e64i3ChUUwdoddEhAATez86rO9UrksAgnXiIvOUxxRpQwk4ZMVNsJrb3BKNYrFrgPYwUpRo" +
		"gfZTK$IfvVvmxvhy4#oixZrWWhr4P9sWo$ekG7zS4UKD2X8HpjjJZ3stpYMqg7C9W#jSmlL" +
		"wlBE74pgjVy2jHtutHr$xOBod7AtlJuDMZi0nxBqmBp#EPjCUj2zXnqrXFW7rpKRgAw2nTQ" +
		"x9B#jGWluUvja9ltcZBwm0v9it8YEoZhnNt6$UrBPbKxswus#BmvDgcInhMYPUYjqoSHp$L" +
		"PmiZgpb6sB#sXOPkU7N0Tj8eq7MoDzBjcK1ZIPdAxMMkxrgzBiwbx1bM$LPdRVipxgM81hK" +
		"kOGsTIwXVPrB6BkjBAps$hqckP7zUvrhzAXjrRB$h4PFgDTeYZLwxd#jPQoWpcgkircUVLz" +
		"dDM#eivetrbdDFzLPpPlhhEQVwwpcN#kivj$hhEOwMzEnhOcVElclcATEoRtvI97niWzIND" +
		"$NgQsFdnlyPb$2EZLF2NpdgfFS3I4dkKkjeM83jQRcR3mr8mgHvRyU3voDUYz7zdKBseLQc" +
		"GGZovgWP17D2PM5DCYY2iXg8D#4jGw8yYQilBAjCUfaUeChKCdIMAonrY78TpEajQ9RS6yd" +
		"QanDg2djZF0fIeiQSuKgMOfyYwLDHJap9ckCzHxrCdAA8ysKyipOqYtroWg$IgEVbwghbpU" +
		"pjKkAxENpK3j9u9jYfk$aDyNCYJ#5sudfEw9cOcguTgmZmgmdEARjf2MraxrERI9e1mXy5w" +
		"FNMoi4qfPKt$dnM9U1qEj6RsqzEXmJiHz2hqOXVPS2lLE4qy8aUY$Xju0Zrk9BgCyztmvKM" +
		"hu7T5DanV67#RsrgPlUZTuf$3nwBmMjNrdxEhYeA$tXpeDrfJzS7zMgxM$NfZHFJu7EQbM3" +
		"c8eQ8lcYm1LjrnFB5#7opL2#AAelLxweThsQjEPfNRAIVLV##oLh8J4#3KaFOB6RwAWTIIi" +
		"xKayal9eu2ZtYj$F8rm6ry3jl9b#MDzYH#gk#P7r9$upXktP7AxjZQVZ$KScwt2d#fNQA9B" +
		"QepmHsYkvluVuiVXM$9RPJ5B#hDS3aI3j5v$F0f2F#Y3eVZH6R8Y1j8CyC8fzIMBUgSjdYb" +
		"nXvWC9tDP3UB3P74woHYXzDR75u3l73TZtVxuZbabm$qFeTfeNrvUhBrM4vtfbtuJruhnrb" +
		"vB9zjtUDrfUhBrTVxlzXkMGzsl9$NUBhEunEwylLbwilLr$k$tkv93qzp$xN9URkC3gjBrT" +
		"VhhvSVRdwSZl6YT5$lboKPooUPnlXETHpXHXFBkHztrNooKKTlG6Jn3g1VaXgTR5VKgKY$D" +
		"vJ7AMEJghKYqcLMf9KgLUIASKZV5CZZb95IPKgJwfKSkzpFX3bZMVl5Ij7q6#mA1xwB5G#d" +
		"TmIBOULQmdrrE$2O6aXpq9ZNDOqwo9hUW0FdQQVXT8vIbgazvZVqJdCiz3W$xHhBh598Otw" +
		"jZIDjowWNjOb$lQBdzXItJh$z$ZLBnKJdHW2zp0WlbXifZCzQJL#Aubk0vr79uLYjMPOB9h" +
		"$4WxyrqpADZNCecCyVLLYdXExpuZf$8JUDBk5paZSskZ792mqmcynr5ZcY2JAF9z4cGL9b5" +
		"cKU1c#Kn9b8lpARerb8lnELFJVpB5EzuzY#L$Juo#dVZD7MNs4NxaFkfpFWkEc7Ao#Xbdx9" +
		"bXz0tPrh7SII7wxOkT0tUmfzepYDnePo2D61#vR9wcx1Y6RnOfLQWlkOjJlBJ1yYj7i1ROG" +
		"uUVaR$QmTzcZwixZx4ds4dkPlShUG9ups3Bs6dkBhM3lX68GtK6ZJDfg2hdy64GFZI54HwC" +
		"q1dmQ32giC3WV1sD0UW1331#lCCHu3uJqBA0yJJGVB$K97v$0Mid$7eXSAnaVdz1xEkQDc4" +
		"JNbHIGYZwz8CblS8snU4JR3fzh8im#KMSTp6salprpl9bhT8gyz6odVjSfiT7eMawb6nnFe" +
		"PS$nVyRDJB$63MtxKLx#rCmj#dPRh9RBiBC5cGPpvAUspBe98#qutpdozckXcyHwKl$bvB0" +
		"DxFIbTIpOtgMCPZj8jo7L8hrMqyrt8yzYqUz6xlMUfdRaymWs$NxxP1VUgd9YZoNjbttik9" +
		"TWv1QWzsE4Yj1RvdI$l#mG$7MOhsDMkwaq4iaXEAUX7BV7wMlUFZyupix35bqhSRUXPI9Hk" +
		"5rnR2Rc3iYyQh0NaKiIJ6Mf7PXmFAcn1A7p9IXWimrIcQi71$##wYi3ZMXihfk0rIzQaGrO" +
		"XkWcbGZgYjJYogmMmZ835xrGEQD1bMKiO0STsbKxgf7huE2yoUgf#ZvnmUru3nF6RFg4Ne5" +
		"VcBecaRj5Z92ssbD5Qz4FcrGrt7gKvRqpmlcDmanB#pZhlSylr9eDOjMc$Lcn7aXzFBNDjw" +
		"jtnI9jDwBa3B2f8rrxnuMbgBgjo#A83sajh1r8R7Jb0uRqDXOkprSsH7quCwjUhS77PhBda" +
		"wXLy2UJfLwq3iFwzq8Eeoz2z9OT0btt#Pywievs7FU8gzeFd#A6sfWBOugJzjjTYGxfvuO9" +
		"#McxNLslgUax5TZZcMrH#2iZLb$R0GDhBoQ#YpSziXTrtdxpFam8lhGAtnT9wyOjkFe$uEG" +
		"xPPO0NhEX8tjXTXEu8h39kDjdtqXnNCbt3vxMaZxraHfNoH$5lUO2$aDLx#ioFM6fCJIaCS" +
		"$tA3g7Uz9kJt8S$ftmqP3RgtfuRL6a7WZPOIatXY4mwzt$xVi$R$FBLD2#iJSYvmQk6PYht" +
		"uiPfxZwGJitK#Ya#aK#C0fQDtfT0QTIMTX9tqEdOlT#FbqFLf$8oJDfvkXky$eSwfKkYkZR" +
		"wXQhP$bjqFykPOXrorqA$BCWfUV0prLqnrq9zr5TzCykeVkfVleVdg07gI7w65wX1wbn#Xn" +
		"UeAUP8tOJgmnFKFFqdC6tKBwqOGOQqsl985PufnXoibTYfOXCLVG3swkpHepPFWnLyI76RX" +
		"oMPx1F8f6GqSBYS4kSoYNob5B8fWhK68G3QRcD1IOlwDErDdecL6LmjpHWxbZidf6RR8FDU" +
		"RNw7L8MGZP6lCxm9i8vf6ghbsnesB0$8sBURtIXiISuy4y8cdCdL7cI8EvMkbueK6v6qRp7" +
		"WbX$aHXbYX7AimIlSOy7tgGc3jxCCyDmxmiJimSVRGuo9w3CIQ0MPusAeoLy40p5CPg5PSj" +
		"ALVnYMY97$FwfFLSJiDfaS4iw$RN#8sgiGgOrwD6ZNjLn5R5qlppz08jCEsOmORI4kXRndw" +
		"7vZUhLao6jVjbLfXM34bOyzAgPvbM387LlPEyvc5rMlFIIhJc5vfHsH5tP5pU2V4aIMXUOb" +
		"xa6PMrmLm5R1BZV7WHZRdSzIJXc9Fss46OzyRSMnlC5M5w3iJ3CSzF6dC5TEF7B7yFYTK2S" +
		"oFQIM4SxOxAoVei3BWgpAYizcDc#M6OoxU1dYSO#vLrQinCnTy1uhacVckOzwjoCNyI9sQD" +
		"oElzua77OAFbaAhdRHdIyuckGQAhef$3vi2VNNJDwnITd9tBC3jhT3yZhFeReMg49BfAZ3W" +
		"$kagpgaZteqEehj4n5vtKe#xPXPJDgetd2g2hIde4rKvtaiy0bsClk6Uzkgisw9YBRdBSgv" +
		"ig$2M3hXoegc11MdTZrKWUo0QnmSRkEgP0TxBLoQCBrPtaayFGhJJeEhleviQ9RYEa$9GKk" +
		"YeFkagpFoY7LlnsrpyCNS2ZJ8WR7Ki1Eh$kAbH8putzm$nTmEwguaGd$VBefD5fRopjRe3n" +
		"nh8#YMwk1rsutUsL0BfN3Jg6bQaWYzAmAyp0Jh61sYlgzNyUvLC15L8H5LC9bQePRY#bgJ9" +
		"8bpkQdJ52Mb1BzPk6hQaDjQLsr9uwu6v$s60drQ8kr9MwKNVgGJsf5$McFjIN#YMWbQbq0L" +
		"r8qx1BlmZMSJ7swfSg3Fg9ZPwr9oRSZafLiho6TaokutR8aQhRaOqMv2RHZaaOJ#LqJ0tjg" +
		"53x3xaVwnob7OdAhO9zLy8EAckm0wRbiemKoPrBarWLFe#9APS1bsxlt1J9hSI8cKn7OmyN" +
		"I#uoMf5YkPiWzsZeUNuDUgvMSfV16bBLlnlfnpZaLXYvyrCajqB9dL#3FVCQnsNYSYiXTN4" +
		"DSbUuSbFLlmpzoxQ1tAfjB3UsNVdbBakft1yndvRNOC$QJyv5A3LoNrKheFvnoXsIqlPgtn" +
		"nxNj3#UMxA$FEhD1h#UN4DxPLUiYxqp6hmpzpuvo7uIutSFPNSiXhaLXcv5IcJg#UayJIgX" +
		"dbmtnhanhz#sHDr#DUUCx3sx4pxqm5q81r41zCXT2WTHl#Zm#a86WTh7uirgVJDrLZDpaBB" +
		"vEfqPDnxjiGqeN$7kXdwe0pjN0rDl4llqVlq0NsOZ5QP1TyqlePHCvUMGglBuPzghrNCEwm" +
		"BLbDLq2h3V1zPgqkXrUNe0JrdL4EhJ6brL4Bxz7WGTJRF0KP2Tt8NiYVs7wjXHm6jHaRexs" +
		"UUSaJpyTSPMfUVCw2llH1QZVO745L1FqkXd#NessLAHnpnMOZN3Q9gMC0uq2SAKIVeg1CGV" +
		"HAtZXRN2QBEQgH$0aHpbLTQ3VAEXQe8Ow7k477qqrZWgW3DGAmC#89xBHgYYZhgDUyEhDhi" +
		"m5P3JW1HSdLLcBegq4Qzcri92vNl4VhzPI9Q6q8$OLJFLy$GGhNZh#zRjVTVYlvTZhr$9Vh" +
		"RhxLlutw6DjyyWSccnQmXIdzFIsX3GgEoaZw6d$nKUQuo#eA#fA$eQzHKeKvkENpQKbO4XF" +
		"sXxI5gFf0ZSnPa9#AvgkNJGo1SoNgpFWazGvYhl5Sd89q1dKglyGdIelbN1gHpFLuZtdEo#" +
		"17DnNWOXxbbtuXzosXuM5gP#fi5aeZAKeveF8s0r38ruyrGQpO6X2FKkY4KorAaBLSZMiu#" +
		"unIYiNNWDSgCzInKLZK28OQ#3DTCXNfQir25kAiZLgTUOuGxqhaPwML0aDn8zzOxmzGhswB" +
		"hbNgGzLQera#ccQQbj#5ESZA6k3A#XumDOS#wugrdkAk35WPhHtWThmuwHrqvzOVF#1iZKf" +
		"xFX7j#$VH#00sK7etrJH8VSzlfzyP7iUv1#1YyqlVm38buEw#4ZaR2dcvlbREqO0dG4dgGv" +
		"KCNmnAICagjMJdmpQ0Dh7EjxSblft8lA15snkWjH$fCI2Y71cwhfGJkQhc2zL0Ivggq2lUj" +
		"ecGaV8lnhC$bvNabPrcg9S7rw3rrP$gRDM5DMJFrROCAjZDhpbeWNTaIQyFQidQiFUl0$4y" +
		"X$6#YV8kmlxVACPlAvvpX5bcXvjM$QwcZMHvlKQ5qD4ljLIkXetzKA1aTFKLFrnANj0cDQo" +
		"xiLU8QZh#EoZg6Ap#yRN2L0vd6DHmO9AvAXCenacQ2vD#smIKb#t4DKxYafGzJk7Hes#3YR" +
		"Z#McrbZ6FXm5rV5DiDL5e9BFWNaohxA5KySLtaASCtruE8ALvdIuRR69VT36XSpTY$FbPZ2" +
		"9VS5F0bSPId09TSW$dsDnjLHhHJXurc1Ea7SDhZAFNRlrnT3U1FqLK6$9EM$EgO0LqTNN$v" +
		"Lt6ApffsfUZ4P#wf8YNtvxNwnqTTArQDCwalrPEAuDgNKllpw6g9EU#GQOZxwCHdxIcq$Ce" +
		"EB1ut7PFIrCgNzoCrwGcjhlhBx#QXzM$clQeDhibbjmhOSN3JJKLVYk52crhYKP8LBXO3BC" +
		"LSzhdfSzRZgSTNZIWqkNLzok90REtI3QuOfhr9KIExPRmStUtQ4rDjlvkwSX5loJDtq2MtM" +
		"RLThWv3p1AHkGVe$uUdwajyUOjnnBvPPMuoifnyZwnXgDpH2ze#91yb1$C#490TwQKRABKg" +
		"l7xBb#QUsA1FFIGGZIbIvRVVO5dLsRQj$9DkYKSgs4dsA$8pglImgatO02YkBk#5dLf2Yod" +
		"dFhAATeshSdGpNdrlKPt#tdV8SLPwtLkayL2r$RLAUYcdRGfe#R#tF4ZkX3EirrZ7r$Ya93" +
		"vXWBqbFOygMWw9eEk6nyAzuxte9yKjmwmcUIrAEreopcRGeilV7M7o3tgItwEr8FW4f7u76" +
		"WjPkhvgCHu9xvf$mQFJtaNdp9gAEl5TAtyUErQyZQkjdNCIcPT5N035RbgHSrbNBTS8ktR9" +
		"$NwDXrbXhZIPfAxMKknrhzB$RP$y5tTLBs9ujxBzhsVKQhTTelKR$vPRLrrnVSttD$zcQQ#" +
		"6ldAYdJicUTCG#bzzXwalqlDMSx52P$hqc9#maLxt7DvlwgoS88MVTfZSw1yv6lHSHIBqdR" +
		"#9#MQEaB4UUH8UV6ajPQzGlkiHu4rRLqedMoNCZVOAhKlGx#O4tOVkha#cjD0YVFhB9OSJa" +
		"73TAvTRvriWmoqPyl#WsXJlhw2ZgfEMmbX5FfgN4hQfcZwpmYsL7bwBR5PIxPQhi9NaxyVU" +
		"T$AQOu#Y#2xSJtNVul3tQkNq8Wk2OxhjOtnoJ2FJtmwMbofZgEnUFH80#C5gyrME7woBrGv" +
		"YrXlHTYlI#FTMIvBS3LVaAKFCecgjIR$lKgkwelIBhJaNhKr577UaFT#fCVwhkMhMzbgLhh" +
		"RFQrO3IpIFv8ez#eknwOlaYezTEqUSexOjgYRqsca$#cy3$Vida9SQb8QLDgQ6zTYYjx4Wz" +
		"aUXgOY#GiVCeNcj4hQp$$yl8gIzPNzBC6Eez$Xsgx8wbuVz79UjyfuZGx6XhhtzzfqYUMIV" +
		"gJX5Q#2s25cASGx4SLQvJpBCgkKRKl$6sIrJ92YdhPcBxXUTWGxRd#Nw7B9Vy#c57QM5zkV" +
		"fo$yLozIEtlbnzkVfo$vro$xv7g$UXzUNgozMNgo$tNozNFxVKbwilLr#klbnzkVfo$z5oa" +
		"P#nU9zjH7i39jORaNNx1aoIRntNbwelLOUb8ZwVYv4Z#7lpYeU#NIsVJiwEbKEbpOuipVjs" +
		"TPIdXq4vGf#5HlOD9iUwwAsZtzHdz96$Y7xp$mTZzOGonssT$tlywgachGf1#n7o5h9TQ6t" +
		"DticJurVGx$H7s2#nbBDUKP$E3jV#IzV0IbXfXBvodn6pLeczQSRw9sLjzMN#8sM2Hd42l#" +
		"kZx6UEjlhmNxaFiNeAYSynF9vPM$vIQunt4jHx2xzuwiQih7YPYSkPVKlWFckWKYlDtSvKh" +
		"LABcN1hKEyjgEzZR97$pG1ygFpD7Xf18zKT#J#9zJSongAaKFzdSHpjI#CZOM1ctDAHJiWL" +
		"YY7uakNCjqSC1XLM68Y2CI35nH3JnnzPaywLrrM8eyu2Kf#p4rehcVT0r5f9ln6Jq7iwniS" +
		"dkAvqswpVx$ajqTMTASrOOSJrPfYM8#azrbi$ZlhsZAlbY1uziT7ejdY66reKPdCcnJ#tgV" +
		"0SERS5fNoaPxl0t1PnzWso33EtpQO$FD9#fJ8rsyNy5f79goo31VfjYT9#IIpFWlkj8lPEM" +
		"IpjrtG$zYmU$MuDjTRBt8vaXjgkAZ$R2Rfgig9Gs$N4boIs1iFdnw1FJMdp7tP2VKhqMkWl" +
		"NKlmnQm4ltEGMEw8VSK6XFj1DYeKMKsUKUM8iSS8gotQgK3C7H6zI2$Xy#KKOqbg5#PYYMi" +
		"NbXfKVfdrgEfHnOyga5epgcXZ8Hgg40#Ke9wYvySUtzi2xsx1lyT$KSLMXSuBShUWlYaSX8" +
		"mLemLHnxbS1#7pZy2yu7wRV4dazHxh5rLJ4UU5qCkjVv6$VfF#LwJrNdYAFCjGFB3U2qinz" +
		"OViv2BM5ZQtOZqfTLXEQslwFdc4TRKxjvhTtX9NPXYMC7lQBveEQzfvEkvts#clS7dGWtlU" +
		"ekBHUiyzCqBRzqjWD#3HeED#1w0kp$Uab3Xor1g1rc5o2A33MskqdnZhEc#VHRFZ4CHXwph" +
		"r6UjR4hfzxkyYHBIz8Dlnr1w7JUuexOiuByG$viBimD##clVTCJKKwXyMHPRacHVy7jm$ao" +
		"o9K6kulrk4VN3mNBKeg8I$rbLUlQlGgYXz4Z7L4$#To5fx0SchzLNoWwZZ5qG3#n6Dc2lJ8" +
		"n6kyKHv6Jei3ZPf9sdUvb9yFAd3xLP4ANz3jBh3y$9TDCzy2k5JTTZg5hYVkJb2cOzCc$uo" +
		"yQr4XLKwdFu$WxkTgSl2nuFWsO7orYvetxFWfuEs4AMLW$QEZ2zj4F8k0J$4nBSQVcrutgR" +
		"3Y9hS3moZJHwKoyz0H$oCjFs9M27uaw3h3TPNDS$OtN3e87yF7Mum8RZkrjSHbTs7z1jDtg" +
		"MGzPG9RoGg7sNgt1XSBXUoovv1dZrDNhGtip#mL88V6QdDqOXevrwGtwpcV9cV4ZK$1ddV0" +
		"Ry7c6v1skFcdgqvcNxAM6NQszhmmmrV6AYlmM9F#2qG#hjXfevdtuJmiC3z5j1nsMb8EqZ7" +
		"qmOZxAchnHw1SCDiaB6vh7o4$u5UVaJu29EsEr7xdF3sjPscEL#YURiMuNdeLw9Ea9rrCVZ" +
		"1uD11fxF0LuC3SzP7u4#WZlV1tqQ$$q7KEHtbhW1l0Vk5$ZeFG1owx7n0SDsTJpVyUa$Qeu" +
		"Q$eRcumdFlEyshUI0jws#qjOtHOHNQkIlu21rFnxtgSfFlPOJxc7nTKEOn1Ev26BP8x#dqd" +
		"0OeVnJI8epLx8MutnvrmAVaf0VVop7os3A4JmgaYvw8dsBoF0vwEd2l#XHyO4nNNnqgIz$F" +
		"VHtviIBDMGnwIQUrlmZXZqrzQoEL2y5b0vCPxxcTKFuEy1A33QkLQlYJmZBmhm7b073Ch6b" +
		"jYBeqHRc#u3rrtYxx1EhaUo1#8l91TsaOkrtGpzO3uD2ZzIViSe6H9p2MdqOQRB4fV4bkDz" +
		"2vmF0U#2KwJuN1neuBr9#n2VUXgzpvm7YTQJV6VXvqbPSPtBuyOCrhIzGX3nnZ86#CJgVdW" +
		"ESL7Hu8VzK1FY9lh8vt68rmSnrkSu1fqtIaNsZg76Zo7OdqjPXdJjHnQohHe5rCdWiHdu7u" +
		"K1rFWmu77Mh28z5U#4lhGuJXbzCPi7nkzFYtvbqR6TuLCWu47miENNKz5cNGxrqlGRaZmEy" +
		"6FnhyHQJF1Fy4$3PmZB6qRw7hFtGztOeW4$RSRJVurnxWm9OEE#rs9x2Y7TrWHtd$0yTOpJ" +
		"iS$3VmmuYw5u2V3uvnauVoUSQtvM4yvq7$UV2t77RJNUhiNd3KbVSyEDgVznN6nF48pz5bk" +
		"Zzlk1bBtRTetYF7S3EFzHXkkF6RFSup$5R3dpOO7a9u5JZcaZpeDrkEWpqH1ky1tvQ7#ISF" +
		"zjSJOpOFuouFlgTdAxGRxKc7h#u9dzKQzjRpRF1hOMCx8OmsfQq7NuayiCUM4xMih0r8#m5" +
		"fFg9U6R31WU0jmJ4Fza8u7VD5B$HJEkma0thiTGPiauFV0DuG1FlhzPYkgzURXg#Jt4j4lO" +
		"NX5I7fVGtVBv2M3tlF7mexN0TkT9S$0WJxgfJtEkYqRFZTdEP80#MZh$AhJLxOGYNyRZxMI" +
		"Fcc$doCyHoi6IhHbdpe9t#GIJy4QMU23mUT5Omj7UtCdmYw6NdWx$ClC79XIpde$qhqGpx6" +
		"VlwzfgxbI8D#yny16L#UZxx9WUuhCR$dmwRoJH$dlqjKXVxBHrtvPcpqFXLXz7llQqoUBG4" +
		"i1GqC3vlBuY6K2vlpaGQRpf4#7sqlCEkN0hDsoO0$B31pL05yVximNuqvT9p9Q$2s$TLJzp" +
		"4XiiR4m6RcuWBeChqeoVQXdyhRcZ1yRc#CeOAhaNQJIPkCi5cd563Cz4PV5Q2lAWQOD8o1P" +
		"h3l0jalM6CNe5#Qedm1$4x5sHuvPYrUY7cYD#QEGlYuGcFR37EKW3zB$qV7i#7J1CPD8SPc" +
		"R#YpC0lKKD$R6MEoi1a8wvC#gAiGOxAmlz4dRB9mG41c1dnguQw1U1N6Pk5uW#CW47n37yo" +
		"tXSQl5C8sCp1ECpO7oXGQNrxuAFhoSt3OTE5CdPQ9EQBmAdCVFgxGz6VVmt0Fzb5erhg5y3" +
		"#5AuFrtcSVj7kv2MDkBFmil6yiZ4rh3VpFoT0DnaOVp9i3PvaoztdgUWNb5nfPyFk5BuNNb" +
		"N6OfqqVUiBmOvaOPuFEywIzYZfbM#4pcvlrV54x4FnM4NHV17yt57rJ17zH1DzGX7aq7Uqj" +
		"GbyKmQyLOOuembgq27DC4Vgr27ekGdkROuufsXU4#QWFrbdIP9jZdYw2ZsdH4Hm#fcWkzDS" +
		"877bRp08$58GvjTLiSAp7gZ0N5S4EMyEl5Rs6F1#0pmF1V$V5t5Y4DN9Bz7CHnaGHR7Emn0" +
		"lVmB5#AyAQFEDLtPu6bOOVRVWypOlHJhcTAaOxYWjrMWxM8rLp42y6bPfyyATDqVvYjBdg1" +
		"V0ceAQctw3JOlZ$Ac0hnlwgsAo92Z3t4EhA7OLxM2CNext5PZsJWpL7yJbOEq1tnPZ7YoUQ" +
		"ViCSNunrH4VeftWIw2WZ7sEcunXmZC$YwO6#AuQEYc6ZnSi3QPbO7mqzDX1l#Z3kGtSDzpD" +
		"jnxm$U3#aOJxdwBE6qpprmGyNOxmFHlyMmsyNNslIeTF1ruD3fra85s#67Fy#vGlD6pOpV8" +
		"Bc9T1fWPcxnGQJLgnvHzX1iKdhEzOlFnOXl$7$$R77I8VFAMcCDED3#gCjnMOzCR2zaOKrG" +
		"SCR32RubnBOXe3jb1Z$KOAvhntAbGp1UC2UfUGmvCDuAi7ycOQnK6BscINmcGsDFolPLVEq" +
		"Omr$GNDwsDptpCyTOKCbPvbqz5iEzgCbiDCIhAa7OzrLWZL75jPYMJq3PKgmhYt1scemxBe" +
		"4Ssc9sRELO8qp63ws16Cf5xPGWhx9x6VQPlR93T$HF2lRb86Eix2768AzLWbiCmlpPjPZ0L" +
		"aDWyuqa0ThyzPxwN1ELrENcHTobfayFbCMk4kmToZvIiTBiGR8FjE4TpOSww9Iw7P82JZMu" +
		"ANfEZrNXji7vFP5NsPDrs4BUxDS#BVIIYysKvzPasTbcRXPivGU79et4Y4V$6bk7$1hGB3b" +
		"8OF0fm0tmhcRFFcWzrACgI7mPQLO6vOQUow5xWlCsCurQvpSF7CFQopfFae$HZbPPW7M9UZ" +
		"BKim5cKOlMSQUiYuo$2LJrkojwNjJfr#dPdzIQdJVUbdqjkN$XNAOExFW0qk$3gGtmlwwz1" +
		"Uq4JhD#zQa6VsD7Apvm6yGXlyT2Riho2GQWNNY28p$aTW3Z4AuKGUKDVlgHc7zejC7$wBvC" +
		"638HP#p2wDXrVaopPwRFf3SSPm$TRpL#u4yhJV4gYCU0Wwpro0xydrnNlIo1UizUCq#a9cn" +
		"niru5yiC$Wt1POTtDUb6vzPFqUMCV3F#zl2ZWkE3i0TFWoydpCbf6sikF#p5wFU6hmkEztl" +
		"R8sTOz79ipq0uund3du#tJHuz$15$tb5#VIm9JiyyGNBeVPAvR$RgcSQFPHeVMU2MGzu1mN" +
		"NGpfxmTS7tH5Fax#8fEp7uFe#wxy1b$1LF3wGL716UJ#$5F7bkZ5nV#ahDsvXzGVxnckVyg" +
		"daxupywNQ1vNpFU#zzfwbsgUT6Qu7gBAmpth26AdzMyH8JZA37d9YMpWjFPbu5mOUlWUyrQ" +
		"1S8j6mN2MV1ZT9SEMxqzvKy9bHjIt$ZezxAn1iiEiPFirmBXdAn0k01xl9pHQ4lOtbpVRp8" +
		"JDe0rW$3efjabiR15hiVox5iA5mVVgpRF8VgQSzt#vhoiqApVIitSN3erk5p$zmBXlcSORl" +
		"Oa7KS6xWtl5uwdgA7dlZaJplaba2Qm$X1JT3ZNNyRihRBU3QwBp9bJaUd7RC$pY59pzf6Bz" +
		"KtHJu7qPiy5mkt7UTfqcSblpdwQhKSOS#sGCO4yGqxGd05ZxhU8N#svTqyWdFk3vdbc3Th8" +
		"dB4rCkrjPCvd2kysV9F1OFW0SxOmeANcVHyn$3N3lpRvqpJlQkRjhexc7OPetdQTuICrRtE" +
		"FvXccNylCcgBL8NxiaSY$7a1#Oo#jBWxSQpdCy9CDlzrme$#MPhxTfPNXUni#rN0pl#rYdZ" +
		"#rylYiDkxO2SRJzfX0k9qdVuV30k4UnZVrh0gazJNFIVerrhp$WO5x0ynQVO2n$G6cFVsw6" +
		"JusaBV8#DUYIm9fZSoUOIUZwvt2djSXpPozDkuGdDxOZA76OVCI$66V26aU$QTX3PY7TMtn" +
		"QXtFdXsuLsBMFjdcN3HFdbtB$S1aa#wnsH8pd#QMXieBv2drFEl8QA7FNKlD#LJkKPvyjva" +
		"qStQGZ$rbVYdIpTekzwL0taPT33PptbLsjUQj7WsNdzuz6hPu21WU34zZHcvkaoXbZlI4hu" +
		"jmFoya$cLediGmidjhLpvtH21SPcmowmRF$Lc1SFaya$P38AsncSkRv6i#u0hDyzpdny7oA" +
		"ep#ydyqvP$6MWLp5pDx6G7$M#1$ndA#vWNcB3RFSpPKuMA8hvrD3WzFsxbP85m0My#VZJNG" +
		"0u6qmk90UDWAarOMICjO4GXdcdF14SQNPcuDt6lG8qJkxfxm#N7Ydniu7#mtsPE#eEQoB6O" +
		"UhA5F2C5dvfkyPO4qBjjXdWUEE0tn0n0F6tFHPMHxrXNDJLzdctxEVYTmhmNJFAUnfutc$A" +
		"IfEUySS9$9SxYdt8CcxQ50sX0p$sNuztAcF3VF4It$EPb7dut2#WDfRuIdPPhd6Zj5z7z8F" +
		"pmuNlGXRDkiStUAg3UaRusStdX4XBJhmzFAp7giyGl1wSE#2uH7N0mSkO5u0wnRXkRgCFqc" +
		"pnl3wnrgpWSoFVOmT7zJNlbuw7QpZdF$CqVpJ2qjCr0cpSmlnUOvccNweSe9vEat8v8EeX7" +
		"Qympi#pbJhpbVwZSpS7$WfPgBNe6qXkOzXmpth4V72ymvwuZbmEeWdnbl3RO6vylupCWpvo" +
		"V3$6UHPbuU4FGSIgUrzgmrQGJmd1Q83pLdWTbRKSVFuMM7pZCuF6DegC7Gu6nJfpd$uwzhd" +
		"cRM9MdcsLRsGBHd3igPDMFEKCpXxbe1FZ$2yw4qisyhCU$rv9WrLqb7pQs9cWlZouizpxko" +
		"tlVc3QGFC#EceLbJvFoEF3S7xZTrpujXKsinruoKPukXs0BvImwCTYyMuRe3wyKEWVWmytv" +
		"5xc1v9XcUVvZPOpGqleUbeRnPY#IQCy8IirvXNR6l6MJApJ3bp1gSvcakp5ezxJVDquTfNc" +
		"fqs#1YpRFlCEcT3VUVtxXdxU5OhVacxtaXwURzYzB5uMK6cNE84PyJZVo2Q5GM#d0QzbnO$" +
		"uqSYtXZq2weOrnesH0PQybpEUywRpYlEw$Pzzjdg$WBeET0JwdOew27dOUS1vq7dFk9x4Vi" +
		"Xvtxd7kTUvnvpjtslVQPpaNEoyuCbVT$kF#G$G12Xpg7E0Sx1o5q86YPkliyw5dGV2FtCUS" +
		"xkpjAT0FrGFmBvqldQ#ShUoTztsu4QWZAj$ESzSxt9hKoKCP67zhOdzi#kulTGDqj0MNQkN" +
		"QEoTrEvSvGuI9GkfrjPvbxhI7pMxkdyutpg$EByxEpnTdiR79#SdvqDZe$E1jKdWvsMxkLN" +
		"MMtjzlOfNPnG6iezpZAFutG4D0WK3$G0AGzwQn3YFbidTFdKvzRVN#P#6$gysVV5dnkzcro" +
		"lWF$tUsDkSxj#9pZp79kinz3w2WGrjhEHETmUv6zq7uHTRy4UXdqAWYwjLy3lGbQ1NeFX7d" +
		"C$jJUQFy0ZdROwsrepvQelhE$jN#oVqJe6z3NzbSsrbJstywNgar$A0GPDlR1zW9xYRt5jF" +
		"KlS$yt9zFUR6#oNt6KVkrVd6mdorxgKttZM#SqLFmxzVcrxojJ#alVPxwrlazzdwZQqvqqs" +
		"r7fjhtSiHsVyu$pjxFL#Slvqr7oxQr6sk$sw$Xy0$GEw5tG1o3KOdzihxK$0bzZOpTlhmIj" +
		"0Bsj#dgr$PRRH$k1gY6JIu6EvGYI$$9BehlStiLtcTF0dnFnbgh45xhDzf$gyrVVv$RdAlG" +
		"PydnZQarJdvQ92VN9VI$OMvnlf4KXvziWz8SF#7te7n$woRS4XBxpBG9XTFam9$emmdnFWj" +
		"3FlaT03uBk0yq3OKpxRW$Oc#yBJtWEUIuRuzN6sB9HgutnPQDcMzebQhSnrcn8i9y0FUx3#" +
		"jHtX#zZtqU#3trt8Notxnvytkl3kFOzu7i8dnZjleTzi6mVQl2XjEy9tm9ymk9yYq4BGP3b" +
		"UzO7#$Cj1RtYmqpiWyvzw2dVQxuLlWzyw1KVxD3thc#DRpKuxDBtZc#bYtYy6vhWwO5oDrJ" +
		"cIMtcXfhwllLzwMdt$fvSBTnGSq$gpcwemfH16vmZdIDybpgpVPSuTpXBdLUTL#2$bZWlEI" +
		"ywYvr5pa9dWNspyxlpcptJlic#4MKkLYLl02alPr#dFg#rhx6ljgz2w4hG5Q3Bx4lmURbzg" +
		"NqzFDa4PpzdlBElCyxPnpn086UvixUpbxEdCzRPmzdTsSqPu#pgZ7P6EIEbnJlz$SYTmUfp" +
		"a1jlGo6NiuiZFKrVDzxLy2vE9JuNcrYZe3Ajr6UPepJgD7MQADxOlQ$yhbFg53k5uFbkUW4" +
		"qUAbpfVpqAQ#8s1KgjjufSOfKdZprcUlqSNexlQIFm7Z7cB6t#31#dFREOUf#E$NPrgbsgX" +
		"pvDdndfnFoFEXqD9BAdGgtTyytacPxkUFQ2y8UMqZiyfPqfeCk19q7ckhtMSuvxlspfOTqO" +
		"sS5mlQ1Vl#exfpfkNE09tom6ph89#N8Rt5SwbocobpbN6rAt#cxLF6RdPkSwvmR$6Lyqvnh" +
		"Wj1YjfSBSUTSaDAGSpfe2kWK5JiPTA9pWdEySvnph3FPliy#opa6QKUxAEQfpxj1TweITsd" +
		"9YDyHaEEcpLMVa653Xdqg27Biaq37sPDL#KV8SzdxsllOO#sz0lZjtRtuxJ6WqQ3Xe95#ES" +
		"ujpapdUWTZpRdLkSHHuyqv0uGzh0qRjtiZVAgfuHxrYRlsQHujNMiVOnzb7s4VgUxATSZHz" +
		"YJxS7kYVQXz668dWA0R#tZGYVQnzkts77ksFSk#pRxLlYke1UFilUqzx3qzBTXDuP5jxWFg" +
		"fMBUDkqA6WKQ1iAkmP7#5ojt6wFOnfYsiQfttdVUSrOuR$j#yltezkMRZZjJ#JQ2C5ix7r2" +
		"4ora3MkciTbOvc0dv33QA69rT0zrgw7X39nWwCGATPEXgG$#0lWDTGrpHiGXBcWmwZWGRG0" +
		"p43SaucJILJdyXtr$W7uD$Z3mMyWp4FKc3G8D9qAUu9#aBXB#aD5g2i9zkKSJfPl1uQJRgc" +
		"KsMeJGFbvHEFwA#PS1I3VdLo3iVcB8HpaRwLfJtaYy2hK6PDQZp7OJVGVWryDV0NqVvln46" +
		"CVah6UiWRntaQShmS4cPRlnbb7aPvLzKPD5YOEkAEhe2LnTm43cepvR$efGoG9c66dYuf8R" +
		"q0sHgob3qFEfy7dLgIgEVKCzFI5k9khkXlcwGbGCUGl9tFjWkoFkj8c78OjsHtXtXMQ1NaE" +
		"yLt7yMt4$F8VwC8e4z6uj8ToP8goFGtMZBFBJlFT1zYDy5UU#2xeViEOX7emSeZVL0EtgW$" +
		"PeuwuaszGJF0#KYd8iwDgEkpU3tGCxxe0SXvrvgG1z0pnsHHr8drBT5aQ27575w6FnXy4V0" +
		"7mCzYhAFWskoM6UKwmmv#S2HXdnF8Fq9v3aPzVZf4z1oq5EA19sbo7BvcPfOEkfAHnq$8tq" +
		"k#5pmSrnAezEHxtJOcAPCEXTnIQUYNYzDGTdJG1SYh8aROdGU#FcW2n2#G74TdefwfaA6dq" +
		"z3sZJ8zTDqnAShBkWYX2zIN9FyNT#B5Gyc#N$uBb5SgFyYUYcu$0#iLu3B$sHx9VXLu5U1N" +
		"mj#BVXruDT1llpFufBaBoWbGhT1XyFKMEUAPccxW9rowN$KM91Z$WMqymNqMG7kzq9wB$HX" +
		"8QM3Ca0i8bKPltMzXsv07Nrmhm$gAOASxv7cfmt8lm5fcYpM5$dw8dmZqcz2kO2FbMIfiIJ" +
		"7mfEmpG#18nFfcKZtubw0yWkGfYcDDg6kJKZJP7cuf3JM3sNxePvYy6B8qoGyN9B56e8tG9" +
		"u6gEyNq0#mCKsPYau7fW0ryFWyIGqyN593VzplnmnbURYax31V7k2ICbm$focTBeSEBaVuC" +
		"l3BqDPha7ODyYm4vhUGzXRI9BsD#DkA2$e3uJyK5wmLsjrASK5deEmPa746i9u1t9eQXiNN" +
		"ejwroFyH#4SeMmezbOBt1##Fz3UGBkbDGxzgOYMQQ17aBqA#LU2hm7y7dmhPKo5xAcHDXPo" +
		"DI5kFU#kH$nj5WZu3$mpfdsjY8nG9DX9y97WZy4QGiHFuJk2DmLiZht$#$GeolWR9EUX5wE" +
		"mKf9s2Uaz1F9ZxquKdxX9hvw7sBd53ZBLLn0qnraIHY4XDSQ#fuW5gXhHcYeTJ6UwLALupb" +
		"IDlkU81ga1QXUA2xOpmpeeBrXpXveeBrWBX5eeBbeLmbkA2TK2u0yQGf4g49RK1OOKBOYm3" +
		"F0CSAq8G8tcoy2VYyZqt#V$SiCy6CPBl#ou5VnNyLTnlYVijmR7s1J5QWVGLY7F4EU8l8Vu" +
		"IuW9nWVZj$mVSXXyj");
 // Generated from parser/JavaParser.all
class Events extends Parser.Events {
    public void scannerError(Scanner.Exception e) {
      errors.add(new Problem(null, e.getMessage(), e.line, e.column, Problem.Severity.ERROR, Problem.Kind.LEXICAL));
    }
    public void syntaxError(Symbol token) {
      int line = Symbol.getLine(token.getStart());
      int column = Symbol.getColumn(token.getStart());
      int endLine = Symbol.getLine(token.getEnd());
      int endColumn = Symbol.getColumn(token.getEnd());
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      errors.add(new Problem(null, "unexpected token \"" + value + "\"", line, column, endLine, endColumn, Problem.Severity.ERROR, Problem.Kind.SYNTACTIC));
    }
    public void unexpectedTokenRemoved(Symbol token) {
    }
    public void missingTokenInserted(Symbol token) {
    }
    public void misspelledTokenReplaced(Symbol token) {
    }
    public void errorPhraseRemoved(Symbol error) {
    }
  }

        {
            report = new Events(); // Use error handler in parser
        }

   public CompilationUnit parse(java.io.InputStream is, String fileName) throws java.io.IOException, beaver.Parser.Exception {
     CompilationUnit cu;
     errors = new ArrayList();
     try {
       scanner.JavaScanner scanner = new scanner.JavaScanner(new scanner.Unicode(is));
       cu = (CompilationUnit)parse(scanner);
       cu.setComments(scanner.comments());
       cu.setOffsets(scanner.offsets());
     } catch(Parser.Exception e) {
       // build empty compilation unit for failed error recovery
       cu = new CompilationUnit();
     }
     for(java.util.Iterator iter = errors.iterator(); iter.hasNext(); ) {
       Problem p = (Problem)iter.next();
       p.setFileName(fileName);
       cu.addParseError(p);
     }
     return cu;
   }
   protected java.util.Collection errors = new ArrayList();

	public JavaParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 0: // goal = compilation_unit.cu
			{
					final Symbol _symbol_cu = _symbols[offset + 1];
					final CompilationUnit cu = (CompilationUnit) _symbol_cu.value;
					 return cu;
			}
			case 1: // literal = INTEGER_LITERAL.INTEGER_LITERAL
			{
					final Symbol INTEGER_LITERAL = _symbols[offset + 1];
					 return new IntegerLiteral(INTEGER_LITERAL);
			}
			case 2: // literal = LONG_LITERAL.LONG_LITERAL
			{
					final Symbol LONG_LITERAL = _symbols[offset + 1];
					 return new LongLiteral(LONG_LITERAL);
			}
			case 3: // literal = FLOATING_POINT_LITERAL.FLOATING_POINT_LITERAL
			{
					final Symbol FLOATING_POINT_LITERAL = _symbols[offset + 1];
					 return new FloatingPointLiteral(FLOATING_POINT_LITERAL);
			}
			case 4: // literal = DOUBLE_LITERAL.DOUBLE_LITERAL
			{
					final Symbol DOUBLE_LITERAL = _symbols[offset + 1];
					 return new DoubleLiteral(DOUBLE_LITERAL);
			}
			case 5: // literal = BOOLEAN_LITERAL.BOOLEAN_LITERAL
			{
					final Symbol BOOLEAN_LITERAL = _symbols[offset + 1];
					 return new BooleanLiteral(BOOLEAN_LITERAL);
			}
			case 6: // literal = CHARACTER_LITERAL.CHARACTER_LITERAL
			{
					final Symbol CHARACTER_LITERAL = _symbols[offset + 1];
					 return new CharacterLiteral(CHARACTER_LITERAL);
			}
			case 7: // literal = STRING_LITERAL.STRING_LITERAL
			{
					final Symbol STRING_LITERAL = _symbols[offset + 1];
					 return new StringLiteral(STRING_LITERAL);
			}
			case 8: // literal = NULL_LITERAL.NULL_LITERAL
			{
					final Symbol NULL_LITERAL = _symbols[offset + 1];
					 return new NullLiteral(NULL_LITERAL);
			}
			case 9: // type = primitive_type.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					 return t;
			}
			case 10: // type = reference_type.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					 return t;
			}
			case 11: // primitive_type = numeric_type.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					 return t;
			}
			case 12: // primitive_type = BOOLEAN.BOOLEAN
			{
					final Symbol BOOLEAN = _symbols[offset + 1];
					 return new PrimitiveTypeAccess("boolean");
			}
			case 13: // numeric_type = integral_type.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					 return t;
			}
			case 14: // numeric_type = floating_point_type.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					 return t;
			}
			case 15: // integral_type = BYTE.BYTE
			{
					final Symbol BYTE = _symbols[offset + 1];
					 return new PrimitiveTypeAccess("byte");
			}
			case 16: // integral_type = SHORT.SHORT
			{
					final Symbol SHORT = _symbols[offset + 1];
					 return new PrimitiveTypeAccess("short");
			}
			case 17: // integral_type = INT.INT
			{
					final Symbol INT = _symbols[offset + 1];
					 return new PrimitiveTypeAccess("int");
			}
			case 18: // integral_type = LONG.LONG
			{
					final Symbol LONG = _symbols[offset + 1];
					 return new PrimitiveTypeAccess("long");
			}
			case 19: // integral_type = CHAR.CHAR
			{
					final Symbol CHAR = _symbols[offset + 1];
					 return new PrimitiveTypeAccess("char");
			}
			case 20: // floating_point_type = FLOAT.FLOAT
			{
					final Symbol FLOAT = _symbols[offset + 1];
					 return new PrimitiveTypeAccess("float");
			}
			case 21: // floating_point_type = DOUBLE.DOUBLE
			{
					final Symbol DOUBLE = _symbols[offset + 1];
					 return new PrimitiveTypeAccess("double");
			}
			case 22: // reference_type = class_or_interface_type.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					 return t;
			}
			case 23: // reference_type = array_type.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					 return t;
			}
			case 24: // class_type = class_or_interface_type.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					 return n;
			}
			case 25: // interface_type = class_or_interface_type.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					 return n;
			}
			case 26: // array_type = primitive_type.t dims.d
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final List d = (List) _symbol_d.value;
					 return t.addArrayDims(d);
			}
			case 27: // array_type = name.n dims.d
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final List d = (List) _symbol_d.value;
					 return n.addArrayDims(d);
			}
			case 28: // name = simple_name.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final Access s = (Access) _symbol_s.value;
					 return s;
			}
			case 29: // name = qualified_name.q
			{
					final Symbol _symbol_q = _symbols[offset + 1];
					final Access q = (Access) _symbol_q.value;
					 return q;
			}
			case 30: // simple_name = IDENTIFIER.IDENTIFIER
			{
					final Symbol IDENTIFIER = _symbols[offset + 1];
					 return new ParseName(IDENTIFIER);
			}
			case 31: // qualified_name = name.n DOT.DOT simple_name.i
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final Access i = (Access) _symbol_i.value;
					 return n.qualifiesAccess(i);
			}
			case 32: // compilation_unit = package_declaration.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final IdUse p = (IdUse) _symbol_p.value;
					 return new CompilationUnit(p.getID(), new List(), new List());
			}
			case 33: // compilation_unit = package_declaration.p import_declarations.i
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final IdUse p = (IdUse) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final List i = (List) _symbol_i.value;
					 return new CompilationUnit(p.getID(), i, new List());
			}
			case 34: // compilation_unit = package_declaration.p type_declarations.t
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final IdUse p = (IdUse) _symbol_p.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final List t = (List) _symbol_t.value;
					 return new CompilationUnit(p.getID(), new List(), t);
			}
			case 35: // compilation_unit = package_declaration.p import_declarations.i type_declarations.t
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final IdUse p = (IdUse) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final List t = (List) _symbol_t.value;
					 return new CompilationUnit(p.getID(), i, t);
			}
			case 36: // compilation_unit = 
			{
					 return new CompilationUnit("", new List(), new List());
			}
			case 37: // compilation_unit = import_declarations.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final List i = (List) _symbol_i.value;
					 return new CompilationUnit("", i, new List());
			}
			case 38: // compilation_unit = type_declarations.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final List t = (List) _symbol_t.value;
					 return new CompilationUnit("", new List(), t);
			}
			case 39: // compilation_unit = import_declarations.i type_declarations.t
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final List t = (List) _symbol_t.value;
					 return new CompilationUnit("", i, t);
			}
			case 40: // import_declarations = import_declaration.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final ImportDecl i = (ImportDecl) _symbol_i.value;
					 return new List().add(i);
			}
			case 41: // import_declarations = import_declarations.l import_declaration.i
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final ImportDecl i = (ImportDecl) _symbol_i.value;
					 return l.add(i);
			}
			case 42: // type_declarations = type_declaration.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeDecl t = (TypeDecl) _symbol_t.value;
					 return !(t instanceof EmptyType) ? new List().add(t) : new List() ;
			}
			case 43: // type_declarations = type_declarations.l type_declaration.t
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeDecl t = (TypeDecl) _symbol_t.value;
					 return !(t instanceof EmptyType) ? l.add(t) : l;
			}
			case 44: // package_declaration = PACKAGE.PACKAGE name_decl.n SEMICOLON.SEMICOLON
			{
					final Symbol PACKAGE = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final IdUse n = (IdUse) _symbol_n.value;
					final Symbol SEMICOLON = _symbols[offset + 3];
					 return n;
			}
			case 45: // name_decl = simple_name_decl.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final IdUse s = (IdUse) _symbol_s.value;
					 return s;
			}
			case 46: // name_decl = qualified_name_decl.q
			{
					final Symbol _symbol_q = _symbols[offset + 1];
					final IdUse q = (IdUse) _symbol_q.value;
					 return q;
			}
			case 47: // simple_name_decl = IDENTIFIER.IDENTIFIER
			{
					final Symbol IDENTIFIER = _symbols[offset + 1];
					 return new IdUse(IDENTIFIER);
			}
			case 48: // qualified_name_decl = name_decl.n DOT.DOT IDENTIFIER.i
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final IdUse n = (IdUse) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol i = _symbols[offset + 3];
					 return new IdUse(n.getID() + "." + ((String)i.value));
			}
			case 49: // import_declaration = single_type_import_declaration.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ImportDecl s = (ImportDecl) _symbol_s.value;
					 return s;
			}
			case 50: // import_declaration = type_import_on_demand_declaration.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final ImportDecl t = (ImportDecl) _symbol_t.value;
					 return t;
			}
			case 51: // single_type_import_declaration = IMPORT.IMPORT name.n SEMICOLON.SEMICOLON
			{
					final Symbol IMPORT = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final Access n = (Access) _symbol_n.value;
					final Symbol SEMICOLON = _symbols[offset + 3];
					 return new SingleTypeImportDecl(n);
			}
			case 52: // type_import_on_demand_declaration = IMPORT.IMPORT name.n DOT.DOT MULT.MULT SEMICOLON.SEMICOLON
			{
					final Symbol IMPORT = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 3];
					final Symbol MULT = _symbols[offset + 4];
					final Symbol SEMICOLON = _symbols[offset + 5];
					 return new TypeImportOnDemandDecl(n);
			}
			case 53: // type_declaration = class_declaration.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final ClassDecl c = (ClassDecl) _symbol_c.value;
					 return c;
			}
			case 54: // type_declaration = interface_declaration.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final InterfaceDecl i = (InterfaceDecl) _symbol_i.value;
					 return i;
			}
			case 55: // type_declaration = SEMICOLON.SEMICOLON
			{
					final Symbol SEMICOLON = _symbols[offset + 1];
					 return new EmptyType(new Modifiers(), "EmptyType", new Opt(), new List());
			}
			case 56: // modifiers = modifier.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final Modifier m = (Modifier) _symbol_m.value;
					 return new List().add(m);
			}
			case 57: // modifiers = modifiers.l modifier.m
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 2];
					final Modifier m = (Modifier) _symbol_m.value;
					 return l.add(m);
			}
			case 58: // modifier = PUBLIC.PUBLIC
			{
					final Symbol PUBLIC = _symbols[offset + 1];
					 return new Modifier("public");
			}
			case 59: // modifier = PROTECTED.PROTECTED
			{
					final Symbol PROTECTED = _symbols[offset + 1];
					 return new Modifier("protected");
			}
			case 60: // modifier = PRIVATE.PRIVATE
			{
					final Symbol PRIVATE = _symbols[offset + 1];
					 return new Modifier("private");
			}
			case 61: // modifier = STATIC.STATIC
			{
					final Symbol STATIC = _symbols[offset + 1];
					 return new Modifier("static");
			}
			case 62: // modifier = ABSTRACT.ABSTRACT
			{
					final Symbol ABSTRACT = _symbols[offset + 1];
					 return new Modifier("abstract");
			}
			case 63: // modifier = FINAL.FINAL
			{
					final Symbol FINAL = _symbols[offset + 1];
					 return new Modifier("final");
			}
			case 64: // modifier = NATIVE.NATIVE
			{
					final Symbol NATIVE = _symbols[offset + 1];
					 return new Modifier("native");
			}
			case 65: // modifier = SYNCHRONIZED.SYNCHRONIZED
			{
					final Symbol SYNCHRONIZED = _symbols[offset + 1];
					 return new Modifier("synchronized");
			}
			case 66: // modifier = TRANSIENT.TRANSIENT
			{
					final Symbol TRANSIENT = _symbols[offset + 1];
					 return new Modifier("transient");
			}
			case 67: // modifier = VOLATILE.VOLATILE
			{
					final Symbol VOLATILE = _symbols[offset + 1];
					 return new Modifier("volatile");
			}
			case 68: // modifier = STRICTFP.STRICTFP
			{
					final Symbol STRICTFP = _symbols[offset + 1];
					 return new Modifier("strictfp");
			}
			case 69: // class_declaration = CLASS.CLASS IDENTIFIER.IDENTIFIER class_body.b
			{
					final Symbol CLASS = _symbols[offset + 1];
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol _symbol_b = _symbols[offset + 3];
					final List b = (List) _symbol_b.value;
					 return new ClassDecl(new Modifiers(new List()), IDENTIFIER, new Opt(), new List(), b);
			}
			case 70: // class_declaration = modifiers.m CLASS.CLASS IDENTIFIER.IDENTIFIER class_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol CLASS = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_b = _symbols[offset + 4];
					final List b = (List) _symbol_b.value;
					 return new ClassDecl(new Modifiers(m), IDENTIFIER, new Opt(), new List(), b);
			}
			case 71: // class_declaration = CLASS.CLASS IDENTIFIER.IDENTIFIER super.s class_body.b
			{
					final Symbol CLASS = _symbols[offset + 1];
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final Opt s = (Opt) _symbol_s.value;
					final Symbol _symbol_b = _symbols[offset + 4];
					final List b = (List) _symbol_b.value;
					 return new ClassDecl(new Modifiers(new List()), IDENTIFIER, s, new List(), b);
			}
			case 72: // class_declaration = modifiers.m CLASS.CLASS IDENTIFIER.IDENTIFIER super.s class_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol CLASS = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_s = _symbols[offset + 4];
					final Opt s = (Opt) _symbol_s.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final List b = (List) _symbol_b.value;
					 return new ClassDecl(new Modifiers(m), IDENTIFIER, s, new List(), b);
			}
			case 73: // class_declaration = CLASS.CLASS IDENTIFIER.IDENTIFIER interfaces.i class_body.b
			{
					final Symbol CLASS = _symbols[offset + 1];
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 4];
					final List b = (List) _symbol_b.value;
					 return new ClassDecl(new Modifiers(new List()), IDENTIFIER, new Opt(), i, b);
			}
			case 74: // class_declaration = modifiers.m CLASS.CLASS IDENTIFIER.IDENTIFIER interfaces.i class_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol CLASS = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final List b = (List) _symbol_b.value;
					 return new ClassDecl(new Modifiers(m), IDENTIFIER, new Opt(), i, b);
			}
			case 75: // class_declaration = CLASS.CLASS IDENTIFIER.IDENTIFIER super.s interfaces.i class_body.b
			{
					final Symbol CLASS = _symbols[offset + 1];
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final Opt s = (Opt) _symbol_s.value;
					final Symbol _symbol_i = _symbols[offset + 4];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final List b = (List) _symbol_b.value;
					 return new ClassDecl(new Modifiers(new List()), IDENTIFIER, s, i, b);
			}
			case 76: // class_declaration = modifiers.m CLASS.CLASS IDENTIFIER.IDENTIFIER super.s interfaces.i class_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol CLASS = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_s = _symbols[offset + 4];
					final Opt s = (Opt) _symbol_s.value;
					final Symbol _symbol_i = _symbols[offset + 5];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final List b = (List) _symbol_b.value;
					 return new ClassDecl(new Modifiers(m), IDENTIFIER, s, i, b);
			}
			case 77: // super = EXTENDS.EXTENDS class_type.c
			{
					final Symbol EXTENDS = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 2];
					final Access c = (Access) _symbol_c.value;
					 return new Opt(c);
			}
			case 78: // interfaces = IMPLEMENTS.IMPLEMENTS interface_type_list.i
			{
					final Symbol IMPLEMENTS = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final List i = (List) _symbol_i.value;
					 return i;
			}
			case 79: // interface_type_list = interface_type.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final Access i = (Access) _symbol_i.value;
					 return new List().add(i);
			}
			case 80: // interface_type_list = interface_type_list.l COMMA.COMMA interface_type.i
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final Access i = (Access) _symbol_i.value;
					 return l.add(i);
			}
			case 81: // class_body = LBRACE.LBRACE class_body_declarations_opt.c RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 2];
					final List c = (List) _symbol_c.value;
					final Symbol RBRACE = _symbols[offset + 3];
					 return c;
			}
			case 82: // class_body_declarations = class_body_declaration.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final BodyDecl c = (BodyDecl) _symbol_c.value;
					 return new List().add(c);
			}
			case 83: // class_body_declarations = class_body_declarations.l class_body_declaration.c
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_c = _symbols[offset + 2];
					final BodyDecl c = (BodyDecl) _symbol_c.value;
					 return l.add(c);
			}
			case 84: // class_body_declaration = class_member_declaration.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final BodyDecl c = (BodyDecl) _symbol_c.value;
					 return c;
			}
			case 85: // class_body_declaration = instance_initializer.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final InstanceInitializer i = (InstanceInitializer) _symbol_i.value;
					 return i;
			}
			case 86: // class_body_declaration = static_initializer.si
			{
					final Symbol _symbol_si = _symbols[offset + 1];
					final StaticInitializer si = (StaticInitializer) _symbol_si.value;
					 return si;
			}
			case 87: // class_body_declaration = constructor_declaration.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final ConstructorDecl c = (ConstructorDecl) _symbol_c.value;
					 return c;
			}
			case 88: // class_member_declaration = field_declaration.f
			{
					final Symbol _symbol_f = _symbols[offset + 1];
					final BodyDecl f = (BodyDecl) _symbol_f.value;
					 return f;
			}
			case 89: // class_member_declaration = method_declaration.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final MethodDecl m = (MethodDecl) _symbol_m.value;
					 return m;
			}
			case 90: // class_member_declaration = class_declaration.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final ClassDecl c = (ClassDecl) _symbol_c.value;
					 return new MemberClassDecl(c);
			}
			case 91: // class_member_declaration = interface_declaration.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final InterfaceDecl i = (InterfaceDecl) _symbol_i.value;
					 return new MemberInterfaceDecl(i);
			}
			case 92: // class_member_declaration = SEMICOLON.SEMICOLON
			{
					final Symbol SEMICOLON = _symbols[offset + 1];
					 return new InstanceInitializer(new Block());
			}
			case 93: // field_declaration = type.t variable_declarators.v SEMICOLON.SEMICOLON
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_v = _symbols[offset + 2];
					final List v = (List) _symbol_v.value;
					final Symbol SEMICOLON = _symbols[offset + 3];
					 return new FieldDecl(new Modifiers(new List()), t, v);
			}
			case 94: // field_declaration = modifiers.m type.t variable_declarators.v SEMICOLON.SEMICOLON
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_v = _symbols[offset + 3];
					final List v = (List) _symbol_v.value;
					final Symbol SEMICOLON = _symbols[offset + 4];
					 return new FieldDecl(new Modifiers(m), t, v);
			}
			case 95: // variable_declarators = variable_declarator.v
			{
					final Symbol _symbol_v = _symbols[offset + 1];
					final VariableDecl v = (VariableDecl) _symbol_v.value;
					 return new List().add(v);
			}
			case 96: // variable_declarators = variable_declarators.l COMMA.COMMA variable_declarator.v
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_v = _symbols[offset + 3];
					final VariableDecl v = (VariableDecl) _symbol_v.value;
					 return l.add(v);
			}
			case 97: // variable_declarator = variable_declarator_id.v
			{
					final Symbol _symbol_v = _symbols[offset + 1];
					final VariableDecl v = (VariableDecl) _symbol_v.value;
					 return v;
			}
			case 98: // variable_declarator = variable_declarator_id.v EQ.EQ variable_initializer.i
			{
					final Symbol _symbol_v = _symbols[offset + 1];
					final VariableDecl v = (VariableDecl) _symbol_v.value;
					final Symbol EQ = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final Expr i = (Expr) _symbol_i.value;
					 v.setInit(i); return v;
			}
			case 99: // variable_declarator_id = IDENTIFIER.IDENTIFIER dims_opt.d
			{
					final Symbol IDENTIFIER = _symbols[offset + 1];
					final Symbol _symbol_d = _symbols[offset + 2];
					final List d = (List) _symbol_d.value;
					 return new VariableDecl(IDENTIFIER, d, new Opt());
			}
			case 100: // variable_initializer = expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 101: // variable_initializer = array_initializer.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final ArrayInit a = (ArrayInit) _symbol_a.value;
					 return a;
			}
			case 102: // method_declaration = method_header.m method_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final MethodDecl m = (MethodDecl) _symbol_m.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Opt b = (Opt) _symbol_b.value;
					 m.setBlockOpt(b); return m;
			}
			case 103: // method_header = type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.l RPAREN.RPAREN
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol LPAREN = _symbols[offset + 3];
					final Symbol _symbol_l = _symbols[offset + 4];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 5];
					 return new MethodDecl(new Modifiers(new List()), t.addArrayDims(new List()), IDENTIFIER, l, new List(), new Opt());
			}
			case 104: // method_header = modifiers.m type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.l RPAREN.RPAREN
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol _symbol_l = _symbols[offset + 5];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 6];
					 return new MethodDecl(new Modifiers(m), t.addArrayDims(new List()), IDENTIFIER, l, new List(), new Opt());
			}
			case 105: // method_header = type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.l RPAREN.RPAREN dims.d
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol LPAREN = _symbols[offset + 3];
					final Symbol _symbol_l = _symbols[offset + 4];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 5];
					final Symbol _symbol_d = _symbols[offset + 6];
					final List d = (List) _symbol_d.value;
					 return new MethodDecl(new Modifiers(new List()), t.addArrayDims(d), IDENTIFIER, l, new List(), new Opt());
			}
			case 106: // method_header = modifiers.m type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.l RPAREN.RPAREN dims.d
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol _symbol_l = _symbols[offset + 5];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 6];
					final Symbol _symbol_d = _symbols[offset + 7];
					final List d = (List) _symbol_d.value;
					 return new MethodDecl(new Modifiers(m), t.addArrayDims(d), IDENTIFIER, l, new List(), new Opt());
			}
			case 107: // method_header = type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.l RPAREN.RPAREN throws.tl
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol LPAREN = _symbols[offset + 3];
					final Symbol _symbol_l = _symbols[offset + 4];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 5];
					final Symbol _symbol_tl = _symbols[offset + 6];
					final List tl = (List) _symbol_tl.value;
					 return new MethodDecl(new Modifiers(new List()), t.addArrayDims(new List()), IDENTIFIER, l, tl, new Opt());
			}
			case 108: // method_header = modifiers.m type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.l RPAREN.RPAREN throws.tl
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol _symbol_l = _symbols[offset + 5];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 6];
					final Symbol _symbol_tl = _symbols[offset + 7];
					final List tl = (List) _symbol_tl.value;
					 return new MethodDecl(new Modifiers(m), t.addArrayDims(new List()), IDENTIFIER, l, tl, new Opt());
			}
			case 109: // method_header = type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.l RPAREN.RPAREN dims.d throws.tl
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol LPAREN = _symbols[offset + 3];
					final Symbol _symbol_l = _symbols[offset + 4];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 5];
					final Symbol _symbol_d = _symbols[offset + 6];
					final List d = (List) _symbol_d.value;
					final Symbol _symbol_tl = _symbols[offset + 7];
					final List tl = (List) _symbol_tl.value;
					 return new MethodDecl(new Modifiers(new List()), t.addArrayDims(d), IDENTIFIER, l, tl, new Opt());
			}
			case 110: // method_header = modifiers.m type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.l RPAREN.RPAREN dims.d throws.tl
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol _symbol_l = _symbols[offset + 5];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 6];
					final Symbol _symbol_d = _symbols[offset + 7];
					final List d = (List) _symbol_d.value;
					final Symbol _symbol_tl = _symbols[offset + 8];
					final List tl = (List) _symbol_tl.value;
					 return new MethodDecl(new Modifiers(m), t.addArrayDims(d), IDENTIFIER, l, tl, new Opt());
			}
			case 111: // method_header = VOID.VOID IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.l RPAREN.RPAREN throws_opt.tl
			{
					final Symbol VOID = _symbols[offset + 1];
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol LPAREN = _symbols[offset + 3];
					final Symbol _symbol_l = _symbols[offset + 4];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 5];
					final Symbol _symbol_tl = _symbols[offset + 6];
					final List tl = (List) _symbol_tl.value;
					 return new MethodDecl(new Modifiers(new List()), new PrimitiveTypeAccess("void"), IDENTIFIER, l, tl, new Opt());
			}
			case 112: // method_header = modifiers.m VOID.VOID IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.l RPAREN.RPAREN throws_opt.tl
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol VOID = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol _symbol_l = _symbols[offset + 5];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 6];
					final Symbol _symbol_tl = _symbols[offset + 7];
					final List tl = (List) _symbol_tl.value;
					 return new MethodDecl(new Modifiers(m), new PrimitiveTypeAccess("void"), IDENTIFIER, l, tl, new Opt());
			}
			case 113: // formal_parameter_list = formal_parameter.f
			{
					final Symbol _symbol_f = _symbols[offset + 1];
					final ParameterDeclaration f = (ParameterDeclaration) _symbol_f.value;
					 return new List().add(f);
			}
			case 114: // formal_parameter_list = formal_parameter_list.l COMMA.COMMA formal_parameter.f
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_f = _symbols[offset + 3];
					final ParameterDeclaration f = (ParameterDeclaration) _symbol_f.value;
					 return l.add(f);
			}
			case 115: // formal_parameter = type.t IDENTIFIER.IDENTIFIER dims_opt.d
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol _symbol_d = _symbols[offset + 3];
					final List d = (List) _symbol_d.value;
					 return new ParameterDeclaration(new Modifiers(new List()), t.addArrayDims(d), IDENTIFIER);
			}
			case 116: // formal_parameter = modifiers.m type.t IDENTIFIER.IDENTIFIER dims_opt.d
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_d = _symbols[offset + 4];
					final List d = (List) _symbol_d.value;
					 return new ParameterDeclaration(new Modifiers(m), t.addArrayDims(d), IDENTIFIER);
			}
			case 117: // throws = THROWS.THROWS class_type_list.l
			{
					final Symbol THROWS = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					 return l;
			}
			case 118: // class_type_list = class_type.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final Access c = (Access) _symbol_c.value;
					 return new List().add(c);
			}
			case 119: // class_type_list = class_type_list.l COMMA.COMMA class_type.c
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final Access c = (Access) _symbol_c.value;
					 return l.add(c);
			}
			case 120: // method_body = block.b
			{
					final Symbol _symbol_b = _symbols[offset + 1];
					final Block b = (Block) _symbol_b.value;
					 return new Opt(b);
			}
			case 121: // method_body = SEMICOLON.SEMICOLON
			{
					final Symbol SEMICOLON = _symbols[offset + 1];
					 return new Opt();
			}
			case 122: // static_initializer = STATIC.STATIC block.b
			{
					final Symbol STATIC = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final Block b = (Block) _symbol_b.value;
					 return new StaticInitializer(b);
			}
			case 123: // instance_initializer = block.b
			{
					final Symbol _symbol_b = _symbols[offset + 1];
					final Block b = (Block) _symbol_b.value;
					 return new InstanceInitializer(b);
			}
			case 124: // constructor_declaration = IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE RBRACE.RBRACE
			{
					final Symbol IDENTIFIER = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_pl = _symbols[offset + 3];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol _symbol_tl = _symbols[offset + 5];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 6];
					final Symbol RBRACE = _symbols[offset + 7];
					 Block b = new Block(new List()); new List().setStart(LBRACE.getStart() + 1); b.setStart(LBRACE.getStart()); b.setEnd(RBRACE.getEnd());
       return new ConstructorDecl(new Modifiers(new List()), IDENTIFIER, pl, tl, new Opt(), b);
			}
			case 125: // constructor_declaration = modifiers.m IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE RBRACE.RBRACE
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol LPAREN = _symbols[offset + 3];
					final Symbol _symbol_pl = _symbols[offset + 4];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 5];
					final Symbol _symbol_tl = _symbols[offset + 6];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 7];
					final Symbol RBRACE = _symbols[offset + 8];
					 Block b = new Block(new List()); new List().setStart(LBRACE.getStart() + 1); b.setStart(LBRACE.getStart()); b.setEnd(RBRACE.getEnd());
       return new ConstructorDecl(new Modifiers(m), IDENTIFIER, pl, tl, new Opt(), b);
			}
			case 126: // constructor_declaration = IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE explicit_constructor_invocation.c RBRACE.RBRACE
			{
					final Symbol IDENTIFIER = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_pl = _symbols[offset + 3];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol _symbol_tl = _symbols[offset + 5];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 6];
					final Symbol _symbol_c = _symbols[offset + 7];
					final ExprStmt c = (ExprStmt) _symbol_c.value;
					final Symbol RBRACE = _symbols[offset + 8];
					 Block b = new Block(new List()); new List().setStart(LBRACE.getStart() + 1); b.setStart(LBRACE.getStart()); b.setEnd(RBRACE.getEnd());
       return new ConstructorDecl(new Modifiers(new List()), IDENTIFIER, pl, tl, new Opt(c), b);
			}
			case 127: // constructor_declaration = modifiers.m IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE explicit_constructor_invocation.c RBRACE.RBRACE
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol LPAREN = _symbols[offset + 3];
					final Symbol _symbol_pl = _symbols[offset + 4];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 5];
					final Symbol _symbol_tl = _symbols[offset + 6];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 7];
					final Symbol _symbol_c = _symbols[offset + 8];
					final ExprStmt c = (ExprStmt) _symbol_c.value;
					final Symbol RBRACE = _symbols[offset + 9];
					 Block b = new Block(new List()); new List().setStart(LBRACE.getStart() + 1); b.setStart(LBRACE.getStart()); b.setEnd(RBRACE.getEnd());
       return new ConstructorDecl(new Modifiers(m), IDENTIFIER, pl, tl, new Opt(c), b);
			}
			case 128: // constructor_declaration = IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE block_statements.l RBRACE.RBRACE
			{
					final Symbol IDENTIFIER = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_pl = _symbols[offset + 3];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol _symbol_tl = _symbols[offset + 5];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 6];
					final Symbol _symbol_l = _symbols[offset + 7];
					final List l = (List) _symbol_l.value;
					final Symbol RBRACE = _symbols[offset + 8];
					 Block b = new Block(l); l.setStart(LBRACE.getStart() + 1); b.setStart(LBRACE.getStart()); b.setEnd(RBRACE.getEnd());
       return new ConstructorDecl(new Modifiers(new List()), IDENTIFIER, pl, tl, new Opt(), b);
			}
			case 129: // constructor_declaration = modifiers.m IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE block_statements.l RBRACE.RBRACE
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol LPAREN = _symbols[offset + 3];
					final Symbol _symbol_pl = _symbols[offset + 4];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 5];
					final Symbol _symbol_tl = _symbols[offset + 6];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 7];
					final Symbol _symbol_l = _symbols[offset + 8];
					final List l = (List) _symbol_l.value;
					final Symbol RBRACE = _symbols[offset + 9];
					 Block b = new Block(l); l.setStart(LBRACE.getStart() + 1); b.setStart(LBRACE.getStart()); b.setEnd(RBRACE.getEnd());
       return new ConstructorDecl(new Modifiers(m), IDENTIFIER, pl, tl, new Opt(), b);
			}
			case 130: // constructor_declaration = IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE explicit_constructor_invocation.c block_statements.l RBRACE.RBRACE
			{
					final Symbol IDENTIFIER = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_pl = _symbols[offset + 3];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol _symbol_tl = _symbols[offset + 5];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 6];
					final Symbol _symbol_c = _symbols[offset + 7];
					final ExprStmt c = (ExprStmt) _symbol_c.value;
					final Symbol _symbol_l = _symbols[offset + 8];
					final List l = (List) _symbol_l.value;
					final Symbol RBRACE = _symbols[offset + 9];
					 Block b = new Block(l); l.setStart(LBRACE.getStart() + 1); b.setStart(LBRACE.getStart()); b.setEnd(RBRACE.getEnd());
       return new ConstructorDecl(new Modifiers(new List()), IDENTIFIER, pl, tl, new Opt(c), b);
			}
			case 131: // constructor_declaration = modifiers.m IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE explicit_constructor_invocation.c block_statements.l RBRACE.RBRACE
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol LPAREN = _symbols[offset + 3];
					final Symbol _symbol_pl = _symbols[offset + 4];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 5];
					final Symbol _symbol_tl = _symbols[offset + 6];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 7];
					final Symbol _symbol_c = _symbols[offset + 8];
					final ExprStmt c = (ExprStmt) _symbol_c.value;
					final Symbol _symbol_l = _symbols[offset + 9];
					final List l = (List) _symbol_l.value;
					final Symbol RBRACE = _symbols[offset + 10];
					 Block b = new Block(l); l.setStart(LBRACE.getStart() + 1); b.setStart(LBRACE.getStart()); b.setEnd(RBRACE.getEnd());
       return new ConstructorDecl(new Modifiers(m), IDENTIFIER, pl, tl, new Opt(c), b);
			}
			case 132: // explicit_constructor_invocation = THIS.THIS LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON
			{
					final Symbol THIS = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol SEMICOLON = _symbols[offset + 5];
					 ConstructorAccess c = new ConstructorAccess("this", l);
       c.setStart(THIS.getStart());
       c.setEnd(RPAREN.getEnd());
       return new ExprStmt(c);
			}
			case 133: // explicit_constructor_invocation = SUPER.SUPER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON
			{
					final Symbol SUPER = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol SEMICOLON = _symbols[offset + 5];
					 SuperConstructorAccess c = new SuperConstructorAccess("super", l);
       c.setStart(SUPER.getStart());
       c.setEnd(RPAREN.getEnd());
       return new ExprStmt(c);
			}
			case 134: // explicit_constructor_invocation = primary.p DOT.DOT SUPER.SUPER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expr p = (Expr) _symbol_p.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol SUPER = _symbols[offset + 3];
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol _symbol_l = _symbols[offset + 5];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 6];
					final Symbol SEMICOLON = _symbols[offset + 7];
					 SuperConstructorAccess c = new SuperConstructorAccess("super", l);
       c.setStart(SUPER.getStart());
       c.setEnd(RPAREN.getEnd());
       return new ExprStmt(p.qualifiesAccess(c));
			}
			case 135: // explicit_constructor_invocation = name.n DOT.DOT SUPER.SUPER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol SUPER = _symbols[offset + 3];
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol _symbol_l = _symbols[offset + 5];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 6];
					final Symbol SEMICOLON = _symbols[offset + 7];
					 SuperConstructorAccess c = new SuperConstructorAccess("super", l);
       c.setStart(SUPER.getStart());
       c.setEnd(RPAREN.getEnd());
       return new ExprStmt(n.qualifiesAccess(c));
			}
			case 136: // interface_declaration = INTERFACE.INTERFACE IDENTIFIER.IDENTIFIER interface_body.b
			{
					final Symbol INTERFACE = _symbols[offset + 1];
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol _symbol_b = _symbols[offset + 3];
					final List b = (List) _symbol_b.value;
					 return new InterfaceDecl(new Modifiers(new List()), IDENTIFIER, new List(), b);
			}
			case 137: // interface_declaration = modifiers.m INTERFACE.INTERFACE IDENTIFIER.IDENTIFIER interface_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol INTERFACE = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_b = _symbols[offset + 4];
					final List b = (List) _symbol_b.value;
					 return new InterfaceDecl(new Modifiers(m), IDENTIFIER, new List(), b);
			}
			case 138: // interface_declaration = INTERFACE.INTERFACE IDENTIFIER.IDENTIFIER extends_interfaces.i interface_body.b
			{
					final Symbol INTERFACE = _symbols[offset + 1];
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 4];
					final List b = (List) _symbol_b.value;
					 return new InterfaceDecl(new Modifiers(new List()), IDENTIFIER, i, b);
			}
			case 139: // interface_declaration = modifiers.m INTERFACE.INTERFACE IDENTIFIER.IDENTIFIER extends_interfaces.i interface_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol INTERFACE = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final List b = (List) _symbol_b.value;
					 return new InterfaceDecl(new Modifiers(m), IDENTIFIER, i, b);
			}
			case 140: // extends_interfaces = EXTENDS.EXTENDS interface_type.i
			{
					final Symbol EXTENDS = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final Access i = (Access) _symbol_i.value;
					 return new List().add(i);
			}
			case 141: // extends_interfaces = extends_interfaces.l COMMA.COMMA interface_type.i
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final Access i = (Access) _symbol_i.value;
					 return l.add(i);
			}
			case 142: // interface_body = LBRACE.LBRACE interface_member_declarations_opt.i RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final List i = (List) _symbol_i.value;
					final Symbol RBRACE = _symbols[offset + 3];
					 return i;
			}
			case 143: // interface_member_declarations = interface_member_declaration.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final BodyDecl i = (BodyDecl) _symbol_i.value;
					 return new List().add(i);
			}
			case 144: // interface_member_declarations = interface_member_declarations.l interface_member_declaration.i
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final BodyDecl i = (BodyDecl) _symbol_i.value;
					 return l.add(i);
			}
			case 145: // interface_member_declaration = constant_declaration.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final BodyDecl c = (BodyDecl) _symbol_c.value;
					 return c;
			}
			case 146: // interface_member_declaration = abstract_method_declaration.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final BodyDecl a = (BodyDecl) _symbol_a.value;
					 return a;
			}
			case 147: // interface_member_declaration = class_declaration.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final ClassDecl c = (ClassDecl) _symbol_c.value;
					 return new MemberClassDecl(c);
			}
			case 148: // interface_member_declaration = interface_declaration.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final InterfaceDecl i = (InterfaceDecl) _symbol_i.value;
					 return new MemberInterfaceDecl(i);
			}
			case 149: // interface_member_declaration = SEMICOLON.SEMICOLON
			{
					final Symbol SEMICOLON = _symbols[offset + 1];
					 return new StaticInitializer(new Block());
			}
			case 150: // constant_declaration = field_declaration.f
			{
					final Symbol _symbol_f = _symbols[offset + 1];
					final BodyDecl f = (BodyDecl) _symbol_f.value;
					 return f;
			}
			case 151: // abstract_method_declaration = method_header.m SEMICOLON.SEMICOLON
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final MethodDecl m = (MethodDecl) _symbol_m.value;
					final Symbol SEMICOLON = _symbols[offset + 2];
					 return m;
			}
			case 152: // array_initializer = LBRACE.LBRACE RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol RBRACE = _symbols[offset + 2];
					 return new ArrayInit(new List());
			}
			case 153: // array_initializer = LBRACE.LBRACE variable_initializers.v RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_v = _symbols[offset + 2];
					final List v = (List) _symbol_v.value;
					final Symbol RBRACE = _symbols[offset + 3];
					 return new ArrayInit(v);
			}
			case 154: // array_initializer = LBRACE.LBRACE COMMA.COMMA RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol RBRACE = _symbols[offset + 3];
					 return new ArrayInit(new List());
			}
			case 155: // array_initializer = LBRACE.LBRACE variable_initializers.v COMMA.COMMA RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_v = _symbols[offset + 2];
					final List v = (List) _symbol_v.value;
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol RBRACE = _symbols[offset + 4];
					 return new ArrayInit(v);
			}
			case 156: // variable_initializers = variable_initializer.v
			{
					final Symbol _symbol_v = _symbols[offset + 1];
					final Expr v = (Expr) _symbol_v.value;
					 return new List().add(v);
			}
			case 157: // variable_initializers = variable_initializers.l COMMA.COMMA variable_initializer.v
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_v = _symbols[offset + 3];
					final Expr v = (Expr) _symbol_v.value;
					 return l.add(v);
			}
			case 158: // block = LBRACE.LBRACE block_statements_opt.l RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					final Symbol RBRACE = _symbols[offset + 3];
					 return new Block(l);
			}
			case 159: // block_statements = block_statement.b
			{
					final Symbol _symbol_b = _symbols[offset + 1];
					final Stmt b = (Stmt) _symbol_b.value;
					 return new List().add(b);
			}
			case 160: // block_statements = block_statements.l block_statement.b
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Stmt b = (Stmt) _symbol_b.value;
					 return l.add(b);
			}
			case 161: // block_statement = local_variable_declaration_statement.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final VarDeclStmt l = (VarDeclStmt) _symbol_l.value;
					 return l;
			}
			case 162: // block_statement = class_declaration.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final ClassDecl c = (ClassDecl) _symbol_c.value;
					 return new LocalClassDeclStmt(c);
			}
			case 163: // block_statement = statement.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final Stmt s = (Stmt) _symbol_s.value;
					 return s;
			}
			case 164: // local_variable_declaration_statement = local_variable_declaration.l SEMICOLON.SEMICOLON
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final VarDeclStmt l = (VarDeclStmt) _symbol_l.value;
					final Symbol SEMICOLON = _symbols[offset + 2];
					 return l;
			}
			case 165: // local_variable_declaration = type.t variable_declarators.l
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					 return new VarDeclStmt(new Modifiers(new List()), t, l);
			}
			case 166: // local_variable_declaration = modifiers.m type.t variable_declarators.l
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					 return new VarDeclStmt(new Modifiers(m), t, l);
			}
			case 167: // statement = statement_without_trailing_substatement.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final Stmt s = (Stmt) _symbol_s.value;
					 return s;
			}
			case 168: // statement = labeled_statement.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final LabeledStmt l = (LabeledStmt) _symbol_l.value;
					 return l;
			}
			case 169: // statement = if_then_statement.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final IfStmt i = (IfStmt) _symbol_i.value;
					 return i;
			}
			case 170: // statement = if_then_else_statement.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final IfStmt i = (IfStmt) _symbol_i.value;
					 return i;
			}
			case 171: // statement = while_statement.w
			{
					final Symbol _symbol_w = _symbols[offset + 1];
					final WhileStmt w = (WhileStmt) _symbol_w.value;
					 return w;
			}
			case 172: // statement = for_statement.f
			{
					final Symbol _symbol_f = _symbols[offset + 1];
					final ForStmt f = (ForStmt) _symbol_f.value;
					 return f;
			}
			case 173: // statement_without_trailing_substatement = block.b
			{
					final Symbol _symbol_b = _symbols[offset + 1];
					final Block b = (Block) _symbol_b.value;
					 return b;
			}
			case 174: // statement_without_trailing_substatement = empty_statement.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final EmptyStmt e = (EmptyStmt) _symbol_e.value;
					 return e;
			}
			case 175: // statement_without_trailing_substatement = expression_statement.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final ExprStmt e = (ExprStmt) _symbol_e.value;
					 return e;
			}
			case 176: // statement_without_trailing_substatement = switch_statement.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final SwitchStmt s = (SwitchStmt) _symbol_s.value;
					 return s;
			}
			case 177: // statement_without_trailing_substatement = do_statement.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DoStmt d = (DoStmt) _symbol_d.value;
					 return d;
			}
			case 178: // statement_without_trailing_substatement = break_statement.b
			{
					final Symbol _symbol_b = _symbols[offset + 1];
					final BreakStmt b = (BreakStmt) _symbol_b.value;
					 return b;
			}
			case 179: // statement_without_trailing_substatement = continue_statement.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final ContinueStmt c = (ContinueStmt) _symbol_c.value;
					 return c;
			}
			case 180: // statement_without_trailing_substatement = return_statement.r
			{
					final Symbol _symbol_r = _symbols[offset + 1];
					final ReturnStmt r = (ReturnStmt) _symbol_r.value;
					 return r;
			}
			case 181: // statement_without_trailing_substatement = synchronized_statement.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final SynchronizedStmt s = (SynchronizedStmt) _symbol_s.value;
					 return s;
			}
			case 182: // statement_without_trailing_substatement = throw_statement.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final ThrowStmt t = (ThrowStmt) _symbol_t.value;
					 return t;
			}
			case 183: // statement_without_trailing_substatement = try_statement.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final TryStmt t = (TryStmt) _symbol_t.value;
					 return t;
			}
			case 184: // statement_without_trailing_substatement = assert_statement.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final AssertStmt a = (AssertStmt) _symbol_a.value;
					 return a;
			}
			case 185: // statement_no_short_if = statement_without_trailing_substatement.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final Stmt s = (Stmt) _symbol_s.value;
					 return s;
			}
			case 186: // statement_no_short_if = labeled_statement_no_short_if.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final LabeledStmt l = (LabeledStmt) _symbol_l.value;
					 return l;
			}
			case 187: // statement_no_short_if = if_then_else_statement_no_short_if.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final IfStmt i = (IfStmt) _symbol_i.value;
					 return i;
			}
			case 188: // statement_no_short_if = while_statement_no_short_if.w
			{
					final Symbol _symbol_w = _symbols[offset + 1];
					final WhileStmt w = (WhileStmt) _symbol_w.value;
					 return w;
			}
			case 189: // statement_no_short_if = for_statement_no_short_if.f
			{
					final Symbol _symbol_f = _symbols[offset + 1];
					final ForStmt f = (ForStmt) _symbol_f.value;
					 return f;
			}
			case 190: // if_then_statement = IF.IF LPAREN.LPAREN expression.e RPAREN.RPAREN statement.s
			{
					final Symbol IF = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final Stmt s = (Stmt) _symbol_s.value;
					 return new IfStmt(e, s, new Opt());
			}
			case 191: // if_then_else_statement = IF.IF LPAREN.LPAREN expression.e RPAREN.RPAREN statement_no_short_if.t ELSE.ELSE statement.els
			{
					final Symbol IF = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol _symbol_t = _symbols[offset + 5];
					final Stmt t = (Stmt) _symbol_t.value;
					final Symbol ELSE = _symbols[offset + 6];
					final Symbol _symbol_els = _symbols[offset + 7];
					final Stmt els = (Stmt) _symbol_els.value;
					 return new IfStmt(e, t, new Opt(els));
			}
			case 192: // if_then_else_statement_no_short_if = IF.IF LPAREN.LPAREN expression.e RPAREN.RPAREN statement_no_short_if.t ELSE.ELSE statement_no_short_if.els
			{
					final Symbol IF = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol _symbol_t = _symbols[offset + 5];
					final Stmt t = (Stmt) _symbol_t.value;
					final Symbol ELSE = _symbols[offset + 6];
					final Symbol _symbol_els = _symbols[offset + 7];
					final Stmt els = (Stmt) _symbol_els.value;
					 return new IfStmt(e, t, new Opt(els));
			}
			case 193: // empty_statement = SEMICOLON.SEMICOLON
			{
					final Symbol SEMICOLON = _symbols[offset + 1];
					 return new EmptyStmt();
			}
			case 194: // labeled_statement = IDENTIFIER.id COLON.COLON statement.s
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol COLON = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final Stmt s = (Stmt) _symbol_s.value;
					 return new LabeledStmt(((String)id.value), s);
			}
			case 195: // labeled_statement_no_short_if = IDENTIFIER.id COLON.COLON statement_no_short_if.s
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol COLON = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final Stmt s = (Stmt) _symbol_s.value;
					 return new LabeledStmt(((String)id.value), s);
			}
			case 196: // expression_statement = statement_expression.e SEMICOLON.SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final ExprStmt e = (ExprStmt) _symbol_e.value;
					final Symbol SEMICOLON = _symbols[offset + 2];
					 return e;
			}
			case 197: // statement_expression = assignment.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return new ExprStmt(a);
			}
			case 198: // statement_expression = preincrement_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return new ExprStmt(e);
			}
			case 199: // statement_expression = predecrement_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return new ExprStmt(e);
			}
			case 200: // statement_expression = postincrement_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return new ExprStmt(e);
			}
			case 201: // statement_expression = postdecrement_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return new ExprStmt(e);
			}
			case 202: // statement_expression = method_invocation.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final Access i = (Access) _symbol_i.value;
					 return new ExprStmt(i);
			}
			case 203: // statement_expression = class_instance_creation_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return new ExprStmt(e);
			}
			case 204: // switch_statement = SWITCH.SWITCH LPAREN.LPAREN expression.e RPAREN.RPAREN switch_block.l
			{
					final Symbol SWITCH = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol _symbol_l = _symbols[offset + 5];
					final Block l = (Block) _symbol_l.value;
					 return new SwitchStmt(e, l);
			}
			case 205: // switch_block = LBRACE.LBRACE switch_block_statement_groups.l switch_labels.s RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final List s = (List) _symbol_s.value;
					final Symbol RBRACE = _symbols[offset + 4];
					 for(int ii = 0; ii < s.getNumChildNoTransform(); ii++) l.add(s.getChildNoTransform(ii)); return new Block(l);
			}
			case 206: // switch_block = LBRACE.LBRACE switch_block_statement_groups.l RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					final Symbol RBRACE = _symbols[offset + 3];
					 return new Block(l);
			}
			case 207: // switch_block = LBRACE.LBRACE switch_labels.l RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					final Symbol RBRACE = _symbols[offset + 3];
					 return new Block(l);
			}
			case 208: // switch_block = LBRACE.LBRACE RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol RBRACE = _symbols[offset + 2];
					 return new Block(new List());
			}
			case 209: // switch_block_statement_groups = switch_block_statement_group.g
			{
					final Symbol _symbol_g = _symbols[offset + 1];
					final List g = (List) _symbol_g.value;
					 return g;
			}
			case 210: // switch_block_statement_groups = switch_block_statement_groups.l switch_block_statement_group.g
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_g = _symbols[offset + 2];
					final List g = (List) _symbol_g.value;
					 for(int ii = 0; ii < g.getNumChildNoTransform(); ii++)
           l.add(g.getChildNoTransform(ii));
         return l;
			}
			case 211: // switch_block_statement_group = switch_labels.l block_statements.bl
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_bl = _symbols[offset + 2];
					final List bl = (List) _symbol_bl.value;
					 for(int ii = 0; ii < bl.getNumChildNoTransform(); ii++)
          l.add(bl.getChildNoTransform(ii));
          return l;
			}
			case 212: // switch_labels = switch_label.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final Case s = (Case) _symbol_s.value;
					 return new List().add(s);
			}
			case 213: // switch_labels = switch_labels.l switch_label.s
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_s = _symbols[offset + 2];
					final Case s = (Case) _symbol_s.value;
					 return l.add(s);
			}
			case 214: // switch_label = CASE.CASE constant_expression.e COLON.COLON
			{
					final Symbol CASE = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol COLON = _symbols[offset + 3];
					 return new ConstCase(e);
			}
			case 215: // switch_label = DEFAULT.DEFAULT COLON.COLON
			{
					final Symbol DEFAULT = _symbols[offset + 1];
					final Symbol COLON = _symbols[offset + 2];
					 return new DefaultCase();
			}
			case 216: // while_statement = WHILE.WHILE LPAREN.LPAREN expression.e RPAREN.RPAREN statement.s
			{
					final Symbol WHILE = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final Stmt s = (Stmt) _symbol_s.value;
					 return new WhileStmt(e, s);
			}
			case 217: // while_statement_no_short_if = WHILE.WHILE LPAREN.LPAREN expression.e RPAREN.RPAREN statement_no_short_if.s
			{
					final Symbol WHILE = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final Stmt s = (Stmt) _symbol_s.value;
					 return new WhileStmt(e, s);
			}
			case 218: // do_statement = DO.DO statement.s WHILE.WHILE LPAREN.LPAREN expression.e RPAREN.RPAREN SEMICOLON.SEMICOLON
			{
					final Symbol DO = _symbols[offset + 1];
					final Symbol _symbol_s = _symbols[offset + 2];
					final Stmt s = (Stmt) _symbol_s.value;
					final Symbol WHILE = _symbols[offset + 3];
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol RPAREN = _symbols[offset + 6];
					final Symbol SEMICOLON = _symbols[offset + 7];
					 return new DoStmt(s, e);
			}
			case 219: // for_statement = FOR.FOR LPAREN.LPAREN for_init_opt.i SEMICOLON.SEMICOLON expression_opt.e SEMICOLON.SEMICOLON_ for_update_opt.u RPAREN.RPAREN statement.s
			{
					final Symbol FOR = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final List i = (List) _symbol_i.value;
					final Symbol SEMICOLON = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final Opt e = (Opt) _symbol_e.value;
					final Symbol SEMICOLON_ = _symbols[offset + 6];
					final Symbol _symbol_u = _symbols[offset + 7];
					final List u = (List) _symbol_u.value;
					final Symbol RPAREN = _symbols[offset + 8];
					final Symbol _symbol_s = _symbols[offset + 9];
					final Stmt s = (Stmt) _symbol_s.value;
					 return new ForStmt(i, e, u, s);
			}
			case 220: // for_statement_no_short_if = FOR.FOR LPAREN.LPAREN for_init_opt.i SEMICOLON.SEMICOLON expression_opt.e SEMICOLON.SEMICOLON_ for_update_opt.u RPAREN.RPAREN statement_no_short_if.s
			{
					final Symbol FOR = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final List i = (List) _symbol_i.value;
					final Symbol SEMICOLON = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final Opt e = (Opt) _symbol_e.value;
					final Symbol SEMICOLON_ = _symbols[offset + 6];
					final Symbol _symbol_u = _symbols[offset + 7];
					final List u = (List) _symbol_u.value;
					final Symbol RPAREN = _symbols[offset + 8];
					final Symbol _symbol_s = _symbols[offset + 9];
					final Stmt s = (Stmt) _symbol_s.value;
					 return new ForStmt(i, e, u, s);
			}
			case 221: // for_init = statement_expression_list.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					 return l;
			}
			case 222: // for_init = local_variable_declaration.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final VarDeclStmt d = (VarDeclStmt) _symbol_d.value;
					 return new List().add(d);
			}
			case 223: // for_update = statement_expression_list.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					 return l;
			}
			case 224: // statement_expression_list = statement_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final ExprStmt e = (ExprStmt) _symbol_e.value;
					 return new List().add(e);
			}
			case 225: // statement_expression_list = statement_expression_list.l COMMA.COMMA statement_expression.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final ExprStmt e = (ExprStmt) _symbol_e.value;
					 return l.add(e);
			}
			case 226: // break_statement = BREAK.BREAK IDENTIFIER.id SEMICOLON.SEMICOLON
			{
					final Symbol BREAK = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					final Symbol SEMICOLON = _symbols[offset + 3];
					 return new BreakStmt(((String)id.value));
			}
			case 227: // break_statement = BREAK.BREAK SEMICOLON.SEMICOLON
			{
					final Symbol BREAK = _symbols[offset + 1];
					final Symbol SEMICOLON = _symbols[offset + 2];
					 return new BreakStmt("");
			}
			case 228: // continue_statement = CONTINUE.CONTINUE IDENTIFIER.id SEMICOLON.SEMICOLON
			{
					final Symbol CONTINUE = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					final Symbol SEMICOLON = _symbols[offset + 3];
					 return new ContinueStmt(((String)id.value));
			}
			case 229: // continue_statement = CONTINUE.CONTINUE SEMICOLON.SEMICOLON
			{
					final Symbol CONTINUE = _symbols[offset + 1];
					final Symbol SEMICOLON = _symbols[offset + 2];
					 return new ContinueStmt("");
			}
			case 230: // return_statement = RETURN.RETURN expression_opt.e SEMICOLON.SEMICOLON
			{
					final Symbol RETURN = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Opt e = (Opt) _symbol_e.value;
					final Symbol SEMICOLON = _symbols[offset + 3];
					 return new ReturnStmt(e);
			}
			case 231: // throw_statement = THROW.THROW expression.e SEMICOLON.SEMICOLON
			{
					final Symbol THROW = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol SEMICOLON = _symbols[offset + 3];
					 return new ThrowStmt(e);
			}
			case 232: // synchronized_statement = SYNCHRONIZED.SYNCHRONIZED LPAREN.LPAREN expression.e RPAREN.RPAREN block.b
			{
					final Symbol SYNCHRONIZED = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					 return new SynchronizedStmt(e, b);
			}
			case 233: // try_statement = TRY.TRY block.b catches.c
			{
					final Symbol TRY = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final Block b = (Block) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final List c = (List) _symbol_c.value;
					 return new TryStmt(b, c, new Opt());
			}
			case 234: // try_statement = TRY.TRY block.b finally.f
			{
					final Symbol TRY = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final Block b = (Block) _symbol_b.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final Block f = (Block) _symbol_f.value;
					 return new TryStmt(b, new List(), new Opt(f));
			}
			case 235: // try_statement = TRY.TRY block.b catches.c finally.f
			{
					final Symbol TRY = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final Block b = (Block) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final List c = (List) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 4];
					final Block f = (Block) _symbol_f.value;
					 return new TryStmt(b, c, new Opt(f));
			}
			case 236: // catches = catch_clause.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final CatchClause c = (CatchClause) _symbol_c.value;
					 return new List().add(c);
			}
			case 237: // catches = catches.l catch_clause.c
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_c = _symbols[offset + 2];
					final CatchClause c = (CatchClause) _symbol_c.value;
					 return l.add(c);
			}
			case 238: // catch_clause = CATCH.CATCH LPAREN.LPAREN formal_parameter.p RPAREN.RPAREN block.b
			{
					final Symbol CATCH = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_p = _symbols[offset + 3];
					final ParameterDeclaration p = (ParameterDeclaration) _symbol_p.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol _symbol_b = _symbols[offset + 5];
					final Block b = (Block) _symbol_b.value;
					 return new BasicCatch(p, b);
			}
			case 239: // finally = FINALLY.FINALLY block.b
			{
					final Symbol FINALLY = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final Block b = (Block) _symbol_b.value;
					 return b;
			}
			case 240: // assert_statement = ASSERT.ASSERT expression.e SEMICOLON.SEMICOLON
			{
					final Symbol ASSERT = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol SEMICOLON = _symbols[offset + 3];
					 return new AssertStmt(e, new Opt());
			}
			case 241: // assert_statement = ASSERT.ASSERT expression.e COLON.COLON expression.s SEMICOLON.SEMICOLON
			{
					final Symbol ASSERT = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol COLON = _symbols[offset + 3];
					final Symbol _symbol_s = _symbols[offset + 4];
					final Expr s = (Expr) _symbol_s.value;
					final Symbol SEMICOLON = _symbols[offset + 5];
					 return new AssertStmt(e, new Opt(s));
			}
			case 242: // primary = primary_no_new_array.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expr p = (Expr) _symbol_p.value;
					 return p;
			}
			case 243: // primary = array_creation_init.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 244: // primary = array_creation_uninit.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 245: // class_literal = CLASS.CLASS
			{
					final Symbol CLASS = _symbols[offset + 1];
					 return new ClassAccess();
			}
			case 246: // subclass_body = class_body.b
			{
					final Symbol _symbol_b = _symbols[offset + 1];
					final List b = (List) _symbol_b.value;
					 return new Opt(new AnonymousDecl(new Modifiers(), "Anonymous", b));
			}
			case 247: // argument_list = expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return new List().add(e);
			}
			case 248: // argument_list = argument_list.l COMMA.COMMA expression.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					 return l.add(e);
			}
			case 249: // array_creation_uninit = NEW.NEW primitive_type.t dim_exprs.d
			{
					final Symbol NEW = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final List d = (List) _symbol_d.value;
					 return new ArrayCreationExpr(t.addArrayDims(d), new Opt());
			}
			case 250: // array_creation_uninit = NEW.NEW primitive_type.t dim_exprs.d dims.e
			{
					final Symbol NEW = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final List d = (List) _symbol_d.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final List e = (List) _symbol_e.value;
					 return new ArrayCreationExpr(t.addArrayDims(d).addArrayDims(e), new Opt());
			}
			case 251: // array_creation_uninit = NEW.NEW class_or_interface_type.t dim_exprs.d
			{
					final Symbol NEW = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final List d = (List) _symbol_d.value;
					 return new ArrayCreationExpr(t.addArrayDims(d), new Opt());
			}
			case 252: // array_creation_uninit = NEW.NEW class_or_interface_type.t dim_exprs.d dims.e
			{
					final Symbol NEW = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final List d = (List) _symbol_d.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final List e = (List) _symbol_e.value;
					 return new ArrayCreationExpr(t.addArrayDims(d).addArrayDims(e), new Opt());
			}
			case 253: // array_creation_init = NEW.NEW primitive_type.t dims.d array_initializer.i
			{
					final Symbol NEW = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final List d = (List) _symbol_d.value;
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayInit i = (ArrayInit) _symbol_i.value;
					 return new ArrayCreationExpr(t.addArrayDims(d), new Opt(i));
			}
			case 254: // array_creation_init = NEW.NEW class_or_interface_type.t dims.d array_initializer.i
			{
					final Symbol NEW = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final List d = (List) _symbol_d.value;
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayInit i = (ArrayInit) _symbol_i.value;
					 return new ArrayCreationExpr(t.addArrayDims(d), new Opt(i));
			}
			case 255: // dim_exprs = dim_expr.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Dims e = (Dims) _symbol_e.value;
					 return new List().add(e);
			}
			case 256: // dim_exprs = dim_exprs.l dim_expr.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final Dims e = (Dims) _symbol_e.value;
					 return l.add(e);
			}
			case 257: // dim_expr = LBRACK.LBRACK expression.e RBRACK.RBRACK
			{
					final Symbol LBRACK = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol RBRACK = _symbols[offset + 3];
					 return new Dims(new Opt(e));
			}
			case 258: // dims = LBRACK.LBRACK RBRACK.RBRACK
			{
					final Symbol LBRACK = _symbols[offset + 1];
					final Symbol RBRACK = _symbols[offset + 2];
					 Dims d = new Dims(new Opt()); d.setStart(LBRACK.getStart()); d.setEnd(RBRACK.getEnd());
                                                  return new List().add(d);
			}
			case 259: // dims = dims.l LBRACK.LBRACK RBRACK.RBRACK
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol LBRACK = _symbols[offset + 2];
					final Symbol RBRACK = _symbols[offset + 3];
					 Dims d = new Dims(new Opt()); d.setStart(LBRACK.getStart()); d.setEnd(RBRACK.getEnd());
                                                  return l.add(d);
			}
			case 260: // field_access = primary.p DOT.DOT simple_name.id
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expr p = (Expr) _symbol_p.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol _symbol_id = _symbols[offset + 3];
					final Access id = (Access) _symbol_id.value;
					 return p.qualifiesAccess(id);
			}
			case 261: // field_access = SUPER.SUPER DOT.DOT simple_name.id
			{
					final Symbol SUPER = _symbols[offset + 1];
					final Symbol DOT = _symbols[offset + 2];
					final Symbol _symbol_id = _symbols[offset + 3];
					final Access id = (Access) _symbol_id.value;
					 SuperAccess s = new SuperAccess("super");
       s.setStart(SUPER.getStart());
       s.setEnd(SUPER.getEnd());
       return s.qualifiesAccess(id);
			}
			case 262: // field_access = name.n DOT.DOT SUPER.SUPER DOT.DOT_ simple_name.id
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol SUPER = _symbols[offset + 3];
					final Symbol DOT_ = _symbols[offset + 4];
					final Symbol _symbol_id = _symbols[offset + 5];
					final Access id = (Access) _symbol_id.value;
					 SuperAccess s = new SuperAccess("super");
       s.setStart(SUPER.getStart());
       s.setEnd(SUPER.getEnd());
       return n.qualifiesAccess(s).qualifiesAccess(id);
			}
			case 263: // method_invocation = name.n LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 4];
					 if(n instanceof AbstractDot) {    
                                                               AbstractDot d = (AbstractDot)n; 
                                                               ParseName pn = (ParseName)d.extractLast();
                                                               MethodAccess m = new MethodAccess(pn.getID(), l);
                                                               m.setStart(pn.getStart()); // add location information
                                                               m.setEnd(RPAREN.getEnd()); // add location information
                                                               m.IDstart = pn.getStart();
                                                               m.IDend = pn.getStart() + pn.getID().length() - 1;
                                                               d.replaceLast(m);
                                                               return d;
                                                             }
                                                             else {
                                                               ParseName pn = (ParseName)n;
                                                               MethodAccess m = new MethodAccess(pn.getID(), l);
                                                               m.setStart(pn.getStart()); // add location information
                                                               m.setEnd(RPAREN.getEnd()); // add location information
                                                               m.IDstart = pn.getStart();
                                                               m.IDend = pn.getStart() + pn.getID().length() - 1;
                                                               return m;
                                                             }
			}
			case 264: // method_invocation = primary.p DOT.DOT IDENTIFIER.IDENTIFIER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expr p = (Expr) _symbol_p.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol _symbol_l = _symbols[offset + 5];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 6];
					 MethodAccess m = new MethodAccess(IDENTIFIER, l);
        m.setStart(IDENTIFIER.getStart()); // add location information
        m.setEnd(RPAREN.getEnd()); // add location information
        return p.qualifiesAccess(m);
			}
			case 265: // method_invocation = SUPER.SUPER DOT.DOT IDENTIFIER.IDENTIFIER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN
			{
					final Symbol SUPER = _symbols[offset + 1];
					final Symbol DOT = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol _symbol_l = _symbols[offset + 5];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 6];
					 SuperAccess s = new SuperAccess("super");
        s.setStart(SUPER.getStart());
        s.setEnd(SUPER.getEnd());
        MethodAccess m = new MethodAccess(IDENTIFIER, l);
        m.setStart(IDENTIFIER.getStart());
        m.setEnd(RPAREN.getEnd());
        return s.qualifiesAccess(m);
			}
			case 266: // method_invocation = name.n DOT.DOT SUPER.SUPER DOT.DOT_ IDENTIFIER.IDENTIFIER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol SUPER = _symbols[offset + 3];
					final Symbol DOT_ = _symbols[offset + 4];
					final Symbol IDENTIFIER = _symbols[offset + 5];
					final Symbol LPAREN = _symbols[offset + 6];
					final Symbol _symbol_l = _symbols[offset + 7];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 8];
					 SuperAccess s = new SuperAccess("super");
        s.setStart(SUPER.getStart());
        s.setEnd(SUPER.getEnd());
        MethodAccess m = new MethodAccess(IDENTIFIER, l);
        m.setStart(IDENTIFIER.getStart());
        m.setEnd(RPAREN.getEnd());
        return n.qualifiesAccess(s).qualifiesAccess(m);
			}
			case 267: // array_access = name.n LBRACK.LBRACK expression.e RBRACK.RBRACK
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol LBRACK = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol RBRACK = _symbols[offset + 4];
					 ArrayAccess a = new ArrayAccess(e);
                                                         a.setStart(LBRACK.getStart());
                                                         a.setEnd(RBRACK.getEnd());
                                                         return n.qualifiesAccess(a);
			}
			case 268: // array_access = primary_no_new_array.p LBRACK.LBRACK expression.e RBRACK.RBRACK
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expr p = (Expr) _symbol_p.value;
					final Symbol LBRACK = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol RBRACK = _symbols[offset + 4];
					 ArrayAccess a = new ArrayAccess(e);
                                                         a.setStart(LBRACK.getStart());
                                                         a.setEnd(RBRACK.getEnd());
                                                         return p.qualifiesAccess(a);
			}
			case 269: // postfix_expression = primary.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expr p = (Expr) _symbol_p.value;
					 return p;
			}
			case 270: // postfix_expression = name.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					 return n;
			}
			case 271: // postfix_expression = postincrement_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 272: // postfix_expression = postdecrement_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 273: // postincrement_expression = postfix_expression.e PLUSPLUS.PLUSPLUS
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol PLUSPLUS = _symbols[offset + 2];
					 return new PostIncExpr(e);
			}
			case 274: // postdecrement_expression = postfix_expression.e MINUSMINUS.MINUSMINUS
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol MINUSMINUS = _symbols[offset + 2];
					 return new PostDecExpr(e);
			}
			case 275: // unary_expression = preincrement_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 276: // unary_expression = predecrement_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 277: // unary_expression = PLUS.PLUS unary_expression.e
			{
					final Symbol PLUS = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return new PlusExpr(e);
			}
			case 278: // unary_expression = MINUS.MINUS unary_expression.e
			{
					final Symbol MINUS = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return new MinusExpr(e);
			}
			case 279: // unary_expression = unary_expression_not_plus_minus.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 280: // preincrement_expression = PLUSPLUS.PLUSPLUS unary_expression.e
			{
					final Symbol PLUSPLUS = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return new PreIncExpr(e);
			}
			case 281: // predecrement_expression = MINUSMINUS.MINUSMINUS unary_expression.e
			{
					final Symbol MINUSMINUS = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return new PreDecExpr(e);
			}
			case 282: // unary_expression_not_plus_minus = postfix_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 283: // unary_expression_not_plus_minus = COMP.COMP unary_expression.e
			{
					final Symbol COMP = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return new BitNotExpr(e);
			}
			case 284: // unary_expression_not_plus_minus = NOT.NOT unary_expression.e
			{
					final Symbol NOT = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return new LogNotExpr(e);
			}
			case 285: // unary_expression_not_plus_minus = cast_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 286: // cast_expression = LPAREN.LPAREN primitive_type.t RPAREN.RPAREN unary_expression.e
			{
					final Symbol LPAREN = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol RPAREN = _symbols[offset + 3];
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expr e = (Expr) _symbol_e.value;
					 return new CastExpr(t.addArrayDims(new List()), e);
			}
			case 287: // cast_expression = LPAREN.LPAREN primitive_type.t dims.d RPAREN.RPAREN unary_expression.e
			{
					final Symbol LPAREN = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final List d = (List) _symbol_d.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expr e = (Expr) _symbol_e.value;
					 return new CastExpr(t.addArrayDims(d), e);
			}
			case 288: // cast_expression = LPAREN.LPAREN name.t RPAREN.RPAREN unary_expression_not_plus_minus.e
			{
					final Symbol LPAREN = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol RPAREN = _symbols[offset + 3];
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expr e = (Expr) _symbol_e.value;
					 return new CastExpr(t.addArrayDims(new List()), e);
			}
			case 289: // cast_expression = LPAREN.LPAREN name.t dims.d RPAREN.RPAREN unary_expression_not_plus_minus.e
			{
					final Symbol LPAREN = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final List d = (List) _symbol_d.value;
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expr e = (Expr) _symbol_e.value;
					 return new CastExpr(t.addArrayDims(d), e);
			}
			case 290: // multiplicative_expression = unary_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 291: // multiplicative_expression = multiplicative_expression.e1 MULT.MULT unary_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol MULT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new MulExpr(e1, e2);
			}
			case 292: // multiplicative_expression = multiplicative_expression.e1 DIV.DIV unary_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol DIV = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new DivExpr(e1, e2);
			}
			case 293: // multiplicative_expression = multiplicative_expression.e1 MOD.MOD unary_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol MOD = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new ModExpr(e1, e2);
			}
			case 294: // additive_expression = multiplicative_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 295: // additive_expression = additive_expression.e1 PLUS.PLUS multiplicative_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol PLUS = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new AddExpr(e1, e2);
			}
			case 296: // additive_expression = additive_expression.e1 MINUS.MINUS multiplicative_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol MINUS = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new SubExpr(e1, e2);
			}
			case 297: // shift_expression = additive_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 298: // shift_expression = shift_expression.e1 LSHIFT.LSHIFT additive_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol LSHIFT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new LShiftExpr(e1, e2);
			}
			case 299: // shift_expression = shift_expression.e1 RSHIFT.RSHIFT additive_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol RSHIFT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new RShiftExpr(e1, e2);
			}
			case 300: // shift_expression = shift_expression.e1 URSHIFT.URSHIFT additive_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol URSHIFT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new URShiftExpr(e1, e2);
			}
			case 301: // relational_expression = shift_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 302: // relational_expression = relational_expression.e1 LT.LT shift_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new LTExpr(e1, e2);
			}
			case 303: // relational_expression = relational_expression.e1 GT.GT shift_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol GT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new GTExpr(e1, e2);
			}
			case 304: // relational_expression = relational_expression.e1 LTEQ.LTEQ shift_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol LTEQ = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new LEExpr(e1, e2);
			}
			case 305: // relational_expression = relational_expression.e1 GTEQ.GTEQ shift_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol GTEQ = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new GEExpr(e1, e2);
			}
			case 306: // relational_expression = relational_expression.e INSTANCEOF.INSTANCEOF reference_type.t
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol INSTANCEOF = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					 return new InstanceOfExpr(e, t);
			}
			case 307: // equality_expression = relational_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 308: // equality_expression = equality_expression.e1 EQEQ.EQEQ relational_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol EQEQ = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new EQExpr(e1, e2);
			}
			case 309: // equality_expression = equality_expression.e1 NOTEQ.NOTEQ relational_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol NOTEQ = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new NEExpr(e1, e2);
			}
			case 310: // and_expression = equality_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 311: // and_expression = and_expression.e1 AND.AND equality_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol AND = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new AndBitwiseExpr(e1, e2);
			}
			case 312: // exclusive_or_expression = and_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 313: // exclusive_or_expression = exclusive_or_expression.e1 XOR.XOR and_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol XOR = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new XorBitwiseExpr(e1, e2);
			}
			case 314: // inclusive_or_expression = exclusive_or_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 315: // inclusive_or_expression = inclusive_or_expression.e1 OR.OR exclusive_or_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol OR = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new OrBitwiseExpr(e1, e2);
			}
			case 316: // conditional_and_expression = inclusive_or_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 317: // conditional_and_expression = conditional_and_expression.e1 ANDAND.ANDAND inclusive_or_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol ANDAND = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new AndLogicalExpr(e1, e2);
			}
			case 318: // conditional_or_expression = conditional_and_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 319: // conditional_or_expression = conditional_or_expression.e1 OROR.OROR conditional_and_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol OROR = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new OrLogicalExpr(e1, e2);
			}
			case 320: // conditional_expression = conditional_or_expression.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final Expr c = (Expr) _symbol_c.value;
					 return c;
			}
			case 321: // conditional_expression = conditional_or_expression.c QUESTION.QUESTION expression.e1 COLON.COLON conditional_expression.e2
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final Expr c = (Expr) _symbol_c.value;
					final Symbol QUESTION = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol COLON = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new ConditionalExpr(c, e1, e2);
			}
			case 322: // assignment_expression = conditional_expression.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final Expr c = (Expr) _symbol_c.value;
					 return c;
			}
			case 323: // assignment_expression = assignment.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 324: // assignment = postfix_expression.dest EQ.EQ assignment_expression.source
			{
					final Symbol _symbol_dest = _symbols[offset + 1];
					final Expr dest = (Expr) _symbol_dest.value;
					final Symbol EQ = _symbols[offset + 2];
					final Symbol _symbol_source = _symbols[offset + 3];
					final Expr source = (Expr) _symbol_source.value;
					 return new AssignSimpleExpr(dest, source);
			}
			case 325: // assignment = postfix_expression.dest MULTEQ.MULTEQ assignment_expression.source
			{
					final Symbol _symbol_dest = _symbols[offset + 1];
					final Expr dest = (Expr) _symbol_dest.value;
					final Symbol MULTEQ = _symbols[offset + 2];
					final Symbol _symbol_source = _symbols[offset + 3];
					final Expr source = (Expr) _symbol_source.value;
					 return new AssignMulExpr(dest, source);
			}
			case 326: // assignment = postfix_expression.dest DIVEQ.DIVEQ assignment_expression.source
			{
					final Symbol _symbol_dest = _symbols[offset + 1];
					final Expr dest = (Expr) _symbol_dest.value;
					final Symbol DIVEQ = _symbols[offset + 2];
					final Symbol _symbol_source = _symbols[offset + 3];
					final Expr source = (Expr) _symbol_source.value;
					 return new AssignDivExpr(dest, source);
			}
			case 327: // assignment = postfix_expression.dest MODEQ.MODEQ assignment_expression.source
			{
					final Symbol _symbol_dest = _symbols[offset + 1];
					final Expr dest = (Expr) _symbol_dest.value;
					final Symbol MODEQ = _symbols[offset + 2];
					final Symbol _symbol_source = _symbols[offset + 3];
					final Expr source = (Expr) _symbol_source.value;
					 return new AssignModExpr(dest, source);
			}
			case 328: // assignment = postfix_expression.dest PLUSEQ.PLUSEQ assignment_expression.source
			{
					final Symbol _symbol_dest = _symbols[offset + 1];
					final Expr dest = (Expr) _symbol_dest.value;
					final Symbol PLUSEQ = _symbols[offset + 2];
					final Symbol _symbol_source = _symbols[offset + 3];
					final Expr source = (Expr) _symbol_source.value;
					 return new AssignPlusExpr(dest, source);
			}
			case 329: // assignment = postfix_expression.dest MINUSEQ.MINUSEQ assignment_expression.source
			{
					final Symbol _symbol_dest = _symbols[offset + 1];
					final Expr dest = (Expr) _symbol_dest.value;
					final Symbol MINUSEQ = _symbols[offset + 2];
					final Symbol _symbol_source = _symbols[offset + 3];
					final Expr source = (Expr) _symbol_source.value;
					 return new AssignMinusExpr(dest, source);
			}
			case 330: // assignment = postfix_expression.dest LSHIFTEQ.LSHIFTEQ assignment_expression.source
			{
					final Symbol _symbol_dest = _symbols[offset + 1];
					final Expr dest = (Expr) _symbol_dest.value;
					final Symbol LSHIFTEQ = _symbols[offset + 2];
					final Symbol _symbol_source = _symbols[offset + 3];
					final Expr source = (Expr) _symbol_source.value;
					 return new AssignLShiftExpr(dest, source);
			}
			case 331: // assignment = postfix_expression.dest RSHIFTEQ.RSHIFTEQ assignment_expression.source
			{
					final Symbol _symbol_dest = _symbols[offset + 1];
					final Expr dest = (Expr) _symbol_dest.value;
					final Symbol RSHIFTEQ = _symbols[offset + 2];
					final Symbol _symbol_source = _symbols[offset + 3];
					final Expr source = (Expr) _symbol_source.value;
					 return new AssignRShiftExpr(dest, source);
			}
			case 332: // assignment = postfix_expression.dest URSHIFTEQ.URSHIFTEQ assignment_expression.source
			{
					final Symbol _symbol_dest = _symbols[offset + 1];
					final Expr dest = (Expr) _symbol_dest.value;
					final Symbol URSHIFTEQ = _symbols[offset + 2];
					final Symbol _symbol_source = _symbols[offset + 3];
					final Expr source = (Expr) _symbol_source.value;
					 return new AssignURShiftExpr(dest, source);
			}
			case 333: // assignment = postfix_expression.dest ANDEQ.ANDEQ assignment_expression.source
			{
					final Symbol _symbol_dest = _symbols[offset + 1];
					final Expr dest = (Expr) _symbol_dest.value;
					final Symbol ANDEQ = _symbols[offset + 2];
					final Symbol _symbol_source = _symbols[offset + 3];
					final Expr source = (Expr) _symbol_source.value;
					 return new AssignAndExpr(dest, source);
			}
			case 334: // assignment = postfix_expression.dest XOREQ.XOREQ assignment_expression.source
			{
					final Symbol _symbol_dest = _symbols[offset + 1];
					final Expr dest = (Expr) _symbol_dest.value;
					final Symbol XOREQ = _symbols[offset + 2];
					final Symbol _symbol_source = _symbols[offset + 3];
					final Expr source = (Expr) _symbol_source.value;
					 return new AssignXorExpr(dest, source);
			}
			case 335: // assignment = postfix_expression.dest OREQ.OREQ assignment_expression.source
			{
					final Symbol _symbol_dest = _symbols[offset + 1];
					final Expr dest = (Expr) _symbol_dest.value;
					final Symbol OREQ = _symbols[offset + 2];
					final Symbol _symbol_source = _symbols[offset + 3];
					final Expr source = (Expr) _symbol_source.value;
					 return new AssignOrExpr(dest, source);
			}
			case 336: // expression = assignment_expression.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 337: // constant_expression = expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 338: // class_body_declaration = error.error SEMICOLON.SEMICOLON
			{
					final Symbol error = _symbols[offset + 1];
					final Symbol SEMICOLON = _symbols[offset + 2];
					 return new InstanceInitializer(new Block());
			}
			case 339: // class_body_declaration = error.error LBRACE.LBRACE
			{
					final Symbol error = _symbols[offset + 1];
					final Symbol LBRACE = _symbols[offset + 2];
					 return new InstanceInitializer(new Block());
			}
			case 340: // block = LBRACE.LBRACE error.error RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol error = _symbols[offset + 2];
					final Symbol RBRACE = _symbols[offset + 3];
					 return new Block(new List());
			}
			case 341: // switch_block = LBRACE.LBRACE error.error RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol error = _symbols[offset + 2];
					final Symbol RBRACE = _symbols[offset + 3];
					 return new Block(new List());
			}
			case 342: // statement = error.error SEMICOLON.SEMICOLON
			{
					final Symbol error = _symbols[offset + 1];
					final Symbol SEMICOLON = _symbols[offset + 2];
					 return new EmptyStmt();
			}
			case 343: // type_declaration = annotation_type_declaration.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final AnnotationDecl i = (AnnotationDecl) _symbol_i.value;
					 return i;
			}
			case 344: // interface_member_declaration = annotation_type_declaration.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final AnnotationDecl i = (AnnotationDecl) _symbol_i.value;
					 MemberInterfaceDecl mid = new MemberInterfaceDecl(i);  
   mid.setStart(i.getStart());
   mid.setEnd(i.getEnd());
   return mid;
			}
			case 345: // class_member_declaration = annotation_type_declaration.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final AnnotationDecl i = (AnnotationDecl) _symbol_i.value;
					 MemberInterfaceDecl mid = new MemberInterfaceDecl(i);  
   mid.setStart(i.getStart());
   mid.setEnd(i.getEnd());
   return mid;
			}
			case 346: // annotation_type_declaration = AT.AT INTERFACE.INTERFACE IDENTIFIER.IDENTIFIER annotation_type_body.b
			{
					final Symbol AT = _symbols[offset + 1];
					final Symbol INTERFACE = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_b = _symbols[offset + 4];
					final List b = (List) _symbol_b.value;
					 AnnotationDecl a = new AnnotationDecl(new Modifiers(new List()), IDENTIFIER, b); 
   a.setStart(new List().getStart());
   a.setEnd(b.getEnd());
   return a;
			}
			case 347: // annotation_type_declaration = modifiers.m AT.AT INTERFACE.INTERFACE IDENTIFIER.IDENTIFIER annotation_type_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol AT = _symbols[offset + 2];
					final Symbol INTERFACE = _symbols[offset + 3];
					final Symbol IDENTIFIER = _symbols[offset + 4];
					final Symbol _symbol_b = _symbols[offset + 5];
					final List b = (List) _symbol_b.value;
					 AnnotationDecl a = new AnnotationDecl(new Modifiers(m), IDENTIFIER, b); 
   a.setStart(m.getStart());
   a.setEnd(b.getEnd());
   return a;
			}
			case 348: // annotation_type_body = LBRACE.LBRACE annotation_type_element_declarations_opt.i RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 2];
					final List i = (List) _symbol_i.value;
					final Symbol RBRACE = _symbols[offset + 3];
					 return i;
			}
			case 349: // annotation_type_element_declarations = annotation_type_element_declaration.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final BodyDecl i = (BodyDecl) _symbol_i.value;
					 return new List().add(i);
			}
			case 350: // annotation_type_element_declarations = annotation_type_element_declarations.l annotation_type_element_declaration.i
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final BodyDecl i = (BodyDecl) _symbol_i.value;
					 return l.add(i);
			}
			case 351: // annotation_type_element_declaration = type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN RPAREN.RPAREN default_value_opt.default_value SEMICOLON.SEMICOLON
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol LPAREN = _symbols[offset + 3];
					final Symbol RPAREN = _symbols[offset + 4];
					final Symbol _symbol_default_value = _symbols[offset + 5];
					final Opt default_value = (Opt) _symbol_default_value.value;
					final Symbol SEMICOLON = _symbols[offset + 6];
					 AnnotationMethodDecl a = new AnnotationMethodDecl(new Modifiers(new List()), t, IDENTIFIER, new List(), new List(), new Opt(), default_value); 
     a.setStart(new List().getStart());
     a.setEnd(SEMICOLON.getEnd());
     return a;
			}
			case 352: // annotation_type_element_declaration = modifiers.m type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN RPAREN.RPAREN default_value_opt.default_value SEMICOLON.SEMICOLON
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol RPAREN = _symbols[offset + 5];
					final Symbol _symbol_default_value = _symbols[offset + 6];
					final Opt default_value = (Opt) _symbol_default_value.value;
					final Symbol SEMICOLON = _symbols[offset + 7];
					 AnnotationMethodDecl a = new AnnotationMethodDecl(new Modifiers(m), t, IDENTIFIER, new List(), new List(), new Opt(), default_value); 
     a.setStart(m.getStart());
     a.setEnd(SEMICOLON.getEnd());
     return a;
			}
			case 354: // annotation_type_element_declaration = class_declaration.class_declaration
			{
					final Symbol _symbol_class_declaration = _symbols[offset + 1];
					final ClassDecl class_declaration = (ClassDecl) _symbol_class_declaration.value;
					 MemberClassDecl m = new MemberClassDecl(class_declaration); 
     m.setStart(class_declaration.getStart());
     m.setEnd(class_declaration.getEnd());
     return m;
			}
			case 355: // annotation_type_element_declaration = interface_declaration.interface_declaration
			{
					final Symbol _symbol_interface_declaration = _symbols[offset + 1];
					final InterfaceDecl interface_declaration = (InterfaceDecl) _symbol_interface_declaration.value;
					 MemberInterfaceDecl m = new MemberInterfaceDecl(interface_declaration); 
     m.setStart(interface_declaration.getStart());
     m.setEnd(interface_declaration.getEnd());
     return m;
			}
			case 356: // annotation_type_element_declaration = enum_declaration.enum_declaration
			{
					final Symbol _symbol_enum_declaration = _symbols[offset + 1];
					final EnumDecl enum_declaration = (EnumDecl) _symbol_enum_declaration.value;
					 MemberClassDecl m = new MemberClassDecl(enum_declaration); 
     m.setStart(enum_declaration.getStart());
     m.setEnd(enum_declaration.getEnd());
     return m;
			}
			case 357: // annotation_type_element_declaration = annotation_type_declaration.annotation_type_declaration
			{
					final Symbol _symbol_annotation_type_declaration = _symbols[offset + 1];
					final AnnotationDecl annotation_type_declaration = (AnnotationDecl) _symbol_annotation_type_declaration.value;
					 MemberInterfaceDecl m = new MemberInterfaceDecl(annotation_type_declaration); 
     m.setStart(annotation_type_declaration.getStart());
     m.setEnd(annotation_type_declaration.getEnd());
     return m;
			}
			case 358: // annotation_type_element_declaration = SEMICOLON.SEMICOLON
			{
					final Symbol SEMICOLON = _symbols[offset + 1];
					 return new StaticInitializer(new Block());
			}
			case 359: // default_value = DEFAULT.DEFAULT element_value.element_value
			{
					final Symbol DEFAULT = _symbols[offset + 1];
					final Symbol _symbol_element_value = _symbols[offset + 2];
					final ElementValue element_value = (ElementValue) _symbol_element_value.value;
					 return element_value;
			}
			case 364: // normal_annotation = AT.AT name.name LPAREN.LPAREN element_value_pairs_opt.element_value_pairs RPAREN.RPAREN
			{
					final Symbol AT = _symbols[offset + 1];
					final Symbol _symbol_name = _symbols[offset + 2];
					final Access name = (Access) _symbol_name.value;
					final Symbol LPAREN = _symbols[offset + 3];
					final Symbol _symbol_element_value_pairs = _symbols[offset + 4];
					final List element_value_pairs = (List) _symbol_element_value_pairs.value;
					final Symbol RPAREN = _symbols[offset + 5];
					 Annotation a = new Annotation("annotation", name, element_value_pairs); 
     a.setStart(AT.getStart());
     a.setEnd(RPAREN.getEnd());
     return a;
			}
			case 365: // element_value_pairs = element_value_pair.element_value_pair
			{
					final Symbol _symbol_element_value_pair = _symbols[offset + 1];
					final ElementValuePair element_value_pair = (ElementValuePair) _symbol_element_value_pair.value;
					 return new List().add(element_value_pair);
			}
			case 366: // element_value_pairs = element_value_pairs.element_value_pairs COMMA.COMMA element_value_pair.element_value_pair
			{
					final Symbol _symbol_element_value_pairs = _symbols[offset + 1];
					final List element_value_pairs = (List) _symbol_element_value_pairs.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_element_value_pair = _symbols[offset + 3];
					final ElementValuePair element_value_pair = (ElementValuePair) _symbol_element_value_pair.value;
					 return element_value_pairs.add(element_value_pair);
			}
			case 367: // element_value_pair = IDENTIFIER.IDENTIFIER EQ.EQ element_value.element_value
			{
					final Symbol IDENTIFIER = _symbols[offset + 1];
					final Symbol EQ = _symbols[offset + 2];
					final Symbol _symbol_element_value = _symbols[offset + 3];
					final ElementValue element_value = (ElementValue) _symbol_element_value.value;
					 ElementValuePair evp = new ElementValuePair(IDENTIFIER, element_value);
     evp.setStart(IDENTIFIER.getStart());
     evp.setEnd(element_value.getEnd());
     return evp;
			}
			case 368: // element_value = conditional_expression.conditional_expression
			{
					final Symbol _symbol_conditional_expression = _symbols[offset + 1];
					final Expr conditional_expression = (Expr) _symbol_conditional_expression.value;
					 ElementConstantValue e = new ElementConstantValue(conditional_expression);
     e.setStart(conditional_expression.getStart());
     e.setEnd(conditional_expression.getEnd());
     return e;
			}
			case 369: // element_value = annotation.annotation
			{
					final Symbol _symbol_annotation = _symbols[offset + 1];
					final Annotation annotation = (Annotation) _symbol_annotation.value;
					 return new ElementAnnotationValue(annotation);
			}
			case 370: // element_value = element_value_array_initializer.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final ElementArrayValue e = (ElementArrayValue) _symbol_e.value;
					 return e;
			}
			case 371: // element_value_array_initializer = LBRACE.LBRACE RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol RBRACE = _symbols[offset + 2];
					 return new ElementArrayValue(new List());
			}
			case 372: // element_value_array_initializer = LBRACE.LBRACE element_values.element_values RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_element_values = _symbols[offset + 2];
					final List element_values = (List) _symbol_element_values.value;
					final Symbol RBRACE = _symbols[offset + 3];
					 return new ElementArrayValue(element_values);
			}
			case 373: // element_value_array_initializer = LBRACE.LBRACE COMMA.COMMA RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol RBRACE = _symbols[offset + 3];
					 return new ElementArrayValue(new List());
			}
			case 374: // element_value_array_initializer = LBRACE.LBRACE element_values.element_values COMMA.COMMA RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_element_values = _symbols[offset + 2];
					final List element_values = (List) _symbol_element_values.value;
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol RBRACE = _symbols[offset + 4];
					 return new ElementArrayValue(element_values);
			}
			case 375: // element_values = element_value.element_value
			{
					final Symbol _symbol_element_value = _symbols[offset + 1];
					final ElementValue element_value = (ElementValue) _symbol_element_value.value;
					 return new List().add(element_value);
			}
			case 376: // element_values = element_values.element_values COMMA.COMMA element_value.element_value
			{
					final Symbol _symbol_element_values = _symbols[offset + 1];
					final List element_values = (List) _symbol_element_values.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_element_value = _symbols[offset + 3];
					final ElementValue element_value = (ElementValue) _symbol_element_value.value;
					 return element_values.add(element_value);
			}
			case 377: // marker_annotation = AT.AT name.name
			{
					final Symbol AT = _symbols[offset + 1];
					final Symbol _symbol_name = _symbols[offset + 2];
					final Access name = (Access) _symbol_name.value;
					 return new Annotation("annotation", name, new List());
			}
			case 378: // single_element_annotation = AT.AT name.name LPAREN.LPAREN element_value.element_value RPAREN.RPAREN
			{
					final Symbol AT = _symbols[offset + 1];
					final Symbol _symbol_name = _symbols[offset + 2];
					final Access name = (Access) _symbol_name.value;
					final Symbol LPAREN = _symbols[offset + 3];
					final Symbol _symbol_element_value = _symbols[offset + 4];
					final ElementValue element_value = (ElementValue) _symbol_element_value.value;
					final Symbol RPAREN = _symbols[offset + 5];
					 Annotation a = new Annotation("annotation", name, new List().add(new ElementValuePair("value", element_value)));
     a.setStart(AT.getStart());
     a.setEnd(RPAREN.getEnd());
     return a;
			}
			case 379: // compilation_unit = modifiers.a package_declaration.p
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_p = _symbols[offset + 2];
					final IdUse p = (IdUse) _symbol_p.value;
					 return new AnnotatedCompilationUnit(p.getID(), new List(), new List(), new Modifiers(a));
			}
			case 380: // compilation_unit = modifiers.a package_declaration.p import_declarations.i
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_p = _symbols[offset + 2];
					final IdUse p = (IdUse) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final List i = (List) _symbol_i.value;
					 return new AnnotatedCompilationUnit(p.getID(), i, new List(), new Modifiers(a));
			}
			case 381: // compilation_unit = modifiers.a package_declaration.p type_declarations.t
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_p = _symbols[offset + 2];
					final IdUse p = (IdUse) _symbol_p.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final List t = (List) _symbol_t.value;
					 return new AnnotatedCompilationUnit(p.getID(), new List(), t, new Modifiers(a));
			}
			case 382: // compilation_unit = modifiers.a package_declaration.p import_declarations.i type_declarations.t
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_p = _symbols[offset + 2];
					final IdUse p = (IdUse) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 3];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final List t = (List) _symbol_t.value;
					 return new AnnotatedCompilationUnit(p.getID(), i, t, new Modifiers(a));
			}
			case 383: // statement = enhanced_for_statement.f
			{
					final Symbol _symbol_f = _symbols[offset + 1];
					final Stmt f = (Stmt) _symbol_f.value;
					 return f;
			}
			case 384: // statement_no_short_if = enhanced_for_statement_no_short_if.f
			{
					final Symbol _symbol_f = _symbols[offset + 1];
					final Stmt f = (Stmt) _symbol_f.value;
					 return f;
			}
			case 385: // enhanced_for_statement = FOR.FOR LPAREN.LPAREN enhanced_for_parameter.p COLON.COLON expression.e RPAREN.RPAREN statement.s
			{
					final Symbol FOR = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_p = _symbols[offset + 3];
					final VariableDeclaration p = (VariableDeclaration) _symbol_p.value;
					final Symbol COLON = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol RPAREN = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final Stmt s = (Stmt) _symbol_s.value;
					 return new EnhancedForStmt(p, e, s);
			}
			case 386: // enhanced_for_statement_no_short_if = FOR.FOR LPAREN.LPAREN enhanced_for_parameter.p COLON.COLON expression.e RPAREN.RPAREN statement_no_short_if.s
			{
					final Symbol FOR = _symbols[offset + 1];
					final Symbol LPAREN = _symbols[offset + 2];
					final Symbol _symbol_p = _symbols[offset + 3];
					final VariableDeclaration p = (VariableDeclaration) _symbol_p.value;
					final Symbol COLON = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol RPAREN = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final Stmt s = (Stmt) _symbol_s.value;
					 return new EnhancedForStmt(p, e, s);
			}
			case 387: // enhanced_for_parameter = type.t IDENTIFIER.IDENTIFIER dims_opt.d
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol _symbol_d = _symbols[offset + 3];
					final List d = (List) _symbol_d.value;
					 return new VariableDeclaration(new Modifiers(new List()), t.addArrayDims(d), IDENTIFIER, new Opt());
			}
			case 388: // enhanced_for_parameter = modifiers.m type.t IDENTIFIER.IDENTIFIER dims_opt.d
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_d = _symbols[offset + 4];
					final List d = (List) _symbol_d.value;
					 return new VariableDeclaration(new Modifiers(m), t.addArrayDims(d), IDENTIFIER, new Opt());
			}
			case 389: // type_declaration = enum_declaration.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final EnumDecl i = (EnumDecl) _symbol_i.value;
					 return i;
			}
			case 390: // interface_member_declaration = enum_declaration.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final EnumDecl i = (EnumDecl) _symbol_i.value;
					 return new MemberClassDecl(i);
			}
			case 391: // class_member_declaration = enum_declaration.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final EnumDecl i = (EnumDecl) _symbol_i.value;
					 return new MemberClassDecl(i);
			}
			case 392: // enum_declaration = ENUM.ENUM IDENTIFIER.id enum_body.b
			{
					final Symbol ENUM = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_b = _symbols[offset + 3];
					final List b = (List) _symbol_b.value;
					 return new EnumDecl(new Modifiers(new List()), ((String)id.value), new List(), b);
			}
			case 393: // enum_declaration = modifiers.m ENUM.ENUM IDENTIFIER.id enum_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol ENUM = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol _symbol_b = _symbols[offset + 4];
					final List b = (List) _symbol_b.value;
					 return new EnumDecl(new Modifiers(m), ((String)id.value), new List(), b);
			}
			case 394: // enum_declaration = ENUM.ENUM IDENTIFIER.id interfaces.i enum_body.b
			{
					final Symbol ENUM = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 4];
					final List b = (List) _symbol_b.value;
					 return new EnumDecl(new Modifiers(new List()), ((String)id.value), i, b);
			}
			case 395: // enum_declaration = modifiers.m ENUM.ENUM IDENTIFIER.id interfaces.i enum_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol ENUM = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final List b = (List) _symbol_b.value;
					 return new EnumDecl(new Modifiers(m), ((String)id.value), i, b);
			}
			case 396: // enum_body = LBRACE.LBRACE RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol RBRACE = _symbols[offset + 2];
					 return new List();
			}
			case 397: // enum_body = LBRACE.LBRACE enum_constants.enum_constants RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_enum_constants = _symbols[offset + 2];
					final List enum_constants = (List) _symbol_enum_constants.value;
					final Symbol RBRACE = _symbols[offset + 3];
					 return enum_constants;
			}
			case 398: // enum_body = LBRACE.LBRACE COMMA.COMMA RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol RBRACE = _symbols[offset + 3];
					 return new List();
			}
			case 399: // enum_body = LBRACE.LBRACE enum_constants.enum_constants COMMA.COMMA RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_enum_constants = _symbols[offset + 2];
					final List enum_constants = (List) _symbol_enum_constants.value;
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol RBRACE = _symbols[offset + 4];
					 return enum_constants;
			}
			case 400: // enum_body = LBRACE.LBRACE enum_body_declarations.enum_body_declarations RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_enum_body_declarations = _symbols[offset + 2];
					final List enum_body_declarations = (List) _symbol_enum_body_declarations.value;
					final Symbol RBRACE = _symbols[offset + 3];
					 return enum_body_declarations;
			}
			case 401: // enum_body = LBRACE.LBRACE enum_constants.c enum_body_declarations.d RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 2];
					final List c = (List) _symbol_c.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final List d = (List) _symbol_d.value;
					final Symbol RBRACE = _symbols[offset + 4];
					 for(int i = 0; i < d.getNumChildNoTransform(); i++) c.add(d.getChildNoTransform(i)); return c;
			}
			case 402: // enum_body = LBRACE.LBRACE COMMA.COMMA enum_body_declarations.enum_body_declarations RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_enum_body_declarations = _symbols[offset + 3];
					final List enum_body_declarations = (List) _symbol_enum_body_declarations.value;
					final Symbol RBRACE = _symbols[offset + 4];
					 return enum_body_declarations;
			}
			case 403: // enum_body = LBRACE.LBRACE enum_constants.c COMMA.COMMA enum_body_declarations.d RBRACE.RBRACE
			{
					final Symbol LBRACE = _symbols[offset + 1];
					final Symbol _symbol_c = _symbols[offset + 2];
					final List c = (List) _symbol_c.value;
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol _symbol_d = _symbols[offset + 4];
					final List d = (List) _symbol_d.value;
					final Symbol RBRACE = _symbols[offset + 5];
					 for(int i = 0; i < d.getNumChildNoTransform(); i++) c.add(d.getChildNoTransform(i)); return c;
			}
			case 404: // enum_constants = enum_constant.enum_constant
			{
					final Symbol _symbol_enum_constant = _symbols[offset + 1];
					final BodyDecl enum_constant = (BodyDecl) _symbol_enum_constant.value;
					 return new List().add(enum_constant);
			}
			case 405: // enum_constants = enum_constants.enum_constants COMMA.COMMA enum_constant.enum_constant
			{
					final Symbol _symbol_enum_constants = _symbols[offset + 1];
					final List enum_constants = (List) _symbol_enum_constants.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_enum_constant = _symbols[offset + 3];
					final BodyDecl enum_constant = (BodyDecl) _symbol_enum_constant.value;
					 return enum_constants.add(enum_constant);
			}
			case 406: // enum_constant = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new EnumConstant(new Modifiers(new List()), ((String)id.value), new List(), new List());
			}
			case 407: // enum_constant = annotations.annotations IDENTIFIER.id
			{
					final Symbol _symbol_annotations = _symbols[offset + 1];
					final List annotations = (List) _symbol_annotations.value;
					final Symbol id = _symbols[offset + 2];
					 return new EnumConstant(new Modifiers(annotations), ((String)id.value), new List(), new List());
			}
			case 408: // enum_constant = IDENTIFIER.id arguments.arguments
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_arguments = _symbols[offset + 2];
					final List arguments = (List) _symbol_arguments.value;
					 return new EnumConstant(new Modifiers(new List()), ((String)id.value), arguments, new List());
			}
			case 409: // enum_constant = annotations.annotations IDENTIFIER.id arguments.arguments
			{
					final Symbol _symbol_annotations = _symbols[offset + 1];
					final List annotations = (List) _symbol_annotations.value;
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_arguments = _symbols[offset + 3];
					final List arguments = (List) _symbol_arguments.value;
					 return new EnumConstant(new Modifiers(annotations), ((String)id.value), arguments, new List());
			}
			case 410: // enum_constant = IDENTIFIER.id class_body.class_body
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_class_body = _symbols[offset + 2];
					final List class_body = (List) _symbol_class_body.value;
					 return new EnumConstant(new Modifiers(new List()), ((String)id.value), new List(), class_body);
			}
			case 411: // enum_constant = annotations.annotations IDENTIFIER.id class_body.class_body
			{
					final Symbol _symbol_annotations = _symbols[offset + 1];
					final List annotations = (List) _symbol_annotations.value;
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_class_body = _symbols[offset + 3];
					final List class_body = (List) _symbol_class_body.value;
					 return new EnumConstant(new Modifiers(annotations), ((String)id.value), new List(), class_body);
			}
			case 412: // enum_constant = IDENTIFIER.id arguments.arguments class_body.class_body
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_arguments = _symbols[offset + 2];
					final List arguments = (List) _symbol_arguments.value;
					final Symbol _symbol_class_body = _symbols[offset + 3];
					final List class_body = (List) _symbol_class_body.value;
					 return new EnumConstant(new Modifiers(new List()), ((String)id.value), arguments, class_body);
			}
			case 413: // enum_constant = annotations.annotations IDENTIFIER.id arguments.arguments class_body.class_body
			{
					final Symbol _symbol_annotations = _symbols[offset + 1];
					final List annotations = (List) _symbol_annotations.value;
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_arguments = _symbols[offset + 3];
					final List arguments = (List) _symbol_arguments.value;
					final Symbol _symbol_class_body = _symbols[offset + 4];
					final List class_body = (List) _symbol_class_body.value;
					 return new EnumConstant(new Modifiers(annotations), ((String)id.value), arguments, class_body);
			}
			case 414: // arguments = LPAREN.LPAREN argument_list.argument_list RPAREN.RPAREN
			{
					final Symbol LPAREN = _symbols[offset + 1];
					final Symbol _symbol_argument_list = _symbols[offset + 2];
					final List argument_list = (List) _symbol_argument_list.value;
					final Symbol RPAREN = _symbols[offset + 3];
					 return argument_list;
			}
			case 415: // annotations = annotation.annotation
			{
					final Symbol _symbol_annotation = _symbols[offset + 1];
					final Annotation annotation = (Annotation) _symbol_annotation.value;
					 return new List().add(annotation);
			}
			case 416: // annotations = annotations.annotations annotation.annotation
			{
					final Symbol _symbol_annotations = _symbols[offset + 1];
					final List annotations = (List) _symbol_annotations.value;
					final Symbol _symbol_annotation = _symbols[offset + 2];
					final Annotation annotation = (Annotation) _symbol_annotation.value;
					 return annotations.add(annotation);
			}
			case 417: // enum_body_declarations = SEMICOLON.SEMICOLON class_body_declarations_opt.class_body_declarations
			{
					final Symbol SEMICOLON = _symbols[offset + 1];
					final Symbol _symbol_class_body_declarations = _symbols[offset + 2];
					final List class_body_declarations = (List) _symbol_class_body_declarations.value;
					 return class_body_declarations;
			}
			case 418: // explicit_constructor_invocation = type_arguments.a THIS.THIS LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol THIS = _symbols[offset + 2];
					final Symbol LPAREN = _symbols[offset + 3];
					final Symbol _symbol_l = _symbols[offset + 4];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 5];
					final Symbol SEMICOLON = _symbols[offset + 6];
					 return new ExprStmt(new ParConstructorAccess("this", l, a));
			}
			case 419: // explicit_constructor_invocation = type_arguments.a SUPER.SUPER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol SUPER = _symbols[offset + 2];
					final Symbol LPAREN = _symbols[offset + 3];
					final Symbol _symbol_l = _symbols[offset + 4];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 5];
					final Symbol SEMICOLON = _symbols[offset + 6];
					 return new ExprStmt(new ParSuperConstructorAccess("super", l, a));
			}
			case 420: // explicit_constructor_invocation = primary.p DOT.DOT type_arguments.a SUPER.SUPER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expr p = (Expr) _symbol_p.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol _symbol_a = _symbols[offset + 3];
					final List a = (List) _symbol_a.value;
					final Symbol SUPER = _symbols[offset + 4];
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_l = _symbols[offset + 6];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 7];
					final Symbol SEMICOLON = _symbols[offset + 8];
					 return new ExprStmt(p.qualifiesAccess(new ParSuperConstructorAccess("super", l, a)));
			}
			case 421: // explicit_constructor_invocation = name.n DOT.DOT type_arguments.a SUPER.SUPER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol _symbol_a = _symbols[offset + 3];
					final List a = (List) _symbol_a.value;
					final Symbol SUPER = _symbols[offset + 4];
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_l = _symbols[offset + 6];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 7];
					final Symbol SEMICOLON = _symbols[offset + 8];
					 return new ExprStmt(n.qualifiesAccess(new ParSuperConstructorAccess("super", l, a)));
			}
			case 422: // method_invocation = primary.p DOT.DOT type_arguments.a IDENTIFIER.IDENTIFIER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expr p = (Expr) _symbol_p.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol _symbol_a = _symbols[offset + 3];
					final List a = (List) _symbol_a.value;
					final Symbol IDENTIFIER = _symbols[offset + 4];
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_l = _symbols[offset + 6];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 7];
					 return p.qualifiesAccess(new ParMethodAccess(IDENTIFIER, l, a));
			}
			case 423: // method_invocation = name.n DOT.DOT type_arguments.a IDENTIFIER.IDENTIFIER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol _symbol_a = _symbols[offset + 3];
					final List a = (List) _symbol_a.value;
					final Symbol IDENTIFIER = _symbols[offset + 4];
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_l = _symbols[offset + 6];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 7];
					 return n.qualifiesAccess(new ParMethodAccess(IDENTIFIER, l, a));
			}
			case 424: // method_invocation = SUPER.SUPER DOT.DOT type_arguments.a IDENTIFIER.IDENTIFIER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN
			{
					final Symbol SUPER = _symbols[offset + 1];
					final Symbol DOT = _symbols[offset + 2];
					final Symbol _symbol_a = _symbols[offset + 3];
					final List a = (List) _symbol_a.value;
					final Symbol IDENTIFIER = _symbols[offset + 4];
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_l = _symbols[offset + 6];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 7];
					 return new SuperAccess("super").qualifiesAccess(
		                    new ParMethodAccess(IDENTIFIER, l, a));
			}
			case 425: // method_invocation = name.n DOT.d1 SUPER.SUPER DOT.d2 type_arguments.a IDENTIFIER.IDENTIFIER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol d1 = _symbols[offset + 2];
					final Symbol SUPER = _symbols[offset + 3];
					final Symbol d2 = _symbols[offset + 4];
					final Symbol _symbol_a = _symbols[offset + 5];
					final List a = (List) _symbol_a.value;
					final Symbol IDENTIFIER = _symbols[offset + 6];
					final Symbol LPAREN = _symbols[offset + 7];
					final Symbol _symbol_l = _symbols[offset + 8];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 9];
					 return n.qualifiesAccess(new SuperAccess("super")).qualifiesAccess(
                            new ParMethodAccess(IDENTIFIER, l, a));
			}
			case 426: // method_header = LT.LT type_parameter_list_1.l type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.p RPAREN.RPAREN
			{
					final Symbol LT = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 4];
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_p = _symbols[offset + 6];
					final List p = (List) _symbol_p.value;
					final Symbol RPAREN = _symbols[offset + 7];
					 return new GenericMethodDecl(new Modifiers(new List()), t.addArrayDims(new List()), IDENTIFIER, p, new List(), new Opt(), l);
			}
			case 427: // method_header = modifiers.m LT.LT type_parameter_list_1.l type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.p RPAREN.RPAREN
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 5];
					final Symbol LPAREN = _symbols[offset + 6];
					final Symbol _symbol_p = _symbols[offset + 7];
					final List p = (List) _symbol_p.value;
					final Symbol RPAREN = _symbols[offset + 8];
					 return new GenericMethodDecl(new Modifiers(m), t.addArrayDims(new List()), IDENTIFIER, p, new List(), new Opt(), l);
			}
			case 428: // method_header = LT.LT type_parameter_list_1.l type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.p RPAREN.RPAREN dims.d
			{
					final Symbol LT = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 4];
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_p = _symbols[offset + 6];
					final List p = (List) _symbol_p.value;
					final Symbol RPAREN = _symbols[offset + 7];
					final Symbol _symbol_d = _symbols[offset + 8];
					final List d = (List) _symbol_d.value;
					 return new GenericMethodDecl(new Modifiers(new List()), t.addArrayDims(d), IDENTIFIER, p, new List(), new Opt(), l);
			}
			case 429: // method_header = modifiers.m LT.LT type_parameter_list_1.l type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.p RPAREN.RPAREN dims.d
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 5];
					final Symbol LPAREN = _symbols[offset + 6];
					final Symbol _symbol_p = _symbols[offset + 7];
					final List p = (List) _symbol_p.value;
					final Symbol RPAREN = _symbols[offset + 8];
					final Symbol _symbol_d = _symbols[offset + 9];
					final List d = (List) _symbol_d.value;
					 return new GenericMethodDecl(new Modifiers(m), t.addArrayDims(d), IDENTIFIER, p, new List(), new Opt(), l);
			}
			case 430: // method_header = LT.LT type_parameter_list_1.l type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.p RPAREN.RPAREN throws.tl
			{
					final Symbol LT = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 4];
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_p = _symbols[offset + 6];
					final List p = (List) _symbol_p.value;
					final Symbol RPAREN = _symbols[offset + 7];
					final Symbol _symbol_tl = _symbols[offset + 8];
					final List tl = (List) _symbol_tl.value;
					 return new GenericMethodDecl(new Modifiers(new List()), t.addArrayDims(new List()), IDENTIFIER, p, tl, new Opt(), l);
			}
			case 431: // method_header = modifiers.m LT.LT type_parameter_list_1.l type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.p RPAREN.RPAREN throws.tl
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 5];
					final Symbol LPAREN = _symbols[offset + 6];
					final Symbol _symbol_p = _symbols[offset + 7];
					final List p = (List) _symbol_p.value;
					final Symbol RPAREN = _symbols[offset + 8];
					final Symbol _symbol_tl = _symbols[offset + 9];
					final List tl = (List) _symbol_tl.value;
					 return new GenericMethodDecl(new Modifiers(m), t.addArrayDims(new List()), IDENTIFIER, p, tl, new Opt(), l);
			}
			case 432: // method_header = LT.LT type_parameter_list_1.l type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.p RPAREN.RPAREN dims.d throws.tl
			{
					final Symbol LT = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 4];
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_p = _symbols[offset + 6];
					final List p = (List) _symbol_p.value;
					final Symbol RPAREN = _symbols[offset + 7];
					final Symbol _symbol_d = _symbols[offset + 8];
					final List d = (List) _symbol_d.value;
					final Symbol _symbol_tl = _symbols[offset + 9];
					final List tl = (List) _symbol_tl.value;
					 return new GenericMethodDecl(new Modifiers(new List()), t.addArrayDims(d), IDENTIFIER, p, tl, new Opt(), l);
			}
			case 433: // method_header = modifiers.m LT.LT type_parameter_list_1.l type.t IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.p RPAREN.RPAREN dims.d throws.tl
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final Access t = (Access) _symbol_t.value;
					final Symbol IDENTIFIER = _symbols[offset + 5];
					final Symbol LPAREN = _symbols[offset + 6];
					final Symbol _symbol_p = _symbols[offset + 7];
					final List p = (List) _symbol_p.value;
					final Symbol RPAREN = _symbols[offset + 8];
					final Symbol _symbol_d = _symbols[offset + 9];
					final List d = (List) _symbol_d.value;
					final Symbol _symbol_tl = _symbols[offset + 10];
					final List tl = (List) _symbol_tl.value;
					 return new GenericMethodDecl(new Modifiers(m), t.addArrayDims(d), IDENTIFIER, p, tl, new Opt(), l);
			}
			case 434: // method_header = LT.LT type_parameter_list_1.l VOID.VOID IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.p RPAREN.RPAREN throws_opt.tl
			{
					final Symbol LT = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					final Symbol VOID = _symbols[offset + 3];
					final Symbol IDENTIFIER = _symbols[offset + 4];
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_p = _symbols[offset + 6];
					final List p = (List) _symbol_p.value;
					final Symbol RPAREN = _symbols[offset + 7];
					final Symbol _symbol_tl = _symbols[offset + 8];
					final List tl = (List) _symbol_tl.value;
					 return new GenericMethodDecl(new Modifiers(new List()), new PrimitiveTypeAccess("void"), IDENTIFIER, p, tl, new Opt(), l);
			}
			case 435: // method_header = modifiers.m LT.LT type_parameter_list_1.l VOID.VOID IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.p RPAREN.RPAREN throws_opt.tl
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					final Symbol VOID = _symbols[offset + 4];
					final Symbol IDENTIFIER = _symbols[offset + 5];
					final Symbol LPAREN = _symbols[offset + 6];
					final Symbol _symbol_p = _symbols[offset + 7];
					final List p = (List) _symbol_p.value;
					final Symbol RPAREN = _symbols[offset + 8];
					final Symbol _symbol_tl = _symbols[offset + 9];
					final List tl = (List) _symbol_tl.value;
					 return new GenericMethodDecl(new Modifiers(m), new PrimitiveTypeAccess("void"), IDENTIFIER, p, tl, new Opt(), l);
			}
			case 436: // constructor_declaration = LT.LT type_parameter_list_1.l IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE RBRACE.RBRACE
			{
					final Symbol LT = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol _symbol_pl = _symbols[offset + 5];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 6];
					final Symbol _symbol_tl = _symbols[offset + 7];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 8];
					final Symbol RBRACE = _symbols[offset + 9];
					 return new GenericConstructorDecl(new Modifiers(new List()), IDENTIFIER, pl, tl, new Opt(), new Block(new List()), l);
			}
			case 437: // constructor_declaration = modifiers.m LT.LT type_parameter_list_1.l IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE RBRACE.RBRACE
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					final Symbol IDENTIFIER = _symbols[offset + 4];
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_pl = _symbols[offset + 6];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 7];
					final Symbol _symbol_tl = _symbols[offset + 8];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 9];
					final Symbol RBRACE = _symbols[offset + 10];
					 return new GenericConstructorDecl(new Modifiers(m), IDENTIFIER, pl, tl, new Opt(), new Block(new List()), l);
			}
			case 438: // constructor_declaration = LT.LT type_parameter_list_1.l IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE explicit_constructor_invocation.c RBRACE.RBRACE
			{
					final Symbol LT = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol _symbol_pl = _symbols[offset + 5];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 6];
					final Symbol _symbol_tl = _symbols[offset + 7];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 8];
					final Symbol _symbol_c = _symbols[offset + 9];
					final ExprStmt c = (ExprStmt) _symbol_c.value;
					final Symbol RBRACE = _symbols[offset + 10];
					 return new GenericConstructorDecl(new Modifiers(new List()), IDENTIFIER, pl, tl, new Opt(c), new Block(new List()), l);
			}
			case 439: // constructor_declaration = modifiers.m LT.LT type_parameter_list_1.l IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE explicit_constructor_invocation.c RBRACE.RBRACE
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					final Symbol IDENTIFIER = _symbols[offset + 4];
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_pl = _symbols[offset + 6];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 7];
					final Symbol _symbol_tl = _symbols[offset + 8];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 9];
					final Symbol _symbol_c = _symbols[offset + 10];
					final ExprStmt c = (ExprStmt) _symbol_c.value;
					final Symbol RBRACE = _symbols[offset + 11];
					 return new GenericConstructorDecl(new Modifiers(m), IDENTIFIER, pl, tl, new Opt(c), new Block(new List()), l);
			}
			case 440: // constructor_declaration = LT.LT type_parameter_list_1.l IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE block_statements.bl RBRACE.RBRACE
			{
					final Symbol LT = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol _symbol_pl = _symbols[offset + 5];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 6];
					final Symbol _symbol_tl = _symbols[offset + 7];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 8];
					final Symbol _symbol_bl = _symbols[offset + 9];
					final List bl = (List) _symbol_bl.value;
					final Symbol RBRACE = _symbols[offset + 10];
					 return new GenericConstructorDecl(new Modifiers(new List()), IDENTIFIER, pl, tl, new Opt(), new Block(bl), l);
			}
			case 441: // constructor_declaration = modifiers.m LT.LT type_parameter_list_1.l IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE block_statements.bl RBRACE.RBRACE
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					final Symbol IDENTIFIER = _symbols[offset + 4];
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_pl = _symbols[offset + 6];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 7];
					final Symbol _symbol_tl = _symbols[offset + 8];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 9];
					final Symbol _symbol_bl = _symbols[offset + 10];
					final List bl = (List) _symbol_bl.value;
					final Symbol RBRACE = _symbols[offset + 11];
					 return new GenericConstructorDecl(new Modifiers(m), IDENTIFIER, pl, tl, new Opt(), new Block(bl), l);
			}
			case 442: // constructor_declaration = LT.LT type_parameter_list_1.l IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE explicit_constructor_invocation.c block_statements.bl RBRACE.RBRACE
			{
					final Symbol LT = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol _symbol_pl = _symbols[offset + 5];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 6];
					final Symbol _symbol_tl = _symbols[offset + 7];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 8];
					final Symbol _symbol_c = _symbols[offset + 9];
					final ExprStmt c = (ExprStmt) _symbol_c.value;
					final Symbol _symbol_bl = _symbols[offset + 10];
					final List bl = (List) _symbol_bl.value;
					final Symbol RBRACE = _symbols[offset + 11];
					 return new GenericConstructorDecl(new Modifiers(new List()), IDENTIFIER, pl, tl, new Opt(c), new Block(bl), l);
			}
			case 443: // constructor_declaration = modifiers.m LT.LT type_parameter_list_1.l IDENTIFIER.IDENTIFIER LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl LBRACE.LBRACE explicit_constructor_invocation.c block_statements.bl RBRACE.RBRACE
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					final Symbol IDENTIFIER = _symbols[offset + 4];
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_pl = _symbols[offset + 6];
					final List pl = (List) _symbol_pl.value;
					final Symbol RPAREN = _symbols[offset + 7];
					final Symbol _symbol_tl = _symbols[offset + 8];
					final List tl = (List) _symbol_tl.value;
					final Symbol LBRACE = _symbols[offset + 9];
					final Symbol _symbol_c = _symbols[offset + 10];
					final ExprStmt c = (ExprStmt) _symbol_c.value;
					final Symbol _symbol_bl = _symbols[offset + 11];
					final List bl = (List) _symbol_bl.value;
					final Symbol RBRACE = _symbols[offset + 12];
					 return new GenericConstructorDecl(new Modifiers(m), IDENTIFIER, pl, tl, new Opt(c), new Block(bl), l);
			}
			case 444: // class_declaration = CLASS.CLASS IDENTIFIER.IDENTIFIER type_parameters.p class_body.b
			{
					final Symbol CLASS = _symbols[offset + 1];
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol _symbol_p = _symbols[offset + 3];
					final List p = (List) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 4];
					final List b = (List) _symbol_b.value;
					 return new GenericClassDecl(new Modifiers(new List()), IDENTIFIER, new Opt(), new List(), b, p);
			}
			case 445: // class_declaration = modifiers.m CLASS.CLASS IDENTIFIER.IDENTIFIER type_parameters.p class_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol CLASS = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_p = _symbols[offset + 4];
					final List p = (List) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final List b = (List) _symbol_b.value;
					 return new GenericClassDecl(new Modifiers(m), IDENTIFIER, new Opt(), new List(), b, p);
			}
			case 446: // class_declaration = CLASS.CLASS IDENTIFIER.IDENTIFIER type_parameters.p super.s class_body.b
			{
					final Symbol CLASS = _symbols[offset + 1];
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol _symbol_p = _symbols[offset + 3];
					final List p = (List) _symbol_p.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Opt s = (Opt) _symbol_s.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final List b = (List) _symbol_b.value;
					 return new GenericClassDecl(new Modifiers(new List()), IDENTIFIER, s, new List(), b, p);
			}
			case 447: // class_declaration = modifiers.m CLASS.CLASS IDENTIFIER.IDENTIFIER type_parameters.p super.s class_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol CLASS = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_p = _symbols[offset + 4];
					final List p = (List) _symbol_p.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final Opt s = (Opt) _symbol_s.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final List b = (List) _symbol_b.value;
					 return new GenericClassDecl(new Modifiers(m), IDENTIFIER, s, new List(), b, p);
			}
			case 448: // class_declaration = CLASS.CLASS IDENTIFIER.IDENTIFIER type_parameters.p interfaces.i class_body.b
			{
					final Symbol CLASS = _symbols[offset + 1];
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol _symbol_p = _symbols[offset + 3];
					final List p = (List) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 4];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final List b = (List) _symbol_b.value;
					 return new GenericClassDecl(new Modifiers(new List()), IDENTIFIER, new Opt(), i, b, p);
			}
			case 449: // class_declaration = modifiers.m CLASS.CLASS IDENTIFIER.IDENTIFIER type_parameters.p interfaces.i class_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol CLASS = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_p = _symbols[offset + 4];
					final List p = (List) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 5];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final List b = (List) _symbol_b.value;
					 return new GenericClassDecl(new Modifiers(m), IDENTIFIER, new Opt(), i, b, p);
			}
			case 450: // class_declaration = CLASS.CLASS IDENTIFIER.IDENTIFIER type_parameters.p super.s interfaces.i class_body.b
			{
					final Symbol CLASS = _symbols[offset + 1];
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol _symbol_p = _symbols[offset + 3];
					final List p = (List) _symbol_p.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final Opt s = (Opt) _symbol_s.value;
					final Symbol _symbol_i = _symbols[offset + 5];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final List b = (List) _symbol_b.value;
					 return new GenericClassDecl(new Modifiers(new List()), IDENTIFIER, s, i, b, p);
			}
			case 451: // class_declaration = modifiers.m CLASS.CLASS IDENTIFIER.IDENTIFIER type_parameters.p super.s interfaces.i class_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol CLASS = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_p = _symbols[offset + 4];
					final List p = (List) _symbol_p.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final Opt s = (Opt) _symbol_s.value;
					final Symbol _symbol_i = _symbols[offset + 6];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 7];
					final List b = (List) _symbol_b.value;
					 return new GenericClassDecl(new Modifiers(m), IDENTIFIER, s, i, b, p);
			}
			case 452: // interface_declaration = INTERFACE.INTERFACE IDENTIFIER.IDENTIFIER type_parameters.p interface_body.b
			{
					final Symbol INTERFACE = _symbols[offset + 1];
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol _symbol_p = _symbols[offset + 3];
					final List p = (List) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 4];
					final List b = (List) _symbol_b.value;
					 return new GenericInterfaceDecl(new Modifiers(new List()), IDENTIFIER, new List(), b, p);
			}
			case 453: // interface_declaration = modifiers.m INTERFACE.INTERFACE IDENTIFIER.IDENTIFIER type_parameters.p interface_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol INTERFACE = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_p = _symbols[offset + 4];
					final List p = (List) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final List b = (List) _symbol_b.value;
					 return new GenericInterfaceDecl(new Modifiers(m), IDENTIFIER, new List(), b, p);
			}
			case 454: // interface_declaration = INTERFACE.INTERFACE IDENTIFIER.IDENTIFIER type_parameters.p extends_interfaces.i interface_body.b
			{
					final Symbol INTERFACE = _symbols[offset + 1];
					final Symbol IDENTIFIER = _symbols[offset + 2];
					final Symbol _symbol_p = _symbols[offset + 3];
					final List p = (List) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 4];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final List b = (List) _symbol_b.value;
					 return new GenericInterfaceDecl(new Modifiers(new List()), IDENTIFIER, i, b, p);
			}
			case 455: // interface_declaration = modifiers.m INTERFACE.INTERFACE IDENTIFIER.IDENTIFIER type_parameters.p extends_interfaces.i interface_body.b
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol INTERFACE = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_p = _symbols[offset + 4];
					final List p = (List) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 5];
					final List i = (List) _symbol_i.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final List b = (List) _symbol_b.value;
					 return new GenericInterfaceDecl(new Modifiers(m), IDENTIFIER, i, b, p);
			}
			case 456: // class_or_interface = name.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					 return n;
			}
			case 457: // class_or_interface = class_or_interface.n LT.LT type_argument_list_1.l DOT.DOT name.end
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					final Symbol DOT = _symbols[offset + 4];
					final Symbol _symbol_end = _symbols[offset + 5];
					final Access end = (Access) _symbol_end.value;
					 return new ParTypeAccess(n, l).qualifiesAccess(end);
			}
			case 458: // class_or_interface_type = class_or_interface.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					 return n;
			}
			case 459: // class_or_interface_type = class_or_interface.n LT.LT type_argument_list_1.l
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					 return new ParTypeAccess(n, l);
			}
			case 460: // array_type = class_or_interface.t LT.LT type_argument_list_1.l DOT.DOT name.n dims.d
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					final Symbol DOT = _symbols[offset + 4];
					final Symbol _symbol_n = _symbols[offset + 5];
					final Access n = (Access) _symbol_n.value;
					final Symbol _symbol_d = _symbols[offset + 6];
					final List d = (List) _symbol_d.value;
					 return new ParTypeAccess(t, l).qualifiesAccess(n).addArrayDims(d);
			}
			case 461: // array_type = class_or_interface.t LT.LT type_argument_list_1.l dims.d
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					final Symbol _symbol_d = _symbols[offset + 4];
					final List d = (List) _symbol_d.value;
					 return new ParTypeAccess(t, l).addArrayDims(d);
			}
			case 462: // type_arguments = LT.LT type_argument_list_1.l
			{
					final Symbol LT = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					 return l;
			}
			case 463: // wildcard = QUESTION.QUESTION
			{
					final Symbol QUESTION = _symbols[offset + 1];
					 return new Wildcard();
			}
			case 464: // wildcard = QUESTION.QUESTION EXTENDS.EXTENDS reference_type.t
			{
					final Symbol QUESTION = _symbols[offset + 1];
					final Symbol EXTENDS = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					 return new WildcardExtends(t);
			}
			case 465: // wildcard = QUESTION.QUESTION SUPER.SUPER reference_type.t
			{
					final Symbol QUESTION = _symbols[offset + 1];
					final Symbol SUPER = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					 return new WildcardSuper(t);
			}
			case 466: // wildcard_1 = QUESTION.QUESTION GT.GT
			{
					final Symbol QUESTION = _symbols[offset + 1];
					final Symbol GT = _symbols[offset + 2];
					 return new Wildcard();
			}
			case 467: // wildcard_1 = QUESTION.QUESTION EXTENDS.EXTENDS reference_type_1.t
			{
					final Symbol QUESTION = _symbols[offset + 1];
					final Symbol EXTENDS = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					 return new WildcardExtends(t);
			}
			case 468: // wildcard_1 = QUESTION.QUESTION SUPER.SUPER reference_type_1.t
			{
					final Symbol QUESTION = _symbols[offset + 1];
					final Symbol SUPER = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					 return new WildcardSuper(t);
			}
			case 469: // wildcard_2 = QUESTION.QUESTION RSHIFT.RSHIFT
			{
					final Symbol QUESTION = _symbols[offset + 1];
					final Symbol RSHIFT = _symbols[offset + 2];
					 return new Wildcard();
			}
			case 470: // wildcard_2 = QUESTION.QUESTION EXTENDS.EXTENDS reference_type_2.t
			{
					final Symbol QUESTION = _symbols[offset + 1];
					final Symbol EXTENDS = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					 return new WildcardExtends(t);
			}
			case 471: // wildcard_2 = QUESTION.QUESTION SUPER.SUPER reference_type_2.t
			{
					final Symbol QUESTION = _symbols[offset + 1];
					final Symbol SUPER = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					 return new WildcardSuper(t);
			}
			case 472: // wildcard_3 = QUESTION.QUESTION URSHIFT.URSHIFT
			{
					final Symbol QUESTION = _symbols[offset + 1];
					final Symbol URSHIFT = _symbols[offset + 2];
					 return new Wildcard();
			}
			case 473: // wildcard_3 = QUESTION.QUESTION EXTENDS.EXTENDS reference_type_3.t
			{
					final Symbol QUESTION = _symbols[offset + 1];
					final Symbol EXTENDS = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					 return new WildcardExtends(t);
			}
			case 474: // wildcard_3 = QUESTION.QUESTION SUPER.SUPER reference_type_3.t
			{
					final Symbol QUESTION = _symbols[offset + 1];
					final Symbol SUPER = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					 return new WildcardSuper(t);
			}
			case 475: // class_instance_creation_expression = NEW.NEW class_or_interface_type.t LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN subclass_body_opt.b
			{
					final Symbol NEW = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol LPAREN = _symbols[offset + 3];
					final Symbol _symbol_l = _symbols[offset + 4];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 5];
					final Symbol _symbol_b = _symbols[offset + 6];
					final Opt b = (Opt) _symbol_b.value;
					 return new ClassInstanceExpr(t, l, b);
			}
			case 476: // class_instance_creation_expression = NEW.NEW type_arguments.a class_or_interface_type.t LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN subclass_body_opt.b
			{
					final Symbol NEW = _symbols[offset + 1];
					final Symbol _symbol_a = _symbols[offset + 2];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					final Symbol LPAREN = _symbols[offset + 4];
					final Symbol _symbol_l = _symbols[offset + 5];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 6];
					final Symbol _symbol_b = _symbols[offset + 7];
					final Opt b = (Opt) _symbol_b.value;
					 return new ParClassInstanceExpr(t, l, b, a);
			}
			case 477: // class_instance_creation_expression = primary.n DOT.DOT NEW.NEW simple_name.id LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN subclass_body_opt.b
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Expr n = (Expr) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol NEW = _symbols[offset + 3];
					final Symbol _symbol_id = _symbols[offset + 4];
					final Access id = (Access) _symbol_id.value;
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_l = _symbols[offset + 6];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 7];
					final Symbol _symbol_b = _symbols[offset + 8];
					final Opt b = (Opt) _symbol_b.value;
					 ClassInstanceExpr e = new ClassInstanceExpr(id, l, b); 
        e.setStart(NEW.getStart());
        e.setEnd(RPAREN.getEnd());
        return n.qualifiesAccess(e);
			}
			case 478: // class_instance_creation_expression = primary.n DOT.DOT NEW.NEW simple_name.id type_arguments.a LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN subclass_body_opt.b
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Expr n = (Expr) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol NEW = _symbols[offset + 3];
					final Symbol _symbol_id = _symbols[offset + 4];
					final Access id = (Access) _symbol_id.value;
					final Symbol _symbol_a = _symbols[offset + 5];
					final List a = (List) _symbol_a.value;
					final Symbol LPAREN = _symbols[offset + 6];
					final Symbol _symbol_l = _symbols[offset + 7];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 8];
					final Symbol _symbol_b = _symbols[offset + 9];
					final Opt b = (Opt) _symbol_b.value;
					 ClassInstanceExpr e = new ClassInstanceExpr(new ParTypeAccess(id, a), l, b); 
        e.setStart(NEW.getStart());
        e.setEnd(RPAREN.getEnd());
        return n.qualifiesAccess(e);
			}
			case 479: // class_instance_creation_expression = primary.n DOT.DOT NEW.NEW type_arguments.ca simple_name.id LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN subclass_body_opt.b
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Expr n = (Expr) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol NEW = _symbols[offset + 3];
					final Symbol _symbol_ca = _symbols[offset + 4];
					final List ca = (List) _symbol_ca.value;
					final Symbol _symbol_id = _symbols[offset + 5];
					final Access id = (Access) _symbol_id.value;
					final Symbol LPAREN = _symbols[offset + 6];
					final Symbol _symbol_l = _symbols[offset + 7];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 8];
					final Symbol _symbol_b = _symbols[offset + 9];
					final Opt b = (Opt) _symbol_b.value;
					 return n.qualifiesAccess(new ParClassInstanceExpr(id, l, b, ca));
			}
			case 480: // class_instance_creation_expression = primary.n DOT.DOT NEW.NEW type_arguments.ca simple_name.id type_arguments.ta LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN subclass_body_opt.b
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Expr n = (Expr) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol NEW = _symbols[offset + 3];
					final Symbol _symbol_ca = _symbols[offset + 4];
					final List ca = (List) _symbol_ca.value;
					final Symbol _symbol_id = _symbols[offset + 5];
					final Access id = (Access) _symbol_id.value;
					final Symbol _symbol_ta = _symbols[offset + 6];
					final List ta = (List) _symbol_ta.value;
					final Symbol LPAREN = _symbols[offset + 7];
					final Symbol _symbol_l = _symbols[offset + 8];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 9];
					final Symbol _symbol_b = _symbols[offset + 10];
					final Opt b = (Opt) _symbol_b.value;
					 return n.qualifiesAccess(new ParClassInstanceExpr(new ParTypeAccess(id, ta), l, b, ca));
			}
			case 481: // class_instance_creation_expression = name.n DOT.DOT NEW.NEW simple_name.id LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN subclass_body_opt.b
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol NEW = _symbols[offset + 3];
					final Symbol _symbol_id = _symbols[offset + 4];
					final Access id = (Access) _symbol_id.value;
					final Symbol LPAREN = _symbols[offset + 5];
					final Symbol _symbol_l = _symbols[offset + 6];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 7];
					final Symbol _symbol_b = _symbols[offset + 8];
					final Opt b = (Opt) _symbol_b.value;
					 ClassInstanceExpr e = new ClassInstanceExpr(id, l, b); 
        e.setStart(NEW.getStart());
        e.setEnd(RPAREN.getEnd());
        return n.qualifiesAccess(e);
			}
			case 482: // class_instance_creation_expression = name.n DOT.DOT NEW.NEW simple_name.id type_arguments.a LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN subclass_body_opt.b
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol NEW = _symbols[offset + 3];
					final Symbol _symbol_id = _symbols[offset + 4];
					final Access id = (Access) _symbol_id.value;
					final Symbol _symbol_a = _symbols[offset + 5];
					final List a = (List) _symbol_a.value;
					final Symbol LPAREN = _symbols[offset + 6];
					final Symbol _symbol_l = _symbols[offset + 7];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 8];
					final Symbol _symbol_b = _symbols[offset + 9];
					final Opt b = (Opt) _symbol_b.value;
					 ClassInstanceExpr e = new ClassInstanceExpr(new ParTypeAccess(id, a), l, b); 
        e.setStart(NEW.getStart());
        e.setEnd(RPAREN.getEnd());
        return n.qualifiesAccess(e);
			}
			case 483: // class_instance_creation_expression = name.n DOT.DOT NEW.NEW type_arguments.ca simple_name.id LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN subclass_body_opt.b
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol NEW = _symbols[offset + 3];
					final Symbol _symbol_ca = _symbols[offset + 4];
					final List ca = (List) _symbol_ca.value;
					final Symbol _symbol_id = _symbols[offset + 5];
					final Access id = (Access) _symbol_id.value;
					final Symbol LPAREN = _symbols[offset + 6];
					final Symbol _symbol_l = _symbols[offset + 7];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 8];
					final Symbol _symbol_b = _symbols[offset + 9];
					final Opt b = (Opt) _symbol_b.value;
					 return n.qualifiesAccess(new ParClassInstanceExpr(id, l, b, ca));
			}
			case 484: // class_instance_creation_expression = name.n DOT.DOT NEW.NEW type_arguments.ca simple_name.id type_arguments.ta LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN subclass_body_opt.b
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol NEW = _symbols[offset + 3];
					final Symbol _symbol_ca = _symbols[offset + 4];
					final List ca = (List) _symbol_ca.value;
					final Symbol _symbol_id = _symbols[offset + 5];
					final Access id = (Access) _symbol_id.value;
					final Symbol _symbol_ta = _symbols[offset + 6];
					final List ta = (List) _symbol_ta.value;
					final Symbol LPAREN = _symbols[offset + 7];
					final Symbol _symbol_l = _symbols[offset + 8];
					final List l = (List) _symbol_l.value;
					final Symbol RPAREN = _symbols[offset + 9];
					final Symbol _symbol_b = _symbols[offset + 10];
					final Opt b = (Opt) _symbol_b.value;
					 return n.qualifiesAccess(new ParClassInstanceExpr(new ParTypeAccess(id, ta), l, b, ca));
			}
			case 485: // type_argument_list = type_argument.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Access a = (Access) _symbol_a.value;
					 return new List().add(a);
			}
			case 486: // type_argument_list = type_argument_list.l COMMA.COMMA type_argument.a
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_a = _symbols[offset + 3];
					final Access a = (Access) _symbol_a.value;
					 return l.add(a);
			}
			case 487: // type_argument_list_1 = type_argument_1.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Access a = (Access) _symbol_a.value;
					 return new List().add(a);
			}
			case 488: // type_argument_list_1 = type_argument_list.l COMMA.COMMA type_argument_1.a
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_a = _symbols[offset + 3];
					final Access a = (Access) _symbol_a.value;
					 return l.add(a);
			}
			case 489: // type_argument_list_2 = type_argument_2.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Access a = (Access) _symbol_a.value;
					 return new List().add(a);
			}
			case 490: // type_argument_list_2 = type_argument_list.l COMMA.COMMA type_argument_2.a
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_a = _symbols[offset + 3];
					final Access a = (Access) _symbol_a.value;
					 return l.add(a);
			}
			case 491: // type_argument_list_3 = type_argument_3.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Access a = (Access) _symbol_a.value;
					 return new List().add(a);
			}
			case 492: // type_argument_list_3 = type_argument_list.l COMMA.COMMA type_argument_3.a
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_a = _symbols[offset + 3];
					final Access a = (Access) _symbol_a.value;
					 return l.add(a);
			}
			case 493: // type_argument = reference_type.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					 return t;
			}
			case 494: // type_argument = wildcard.w
			{
					final Symbol _symbol_w = _symbols[offset + 1];
					final Access w = (Access) _symbol_w.value;
					 return w;
			}
			case 495: // type_argument_1 = reference_type_1.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					 return t;
			}
			case 496: // type_argument_1 = wildcard_1.w
			{
					final Symbol _symbol_w = _symbols[offset + 1];
					final Access w = (Access) _symbol_w.value;
					 return w;
			}
			case 497: // type_argument_2 = reference_type_2.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					 return t;
			}
			case 498: // type_argument_2 = wildcard_2.w
			{
					final Symbol _symbol_w = _symbols[offset + 1];
					final Access w = (Access) _symbol_w.value;
					 return w;
			}
			case 499: // type_argument_3 = reference_type_3.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					 return t;
			}
			case 500: // type_argument_3 = wildcard_3.w
			{
					final Symbol _symbol_w = _symbols[offset + 1];
					final Access w = (Access) _symbol_w.value;
					 return w;
			}
			case 501: // reference_type_1 = reference_type.t GT.GT
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol GT = _symbols[offset + 2];
					 return t;
			}
			case 502: // reference_type_1 = class_or_interface.t LT.LT type_argument_list_2.l
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					 return new ParTypeAccess(t, l);
			}
			case 503: // reference_type_2 = reference_type.t RSHIFT.RSHIFT
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol RSHIFT = _symbols[offset + 2];
					 return t;
			}
			case 504: // reference_type_2 = class_or_interface.t LT.LT type_argument_list_3.l
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					 return new ParTypeAccess(t, l);
			}
			case 505: // reference_type_3 = reference_type.t URSHIFT.URSHIFT
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol URSHIFT = _symbols[offset + 2];
					 return t;
			}
			case 506: // cast_expression = LPAREN.LPAREN name.n LT.LT type_argument_list_1.a RPAREN.RPAREN unary_expression_not_plus_minus.e
			{
					final Symbol LPAREN = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final Access n = (Access) _symbol_n.value;
					final Symbol LT = _symbols[offset + 3];
					final Symbol _symbol_a = _symbols[offset + 4];
					final List a = (List) _symbol_a.value;
					final Symbol RPAREN = _symbols[offset + 5];
					final Symbol _symbol_e = _symbols[offset + 6];
					final Expr e = (Expr) _symbol_e.value;
					 return new CastExpr(new ParTypeAccess(n, a).addArrayDims(new List()), e);
			}
			case 507: // cast_expression = LPAREN.LPAREN name.n LT.LT type_argument_list_1.a dims.d RPAREN.RPAREN unary_expression_not_plus_minus.e
			{
					final Symbol LPAREN = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final Access n = (Access) _symbol_n.value;
					final Symbol LT = _symbols[offset + 3];
					final Symbol _symbol_a = _symbols[offset + 4];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_d = _symbols[offset + 5];
					final List d = (List) _symbol_d.value;
					final Symbol RPAREN = _symbols[offset + 6];
					final Symbol _symbol_e = _symbols[offset + 7];
					final Expr e = (Expr) _symbol_e.value;
					 return new CastExpr(new ParTypeAccess(n, a).addArrayDims(d), e);
			}
			case 508: // cast_expression = LPAREN.LPAREN name.n LT.LT type_argument_list_1.a DOT.DOT class_or_interface_type.t RPAREN.RPAREN unary_expression_not_plus_minus.e
			{
					final Symbol LPAREN = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final Access n = (Access) _symbol_n.value;
					final Symbol LT = _symbols[offset + 3];
					final Symbol _symbol_a = _symbols[offset + 4];
					final List a = (List) _symbol_a.value;
					final Symbol DOT = _symbols[offset + 5];
					final Symbol _symbol_t = _symbols[offset + 6];
					final Access t = (Access) _symbol_t.value;
					final Symbol RPAREN = _symbols[offset + 7];
					final Symbol _symbol_e = _symbols[offset + 8];
					final Expr e = (Expr) _symbol_e.value;
					 return new CastExpr(new ParTypeAccess(n, a).qualifiesAccess(t).addArrayDims(new List()), e);
			}
			case 509: // cast_expression = LPAREN.LPAREN name.n LT.LT type_argument_list_1.a DOT.DOT class_or_interface_type.t dims.d RPAREN.RPAREN unary_expression_not_plus_minus.e
			{
					final Symbol LPAREN = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final Access n = (Access) _symbol_n.value;
					final Symbol LT = _symbols[offset + 3];
					final Symbol _symbol_a = _symbols[offset + 4];
					final List a = (List) _symbol_a.value;
					final Symbol DOT = _symbols[offset + 5];
					final Symbol _symbol_t = _symbols[offset + 6];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 7];
					final List d = (List) _symbol_d.value;
					final Symbol RPAREN = _symbols[offset + 8];
					final Symbol _symbol_e = _symbols[offset + 9];
					final Expr e = (Expr) _symbol_e.value;
					 return new CastExpr(new ParTypeAccess(n, a).qualifiesAccess(t).addArrayDims(d), e);
			}
			case 510: // type_parameters = LT.LT type_parameter_list_1.l
			{
					final Symbol LT = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					 return l;
			}
			case 511: // type_parameter_list = type_parameter_list.l COMMA.COMMA type_parameter.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_p = _symbols[offset + 3];
					final TypeVariable p = (TypeVariable) _symbol_p.value;
					 return l.add(p);
			}
			case 512: // type_parameter_list = type_parameter.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final TypeVariable p = (TypeVariable) _symbol_p.value;
					 return new List().add(p);
			}
			case 513: // type_parameter_list_1 = type_parameter_1.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final TypeVariable p = (TypeVariable) _symbol_p.value;
					 return new List().add(p);
			}
			case 514: // type_parameter_list_1 = type_parameter_list.l COMMA.COMMA type_parameter_1.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final List l = (List) _symbol_l.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_p = _symbols[offset + 3];
					final TypeVariable p = (TypeVariable) _symbol_p.value;
					 return l.add(p);
			}
			case 515: // type_parameter = IDENTIFIER.IDENTIFIER
			{
					final Symbol IDENTIFIER = _symbols[offset + 1];
					 return new TypeVariable(new Modifiers(), IDENTIFIER, new List(), new List());
			}
			case 516: // type_parameter = IDENTIFIER.IDENTIFIER type_bound.l
			{
					final Symbol IDENTIFIER = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					 return new TypeVariable(new Modifiers(), IDENTIFIER, new List(), l);
			}
			case 517: // type_parameter_1 = IDENTIFIER.IDENTIFIER GT.GT
			{
					final Symbol IDENTIFIER = _symbols[offset + 1];
					final Symbol GT = _symbols[offset + 2];
					 return new TypeVariable(new Modifiers(), IDENTIFIER, new List(), new List());
			}
			case 518: // type_parameter_1 = IDENTIFIER.IDENTIFIER type_bound_1.l
			{
					final Symbol IDENTIFIER = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					 return new TypeVariable(new Modifiers(), IDENTIFIER, new List(), l);
			}
			case 519: // type_bound = EXTENDS.EXTENDS reference_type.t
			{
					final Symbol EXTENDS = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					 return new List().add(t);
			}
			case 520: // type_bound = EXTENDS.EXTENDS reference_type.t additional_bound_list.l
			{
					final Symbol EXTENDS = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					 l.insertChild(t,0); return l;
			}
			case 521: // type_bound_1 = EXTENDS.EXTENDS reference_type_1.t
			{
					final Symbol EXTENDS = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					 return new List().add(t);
			}
			case 522: // type_bound_1 = EXTENDS.EXTENDS reference_type.t additional_bound_list_1.l
			{
					final Symbol EXTENDS = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final List l = (List) _symbol_l.value;
					 l.insertChild(t,0); return l;
			}
			case 523: // additional_bound_list = additional_bound.b additional_bound_list.l
			{
					final Symbol _symbol_b = _symbols[offset + 1];
					final Access b = (Access) _symbol_b.value;
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					 l.insertChild(b,0); return l;
			}
			case 524: // additional_bound_list = additional_bound.b
			{
					final Symbol _symbol_b = _symbols[offset + 1];
					final Access b = (Access) _symbol_b.value;
					 return new List().add(b);
			}
			case 525: // additional_bound_list_1 = additional_bound.b additional_bound_list_1.l
			{
					final Symbol _symbol_b = _symbols[offset + 1];
					final Access b = (Access) _symbol_b.value;
					final Symbol _symbol_l = _symbols[offset + 2];
					final List l = (List) _symbol_l.value;
					 l.insertChild(b,0); return l;
			}
			case 526: // additional_bound_list_1 = additional_bound_1.b
			{
					final Symbol _symbol_b = _symbols[offset + 1];
					final Access b = (Access) _symbol_b.value;
					 return new List().add(b);
			}
			case 527: // additional_bound = AND.AND interface_type.t
			{
					final Symbol AND = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					 return t;
			}
			case 528: // additional_bound_1 = AND.AND reference_type_1.t
			{
					final Symbol AND = _symbols[offset + 1];
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					 return t;
			}
			case 529: // import_declaration = single_static_import_declaration.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ImportDecl s = (ImportDecl) _symbol_s.value;
					 return s;
			}
			case 530: // import_declaration = static_import_on_demand_declaration.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final ImportDecl t = (ImportDecl) _symbol_t.value;
					 return t;
			}
			case 531: // single_static_import_declaration = IMPORT.IMPORT STATIC.STATIC name.n DOT.DOT IDENTIFIER.IDENTIFIER SEMICOLON.SEMICOLON
			{
					final Symbol IMPORT = _symbols[offset + 1];
					final Symbol STATIC = _symbols[offset + 2];
					final Symbol _symbol_n = _symbols[offset + 3];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 4];
					final Symbol IDENTIFIER = _symbols[offset + 5];
					final Symbol SEMICOLON = _symbols[offset + 6];
					 return new SingleStaticImportDecl(n, IDENTIFIER);
			}
			case 532: // static_import_on_demand_declaration = IMPORT.IMPORT STATIC.STATIC name.n DOT.DOT MULT.MULT SEMICOLON.SEMICOLON
			{
					final Symbol IMPORT = _symbols[offset + 1];
					final Symbol STATIC = _symbols[offset + 2];
					final Symbol _symbol_n = _symbols[offset + 3];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 4];
					final Symbol MULT = _symbols[offset + 5];
					final Symbol SEMICOLON = _symbols[offset + 6];
					 return new StaticImportOnDemandDecl(n);
			}
			case 533: // formal_parameter = type.t ELLIPSIS.ELLIPSIS IDENTIFIER.IDENTIFIER dims_opt.d
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Access t = (Access) _symbol_t.value;
					final Symbol ELLIPSIS = _symbols[offset + 2];
					final Symbol IDENTIFIER = _symbols[offset + 3];
					final Symbol _symbol_d = _symbols[offset + 4];
					final List d = (List) _symbol_d.value;
					 return new VariableArityParameterDeclaration(new Modifiers(new List()), t.addArrayDims(d), IDENTIFIER);
			}
			case 534: // formal_parameter = modifiers.m type.t ELLIPSIS.ELLIPSIS IDENTIFIER.IDENTIFIER dims_opt.d
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final List m = (List) _symbol_m.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final Access t = (Access) _symbol_t.value;
					final Symbol ELLIPSIS = _symbols[offset + 3];
					final Symbol IDENTIFIER = _symbols[offset + 4];
					final Symbol _symbol_d = _symbols[offset + 5];
					final List d = (List) _symbol_d.value;
					 return new VariableArityParameterDeclaration(new Modifiers(m), t.addArrayDims(d), IDENTIFIER);
			}
			case 535: // primary_no_new_array = literal.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final Expr l = (Expr) _symbol_l.value;
					 return l;
			}
			case 536: // primary_no_new_array = primitive_type.n DOT.DOT class_literal.c
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final ClassAccess c = (ClassAccess) _symbol_c.value;
					 return n.addArrayDims(new List()).qualifiesAccess(c);
			}
			case 537: // primary_no_new_array = primitive_type.n dims.d DOT.DOT class_literal.c
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final List d = (List) _symbol_d.value;
					final Symbol DOT = _symbols[offset + 3];
					final Symbol _symbol_c = _symbols[offset + 4];
					final ClassAccess c = (ClassAccess) _symbol_c.value;
					 return n.addArrayDims(d).qualifiesAccess(c);
			}
			case 538: // primary_no_new_array = name.n DOT.DOT class_literal.c
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final ClassAccess c = (ClassAccess) _symbol_c.value;
					 return n.addArrayDims(new List()).qualifiesAccess(c);
			}
			case 539: // primary_no_new_array = name.n dims.d DOT.DOT class_literal.c
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final List d = (List) _symbol_d.value;
					final Symbol DOT = _symbols[offset + 3];
					final Symbol _symbol_c = _symbols[offset + 4];
					final ClassAccess c = (ClassAccess) _symbol_c.value;
					 return n.addArrayDims(d).qualifiesAccess(c);
			}
			case 540: // primary_no_new_array = VOID.VOID DOT.DOT class_literal.c
			{
					final Symbol VOID = _symbols[offset + 1];
					final Symbol DOT = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final ClassAccess c = (ClassAccess) _symbol_c.value;
					 PrimitiveTypeAccess v = new PrimitiveTypeAccess("void");
                                                  v.setStart(VOID.getStart());
                                                  v.setEnd(VOID.getEnd());
                                                  return v.qualifiesAccess(c);
			}
			case 541: // primary_no_new_array = THIS.THIS
			{
					final Symbol THIS = _symbols[offset + 1];
					 return new ThisAccess("this");
			}
			case 542: // primary_no_new_array = name.n DOT.DOT THIS.THIS
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Access n = (Access) _symbol_n.value;
					final Symbol DOT = _symbols[offset + 2];
					final Symbol THIS = _symbols[offset + 3];
					 ThisAccess t = new ThisAccess("this");
                                                  t.setStart(THIS.getStart()); t.setEnd(THIS.getEnd());
                                                  return n.qualifiesAccess(t);
			}
			case 543: // primary_no_new_array = LPAREN.LPAREN expression_nn.e RPAREN.RPAREN
			{
					final Symbol LPAREN = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol RPAREN = _symbols[offset + 3];
					 return new ParExpr(e);
			}
			case 544: // primary_no_new_array = LPAREN.LPAREN name.n RPAREN.RPAREN
			{
					final Symbol LPAREN = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final Access n = (Access) _symbol_n.value;
					final Symbol RPAREN = _symbols[offset + 3];
					 return new ParExpr(n);
			}
			case 545: // primary_no_new_array = class_instance_creation_expression.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final Expr c = (Expr) _symbol_c.value;
					 return c;
			}
			case 546: // primary_no_new_array = field_access.f
			{
					final Symbol _symbol_f = _symbols[offset + 1];
					final Access f = (Access) _symbol_f.value;
					 return f;
			}
			case 547: // primary_no_new_array = method_invocation.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final Access m = (Access) _symbol_m.value;
					 return m;
			}
			case 548: // primary_no_new_array = array_access.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Access a = (Access) _symbol_a.value;
					 return a;
			}
			case 549: // postfix_expression_nn = primary.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expr p = (Expr) _symbol_p.value;
					 return p;
			}
			case 550: // postfix_expression_nn = postincrement_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 551: // postfix_expression_nn = postdecrement_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 552: // unary_expression_nn = preincrement_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 553: // unary_expression_nn = predecrement_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 554: // unary_expression_nn = PLUS.PLUS unary_expression.e
			{
					final Symbol PLUS = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return new PlusExpr(e);
			}
			case 555: // unary_expression_nn = MINUS.MINUS unary_expression.e
			{
					final Symbol MINUS = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return new MinusExpr(e);
			}
			case 556: // unary_expression_nn = unary_expression_not_plus_minus_nn.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 557: // unary_expression_not_plus_minus_nn = postfix_expression_nn.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 558: // unary_expression_not_plus_minus_nn = COMP.COMP unary_expression.e
			{
					final Symbol COMP = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return new BitNotExpr(e);
			}
			case 559: // unary_expression_not_plus_minus_nn = NOT.NOT unary_expression.e
			{
					final Symbol NOT = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return new LogNotExpr(e);
			}
			case 560: // unary_expression_not_plus_minus_nn = cast_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 561: // multiplicative_expression_nn = unary_expression_nn.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 562: // multiplicative_expression_nn = name.e1 MULT.MULT unary_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol MULT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new MulExpr(e1, e2);
			}
			case 563: // multiplicative_expression_nn = multiplicative_expression_nn.e1 MULT.MULT unary_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol MULT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new MulExpr(e1, e2);
			}
			case 564: // multiplicative_expression_nn = name.e1 DIV.DIV unary_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol DIV = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new DivExpr(e1, e2);
			}
			case 565: // multiplicative_expression_nn = multiplicative_expression_nn.e1 DIV.DIV unary_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol DIV = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new DivExpr(e1, e2);
			}
			case 566: // multiplicative_expression_nn = name.e1 MOD.MOD unary_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol MOD = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new ModExpr(e1, e2);
			}
			case 567: // multiplicative_expression_nn = multiplicative_expression_nn.e1 MOD.MOD unary_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol MOD = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new ModExpr(e1, e2);
			}
			case 568: // additive_expression_nn = multiplicative_expression_nn.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 569: // additive_expression_nn = name.e1 PLUS.PLUS multiplicative_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol PLUS = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new AddExpr(e1, e2);
			}
			case 570: // additive_expression_nn = additive_expression_nn.e1 PLUS.PLUS multiplicative_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol PLUS = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new AddExpr(e1, e2);
			}
			case 571: // additive_expression_nn = name.e1 MINUS.MINUS multiplicative_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol MINUS = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new SubExpr(e1, e2);
			}
			case 572: // additive_expression_nn = additive_expression_nn.e1 MINUS.MINUS multiplicative_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol MINUS = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new SubExpr(e1, e2);
			}
			case 573: // shift_expression_nn = additive_expression_nn.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 574: // shift_expression_nn = name.e1 LSHIFT.LSHIFT additive_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol LSHIFT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new LShiftExpr(e1, e2);
			}
			case 575: // shift_expression_nn = shift_expression_nn.e1 LSHIFT.LSHIFT additive_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol LSHIFT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new LShiftExpr(e1, e2);
			}
			case 576: // shift_expression_nn = name.e1 RSHIFT.RSHIFT additive_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol RSHIFT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new RShiftExpr(e1, e2);
			}
			case 577: // shift_expression_nn = shift_expression_nn.e1 RSHIFT.RSHIFT additive_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol RSHIFT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new RShiftExpr(e1, e2);
			}
			case 578: // shift_expression_nn = name.e1 URSHIFT.URSHIFT additive_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol URSHIFT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new URShiftExpr(e1, e2);
			}
			case 579: // shift_expression_nn = shift_expression_nn.e1 URSHIFT.URSHIFT additive_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol URSHIFT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new URShiftExpr(e1, e2);
			}
			case 580: // relational_expression_nn = shift_expression_nn.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 581: // relational_expression_nn = name.e1 LT.LT shift_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new LTExpr(e1, e2);
			}
			case 582: // relational_expression_nn = shift_expression_nn.e1 LT.LT shift_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol LT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new LTExpr(e1, e2);
			}
			case 583: // relational_expression_nn = name.e1 GT.GT shift_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol GT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new GTExpr(e1, e2);
			}
			case 584: // relational_expression_nn = shift_expression_nn.e1 GT.GT shift_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol GT = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new GTExpr(e1, e2);
			}
			case 585: // relational_expression_nn = name.e1 LTEQ.LTEQ shift_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol LTEQ = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new LEExpr(e1, e2);
			}
			case 586: // relational_expression_nn = relational_expression_nn.e1 LTEQ.LTEQ shift_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol LTEQ = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new LEExpr(e1, e2);
			}
			case 587: // relational_expression_nn = name.e1 GTEQ.GTEQ shift_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol GTEQ = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new GEExpr(e1, e2);
			}
			case 588: // relational_expression_nn = relational_expression_nn.e1 GTEQ.GTEQ shift_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol GTEQ = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new GEExpr(e1, e2);
			}
			case 589: // relational_expression_nn = name.e INSTANCEOF.INSTANCEOF reference_type.t
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Access e = (Access) _symbol_e.value;
					final Symbol INSTANCEOF = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					 return new InstanceOfExpr(e, t);
			}
			case 590: // relational_expression_nn = relational_expression_nn.e INSTANCEOF.INSTANCEOF reference_type.t
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					final Symbol INSTANCEOF = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final Access t = (Access) _symbol_t.value;
					 return new InstanceOfExpr(e, t);
			}
			case 591: // equality_expression_nn = relational_expression_nn.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 592: // equality_expression_nn = name.e1 EQEQ.EQEQ relational_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol EQEQ = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new EQExpr(e1, e2);
			}
			case 593: // equality_expression_nn = equality_expression_nn.e1 EQEQ.EQEQ relational_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol EQEQ = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new EQExpr(e1, e2);
			}
			case 594: // equality_expression_nn = name.e1 NOTEQ.NOTEQ relational_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol NOTEQ = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new NEExpr(e1, e2);
			}
			case 595: // equality_expression_nn = equality_expression_nn.e1 NOTEQ.NOTEQ relational_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol NOTEQ = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new NEExpr(e1, e2);
			}
			case 596: // and_expression_nn = equality_expression_nn.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 597: // and_expression_nn = name.e1 AND.AND equality_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol AND = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new AndBitwiseExpr(e1, e2);
			}
			case 598: // and_expression_nn = and_expression_nn.e1 AND.AND equality_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol AND = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new AndBitwiseExpr(e1, e2);
			}
			case 599: // exclusive_or_expression_nn = and_expression_nn.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 600: // exclusive_or_expression_nn = name.e1 XOR.XOR and_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol XOR = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new XorBitwiseExpr(e1, e2);
			}
			case 601: // exclusive_or_expression_nn = exclusive_or_expression_nn.e1 XOR.XOR and_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol XOR = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new XorBitwiseExpr(e1, e2);
			}
			case 602: // inclusive_or_expression_nn = exclusive_or_expression_nn.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 603: // inclusive_or_expression_nn = name.e1 OR.OR exclusive_or_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol OR = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new OrBitwiseExpr(e1, e2);
			}
			case 604: // inclusive_or_expression_nn = inclusive_or_expression_nn.e1 OR.OR exclusive_or_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol OR = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new OrBitwiseExpr(e1, e2);
			}
			case 605: // conditional_and_expression_nn = inclusive_or_expression_nn.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 606: // conditional_and_expression_nn = name.e1 ANDAND.ANDAND inclusive_or_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol ANDAND = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new AndLogicalExpr(e1, e2);
			}
			case 607: // conditional_and_expression_nn = conditional_and_expression_nn.e1 ANDAND.ANDAND inclusive_or_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol ANDAND = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new AndLogicalExpr(e1, e2);
			}
			case 608: // conditional_or_expression_nn = conditional_and_expression_nn.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
			}
			case 609: // conditional_or_expression_nn = name.e1 OROR.OROR conditional_and_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Access e1 = (Access) _symbol_e1.value;
					final Symbol OROR = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new OrLogicalExpr(e1, e2);
			}
			case 610: // conditional_or_expression_nn = conditional_or_expression_nn.e1 OROR.OROR conditional_and_expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol OROR = _symbols[offset + 2];
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new OrLogicalExpr(e1, e2);
			}
			case 611: // conditional_expression_nn = conditional_or_expression_nn.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final Expr c = (Expr) _symbol_c.value;
					 return c;
			}
			case 612: // conditional_expression_nn = name.c QUESTION.QUESTION expression.e1 COLON.COLON conditional_expression.e2
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final Access c = (Access) _symbol_c.value;
					final Symbol QUESTION = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol COLON = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new ConditionalExpr(c, e1, e2);
			}
			case 613: // conditional_expression_nn = conditional_or_expression_nn.c QUESTION.QUESTION expression.e1 COLON.COLON conditional_expression.e2
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final Expr c = (Expr) _symbol_c.value;
					final Symbol QUESTION = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final Expr e1 = (Expr) _symbol_e1.value;
					final Symbol COLON = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final Expr e2 = (Expr) _symbol_e2.value;
					 return new ConditionalExpr(c, e1, e2);
			}
			case 614: // assignment_expression_nn = conditional_expression_nn.c
			{
					final Symbol _symbol_c = _symbols[offset + 1];
					final Expr c = (Expr) _symbol_c.value;
					 return c;
			}
			case 615: // assignment_expression_nn = assignment.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
			}
			case 617: // annotation_type_element_declarations_opt = 
			{
					 return new List();
			}
			case 618: // annotation_type_element_declarations_opt = annotation_type_element_declarations.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 return n;
			}
			case 619: // default_value_opt = 
			{
					 return new Opt();
			}
			case 620: // default_value_opt = default_value.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final ElementValue n = (ElementValue) _symbol_n.value;
					 return new Opt(n);
			}
			case 621: // block_statements_opt = 
			{
					 return new List();
			}
			case 622: // block_statements_opt = block_statements.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 return n;
			}
			case 623: // expression_opt = 
			{
					 return new Opt();
			}
			case 624: // expression_opt = expression.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Expr n = (Expr) _symbol_n.value;
					 return new Opt(n);
			}
			case 625: // interface_member_declarations_opt = 
			{
					 return new List();
			}
			case 626: // interface_member_declarations_opt = interface_member_declarations.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 return n;
			}
			case 627: // argument_list_opt = 
			{
					 return new List();
			}
			case 628: // argument_list_opt = argument_list.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 return n;
			}
			case 629: // subclass_body_opt = 
			{
					 return new Opt();
			}
			case 630: // subclass_body_opt = subclass_body.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Opt n = (Opt) _symbol_n.value;
					 return n;
			}
			case 631: // dims_opt = 
			{
					 return new List();
			}
			case 632: // dims_opt = dims.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 return n;
			}
			case 633: // class_body_declarations_opt = 
			{
					 return new List();
			}
			case 634: // class_body_declarations_opt = class_body_declarations.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 return n;
			}
			case 635: // element_value_pairs_opt = 
			{
					 return new List();
			}
			case 636: // element_value_pairs_opt = element_value_pairs.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 return n;
			}
			case 637: // throws_opt = 
			{
					 return new List();
			}
			case 638: // throws_opt = throws.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 return n;
			}
			case 639: // for_init_opt = 
			{
					 return new List();
			}
			case 640: // for_init_opt = for_init.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 return n;
			}
			case 641: // formal_parameter_list_opt = 
			{
					 return new List();
			}
			case 642: // formal_parameter_list_opt = formal_parameter_list.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 return n;
			}
			case 643: // for_update_opt = 
			{
					 return new List();
			}
			case 644: // for_update_opt = for_update.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 return n;
			}
			case 353: // annotation_type_element_declaration = constant_declaration.constant_declaration
			case 360: // modifier = annotation.annotation
			case 361: // annotation = normal_annotation.normal_annotation
			case 362: // annotation = marker_annotation.marker_annotation
			case 363: // annotation = single_element_annotation.single_element_annotation
			case 616: // expression_nn = assignment_expression_nn.assignment_expression_nn
			{
				return _symbols[offset + 1];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
