/* The following code was generated by JFlex 1.4 on 1/16/14 4:59 PM */

package scanner;

import beaver.Symbol;
import beaver.Scanner;
import parser.JavaParser.Terminals;
import java.io.*;
import java.util.HashMap;
import AST.FileRange;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4
 * on 1/16/14 4:59 PM from the specification file
 * <tt>/Users/melmongiovi/Documents/workspace6/jrrt_newversion/scanner/JavaScanner.flex</tt>
 */
public final class JavaScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\1\1\0\1\3\1\2\14\7\1\105\1\7\4\0"+
    "\1\3\1\73\1\21\1\0\1\6\1\103\1\77\1\20\1\60\1\61"+
    "\1\5\1\101\1\67\1\17\1\15\1\4\1\10\3\23\4\14\2\13"+
    "\1\76\1\66\1\72\1\70\1\71\1\75\1\104\3\12\1\57\1\16"+
    "\1\56\5\6\1\55\3\6\1\24\7\6\1\11\2\6\1\64\1\22"+
    "\1\65\1\102\1\6\1\0\1\25\1\32\1\33\1\44\1\27\1\45"+
    "\1\47\1\41\1\42\1\6\1\37\1\35\1\50\1\36\1\34\1\51"+
    "\1\6\1\30\1\26\1\31\1\43\1\52\1\53\1\46\1\40\1\54"+
    "\1\62\1\100\1\63\1\74\41\7\2\0\4\6\4\0\1\6\2\0"+
    "\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0"+
    "\u013f\6\31\0\162\6\4\0\14\6\16\0\5\6\11\0\1\6\21\0"+
    "\130\7\5\0\23\7\12\0\1\6\13\0\1\6\1\0\3\6\1\0"+
    "\1\6\1\0\24\6\1\0\54\6\1\0\46\6\1\0\5\6\4\0"+
    "\202\6\1\0\4\7\3\0\105\6\1\0\46\6\2\0\2\6\6\0"+
    "\20\6\41\0\46\6\2\0\1\6\7\0\47\6\11\0\21\7\1\0"+
    "\27\7\1\0\3\7\1\0\1\7\1\0\2\7\1\0\1\7\13\0"+
    "\33\6\5\0\3\6\15\0\4\7\14\0\6\7\13\0\32\6\5\0"+
    "\13\6\16\7\7\0\12\7\4\0\2\6\1\7\143\6\1\0\1\6"+
    "\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6"+
    "\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\3\6"+
    "\60\0\46\6\13\7\1\6\u014f\0\3\7\66\6\2\0\1\7\1\6"+
    "\20\7\2\0\1\6\4\7\3\0\12\6\2\7\2\0\12\7\21\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0"+
    "\3\7\11\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7"+
    "\4\6\15\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0"+
    "\5\7\4\0\2\7\2\0\3\7\13\0\4\6\1\0\1\6\7\0"+
    "\14\7\3\6\14\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7"+
    "\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0"+
    "\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6"+
    "\6\7\3\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0"+
    "\3\6\4\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6"+
    "\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6"+
    "\3\0\2\6\3\0\3\6\3\0\10\6\1\0\3\6\4\0\5\7"+
    "\3\0\3\7\1\0\4\7\11\0\1\7\17\0\11\7\11\0\1\6"+
    "\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6"+
    "\1\0\5\6\4\0\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\11\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6"+
    "\4\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\20\6\4\0\6\7\2\0\3\7\1\0\4\7\11\0\1\7"+
    "\10\0\2\6\4\0\12\7\22\0\2\7\1\0\22\6\3\0\30\6"+
    "\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7"+
    "\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6"+
    "\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6"+
    "\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6"+
    "\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6"+
    "\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6"+
    "\1\0\6\7\2\0\12\7\2\0\2\6\42\0\1\6\27\0\2\7"+
    "\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7"+
    "\10\6\1\0\42\6\6\0\24\7\1\0\2\7\4\6\4\0\10\7"+
    "\1\0\44\7\11\0\1\7\71\0\42\6\1\0\5\6\1\0\2\6"+
    "\1\0\7\7\3\0\4\7\6\0\12\7\6\0\6\6\4\7\106\0"+
    "\46\6\12\0\51\6\7\0\132\6\5\0\104\6\5\0\122\6\6\0"+
    "\7\6\1\0\77\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\47\6\1\0\1\6\1\0\4\6\2\0"+
    "\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\7\6\1\0\27\6\1\0\37\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\47\6\1\0\23\6\16\0"+
    "\11\7\56\0\125\6\14\0\u026c\6\2\0\10\6\12\0\32\6\5\0"+
    "\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6"+
    "\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7"+
    "\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7"+
    "\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\126\0"+
    "\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6"+
    "\u038b\0\154\6\224\0\234\6\4\0\132\6\6\0\26\6\2\0\6\6"+
    "\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6"+
    "\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6"+
    "\5\0\3\6\1\0\7\6\17\0\4\7\32\0\5\7\20\0\2\6"+
    "\23\0\1\6\13\0\4\7\6\0\6\7\1\0\1\6\15\0\1\6"+
    "\40\0\22\6\36\0\15\7\4\0\1\7\3\0\6\7\27\0\1\6"+
    "\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\3\6\1\0\7\6"+
    "\3\0\3\6\5\0\5\6\26\0\44\6\u0e81\0\3\6\31\0\11\6"+
    "\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0"+
    "\3\6\1\0\137\6\5\0\50\6\4\0\136\6\21\0\30\6\70\0"+
    "\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\134\0"+
    "\u0800\6\u1900\0\u012e\6\2\0\73\6\225\0\7\6\14\0\5\6\5\0"+
    "\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\15\6\3\0\20\7\20\0\4\7\17\0\2\6\30\0"+
    "\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0"+
    "\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\12\0"+
    "\132\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0"+
    "\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\1\1\12\20\6\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\2\42\1\43\1\1\1\44"+
    "\1\0\1\45\1\46\1\7\2\0\1\47\1\0\1\50"+
    "\1\51\1\52\1\0\1\53\1\54\1\0\2\55\1\0"+
    "\31\6\1\56\2\6\1\57\12\6\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\2\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\2\44\1\0\1\110"+
    "\1\7\1\0\1\47\1\0\1\111\1\112\12\76\15\6"+
    "\1\113\15\6\1\114\2\6\1\115\4\6\1\116\12\6"+
    "\1\117\1\120\1\121\1\77\2\0\1\122\1\0\1\123"+
    "\1\124\1\125\1\126\1\127\1\130\1\131\1\132\10\6"+
    "\1\133\1\134\3\6\1\135\1\6\1\136\2\6\1\137"+
    "\1\140\4\6\1\141\1\142\1\6\1\143\10\6\1\144"+
    "\5\6\1\145\1\6\1\146\5\6\1\147\1\150\4\6"+
    "\1\151\1\152\1\6\1\153\1\6\1\154\7\6\1\155"+
    "\1\156\5\6\1\157\1\160\1\6\1\161\2\6\1\162"+
    "\1\6\1\163\1\6\1\164\2\6\1\165\2\6\1\166"+
    "\2\6\1\167\4\6\1\170\4\6\1\171\1\6\1\172"+
    "\4\6\1\173\1\174\1\175\1\6\1\176\1\6\1\177"+
    "\1\200\2\6\1\201\4\6\1\202\1\6\1\203\1\6"+
    "\1\204\1\6\1\205\1\6\1\206\1\207\1\6\1\210";

  private static int [] zzUnpackAction() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\214\0\322\0\214\0\u0118\0\u015e"+
    "\0\u01a4\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\214\0\u0348"+
    "\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578"+
    "\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\214"+
    "\0\214\0\214\0\214\0\214\0\214\0\214\0\214\0\u07a8"+
    "\0\u07ee\0\u0834\0\u087a\0\214\0\214\0\214\0\u08c0\0\u0906"+
    "\0\u094c\0\u0992\0\u09d8\0\214\0\214\0\u0a1e\0\214\0\u0a64"+
    "\0\214\0\u0aaa\0\u0af0\0\u0b36\0\214\0\214\0\u0b7c\0\u0bc2"+
    "\0\u0c08\0\u0c4e\0\u0c94\0\214\0\214\0\214\0\u0cda\0\214"+
    "\0\214\0\u0d20\0\214\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e"+
    "\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae"+
    "\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de"+
    "\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u01a4\0\u14c8"+
    "\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8"+
    "\0\u173e\0\u1784\0\u17ca\0\u1810\0\214\0\214\0\u1856\0\214"+
    "\0\u189c\0\214\0\214\0\214\0\214\0\214\0\214\0\214"+
    "\0\214\0\214\0\214\0\u18e2\0\u1928\0\214\0\214\0\214"+
    "\0\214\0\214\0\214\0\214\0\214\0\214\0\u196e\0\u19b4"+
    "\0\214\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\214\0\214\0\u1b12"+
    "\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42"+
    "\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72"+
    "\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u01a4\0\u215c"+
    "\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c"+
    "\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u01a4\0\u24ea\0\u2530\0\u2576"+
    "\0\u25bc\0\u2602\0\u2648\0\u268e\0\u01a4\0\u26d4\0\u271a\0\u2760"+
    "\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a\0\214"+
    "\0\u2990\0\214\0\214\0\u29d6\0\u1b58\0\214\0\u2a1c\0\214"+
    "\0\214\0\214\0\214\0\214\0\214\0\214\0\214\0\u2a62"+
    "\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u01a4"+
    "\0\u01a4\0\u2c92\0\u2cd8\0\u2d1e\0\u01a4\0\u2d64\0\u01a4\0\u2daa"+
    "\0\u2df0\0\u01a4\0\u01a4\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u01a4"+
    "\0\u01a4\0\u2f4e\0\u01a4\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac"+
    "\0\u30f2\0\u3138\0\u317e\0\u01a4\0\u31c4\0\u320a\0\u3250\0\u3296"+
    "\0\u32dc\0\u01a4\0\u3322\0\214\0\u3368\0\u33ae\0\u33f4\0\u343a"+
    "\0\u3480\0\u01a4\0\u01a4\0\u34c6\0\u350c\0\u3552\0\u3598\0\u35de"+
    "\0\u01a4\0\u3624\0\u01a4\0\u366a\0\u01a4\0\u36b0\0\u36f6\0\u373c"+
    "\0\u3782\0\u37c8\0\u380e\0\u3854\0\u01a4\0\u389a\0\u38e0\0\u3926"+
    "\0\u396c\0\u39b2\0\u39f8\0\u01a4\0\u01a4\0\u3a3e\0\u01a4\0\u3a84"+
    "\0\u3aca\0\u01a4\0\u3b10\0\u01a4\0\u3b56\0\u01a4\0\u3b9c\0\u3be2"+
    "\0\u01a4\0\u3c28\0\u3c6e\0\u01a4\0\u3cb4\0\u3cfa\0\u01a4\0\u3d40"+
    "\0\u3d86\0\u3dcc\0\u3e12\0\u01a4\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a"+
    "\0\u01a4\0\u3f70\0\u01a4\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u01a4"+
    "\0\u01a4\0\u01a4\0\u40ce\0\u01a4\0\u4114\0\u01a4\0\u01a4\0\u415a"+
    "\0\u41a0\0\u01a4\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u01a4\0\u42fe"+
    "\0\u01a4\0\u4344\0\u01a4\0\u438a\0\u01a4\0\u43d0\0\u01a4\0\u01a4"+
    "\0\u4416\0\u01a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\2\11\2\13\1\14\1\11\1\15\1\16\1\17"+
    "\1\3\1\13\1\11\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\11\1\27\1\30\3\11\1\31\1\11"+
    "\1\32\1\33\1\11\1\34\1\11\1\35\1\36\1\37"+
    "\4\11\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\16\66\1\71\1\72\63\66\107\0\1\4"+
    "\110\0\1\73\1\74\62\0\1\75\105\0\1\76\23\0"+
    "\7\11\1\0\1\11\4\0\35\11\25\0\1\11\10\0"+
    "\1\77\1\100\1\0\1\101\1\77\1\102\1\103\4\0"+
    "\1\77\3\0\1\103\5\0\1\104\6\0\1\105\1\106"+
    "\1\100\6\0\1\104\1\106\1\105\36\0\1\13\2\0"+
    "\2\13\1\102\1\103\4\0\1\13\3\0\1\103\5\0"+
    "\1\104\6\0\1\105\1\106\7\0\1\104\1\106\1\105"+
    "\36\0\1\102\2\0\2\102\1\107\5\0\1\102\101\0"+
    "\1\110\50\0\1\111\15\0\1\112\1\113\1\114\15\112"+
    "\1\0\1\112\1\115\63\112\6\0\7\11\1\0\1\11"+
    "\4\0\3\11\1\116\3\11\1\117\25\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\6\11\1\120\6\11"+
    "\1\121\1\122\1\11\1\123\7\11\1\124\4\11\25\0"+
    "\1\11\6\0\7\11\1\0\1\11\4\0\12\11\1\125"+
    "\1\126\7\11\1\127\11\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\4\11\1\130\30\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\5\11\1\131\10\11"+
    "\1\132\16\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\5\11\1\133\3\11\1\134\3\11\1\135\17\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\2\11"+
    "\1\136\6\11\1\137\1\140\3\11\1\141\16\11\25\0"+
    "\1\11\6\0\7\11\1\0\1\11\4\0\11\11\1\142"+
    "\23\11\25\0\1\11\6\0\7\11\1\0\1\11\4\0"+
    "\2\11\1\143\1\11\1\144\13\11\1\145\14\11\25\0"+
    "\1\11\6\0\7\11\1\0\1\11\4\0\13\11\1\146"+
    "\6\11\1\147\2\11\1\150\7\11\25\0\1\11\6\0"+
    "\7\11\1\0\1\11\4\0\4\11\1\151\4\11\1\152"+
    "\23\11\25\0\1\11\6\0\7\11\1\0\1\11\4\0"+
    "\2\11\1\153\6\11\1\154\1\155\4\11\1\156\15\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\11\11"+
    "\1\157\23\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\2\11\1\160\2\11\1\161\12\11\1\162\14\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\11\11"+
    "\1\163\23\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\16\11\1\164\16\11\25\0\1\11\70\0\1\165"+
    "\105\0\1\166\1\167\104\0\1\170\1\0\1\171\103\0"+
    "\1\172\105\0\1\173\6\0\1\174\76\0\1\175\7\0"+
    "\1\176\75\0\1\177\10\0\1\200\74\0\1\201\105\0"+
    "\1\202\15\0\1\66\2\0\16\66\2\0\63\66\1\0"+
    "\1\67\104\0\1\203\1\0\6\203\1\204\3\203\1\205"+
    "\3\203\1\206\1\207\1\210\1\204\4\203\1\211\1\212"+
    "\1\213\3\203\1\214\6\203\1\215\40\203\1\73\1\216"+
    "\1\217\103\73\5\74\1\220\100\74\10\0\1\77\2\0"+
    "\1\101\1\77\1\102\1\103\4\0\1\77\3\0\1\103"+
    "\5\0\1\221\6\0\1\105\1\106\7\0\1\221\1\106"+
    "\1\105\36\0\1\222\1\0\3\222\1\223\1\222\4\0"+
    "\1\222\1\0\1\222\1\0\1\222\2\0\2\222\10\0"+
    "\2\222\10\0\2\222\36\0\1\101\2\0\2\101\1\102"+
    "\1\103\4\0\1\101\3\0\1\103\14\0\1\105\1\106"+
    "\10\0\1\106\1\105\36\0\1\102\2\0\2\102\1\0"+
    "\1\103\4\0\1\102\3\0\1\103\14\0\1\105\1\106"+
    "\10\0\1\106\1\105\36\0\1\224\2\0\2\224\2\0"+
    "\1\225\3\0\1\224\55\0\1\225\21\0\1\226\110\0"+
    "\1\227\66\0\1\113\104\0\1\203\1\0\6\203\1\230"+
    "\3\203\1\231\3\203\1\232\1\233\1\234\1\230\4\203"+
    "\1\235\1\236\1\237\3\203\1\240\6\203\1\241\40\203"+
    "\6\0\7\11\1\0\1\11\4\0\3\11\1\242\31\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\3\11"+
    "\1\243\31\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\2\11\1\244\2\11\1\245\27\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\13\11\1\246\21\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\11\11"+
    "\1\247\23\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\26\11\1\250\6\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\17\11\1\251\15\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\3\11\1\252\31\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\20\11"+
    "\1\253\14\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\6\11\1\254\26\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\6\11\1\255\26\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\2\11\1\256\12\11"+
    "\1\257\2\11\1\260\14\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\5\11\1\261\11\11\1\262\15\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\4\11"+
    "\1\263\30\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\11\11\1\264\23\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\6\11\1\265\26\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\3\11\1\266\2\11"+
    "\1\267\26\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\13\11\1\270\21\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\2\11\1\271\32\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\2\11\1\272\32\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\13\11"+
    "\1\273\21\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\6\11\1\274\26\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\30\11\1\275\4\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\12\11\1\276\22\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\3\11"+
    "\1\277\2\11\1\300\26\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\26\11\1\301\6\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\22\11\1\302\12\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\20\11"+
    "\1\303\14\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\12\11\1\304\22\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\5\11\1\305\27\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\11\11\1\306\23\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\13\11"+
    "\1\307\21\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\6\11\1\310\26\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\10\11\1\311\24\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\11\11\1\312\5\11"+
    "\1\313\15\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\7\11\1\314\25\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\12\11\1\315\4\11\1\316\15\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\17\11"+
    "\1\317\15\11\25\0\1\11\70\0\1\320\1\321\104\0"+
    "\1\322\25\0\1\205\3\0\1\205\6\0\1\205\72\0"+
    "\1\323\3\0\1\323\6\0\1\323\63\0\1\216\104\0"+
    "\4\74\1\216\1\220\100\74\10\0\1\222\1\0\3\222"+
    "\1\324\1\222\4\0\1\222\1\103\1\222\1\0\1\222"+
    "\2\0\2\222\1\0\1\221\6\0\2\222\3\0\1\103"+
    "\3\0\1\221\2\222\36\0\1\324\1\0\3\324\1\0"+
    "\1\324\4\0\1\324\1\0\1\324\1\0\1\324\2\0"+
    "\2\324\10\0\2\324\10\0\2\324\36\0\1\224\2\0"+
    "\2\224\6\0\1\224\20\0\1\105\1\106\10\0\1\106"+
    "\1\105\36\0\1\224\2\0\2\224\6\0\1\224\72\0"+
    "\1\325\3\0\1\325\3\0\1\326\2\0\1\325\72\0"+
    "\1\327\3\0\1\327\3\0\1\326\2\0\1\327\102\0"+
    "\1\330\105\0\1\331\105\0\1\332\105\0\1\333\105\0"+
    "\1\334\105\0\1\335\105\0\1\336\105\0\1\337\73\0"+
    "\7\11\1\0\1\11\4\0\4\11\1\340\30\11\25\0"+
    "\1\11\6\0\7\11\1\0\1\11\4\0\6\11\1\341"+
    "\26\11\25\0\1\11\6\0\7\11\1\0\1\11\4\0"+
    "\6\11\1\342\26\11\25\0\1\11\6\0\7\11\1\0"+
    "\1\11\4\0\17\11\1\343\15\11\25\0\1\11\6\0"+
    "\7\11\1\0\1\11\4\0\10\11\1\344\24\11\25\0"+
    "\1\11\6\0\7\11\1\0\1\11\4\0\5\11\1\345"+
    "\27\11\25\0\1\11\6\0\7\11\1\0\1\11\4\0"+
    "\4\11\1\346\30\11\25\0\1\11\6\0\7\11\1\0"+
    "\1\11\4\0\6\11\1\347\26\11\25\0\1\11\6\0"+
    "\7\11\1\0\1\11\4\0\4\11\1\350\30\11\25\0"+
    "\1\11\6\0\7\11\1\0\1\11\4\0\25\11\1\351"+
    "\7\11\25\0\1\11\6\0\7\11\1\0\1\11\4\0"+
    "\4\11\1\352\30\11\25\0\1\11\6\0\7\11\1\0"+
    "\1\11\4\0\20\11\1\353\14\11\25\0\1\11\6\0"+
    "\7\11\1\0\1\11\4\0\13\11\1\354\21\11\25\0"+
    "\1\11\6\0\7\11\1\0\1\11\4\0\4\11\1\355"+
    "\30\11\25\0\1\11\6\0\7\11\1\0\1\11\4\0"+
    "\11\11\1\356\23\11\25\0\1\11\6\0\7\11\1\0"+
    "\1\11\4\0\3\11\1\357\31\11\25\0\1\11\6\0"+
    "\7\11\1\0\1\11\4\0\2\11\1\360\32\11\25\0"+
    "\1\11\6\0\7\11\1\0\1\11\4\0\12\11\1\361"+
    "\22\11\25\0\1\11\6\0\7\11\1\0\1\11\4\0"+
    "\4\11\1\362\30\11\25\0\1\11\6\0\7\11\1\0"+
    "\1\11\4\0\4\11\1\363\30\11\25\0\1\11\6\0"+
    "\7\11\1\0\1\11\4\0\10\11\1\364\24\11\25\0"+
    "\1\11\6\0\7\11\1\0\1\11\4\0\3\11\1\365"+
    "\2\11\1\366\26\11\25\0\1\11\6\0\7\11\1\0"+
    "\1\11\4\0\3\11\1\367\31\11\25\0\1\11\6\0"+
    "\7\11\1\0\1\11\4\0\5\11\1\370\27\11\25\0"+
    "\1\11\6\0\7\11\1\0\1\11\4\0\24\11\1\371"+
    "\10\11\25\0\1\11\6\0\7\11\1\0\1\11\4\0"+
    "\17\11\1\372\15\11\25\0\1\11\6\0\7\11\1\0"+
    "\1\11\4\0\12\11\1\373\22\11\25\0\1\11\6\0"+
    "\7\11\1\0\1\11\4\0\6\11\1\374\26\11\25\0"+
    "\1\11\6\0\7\11\1\0\1\11\4\0\4\11\1\375"+
    "\30\11\25\0\1\11\6\0\7\11\1\0\1\11\4\0"+
    "\11\11\1\376\1\377\22\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\2\11\1\u0100\32\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\7\11\1\u0101\25\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\3\11"+
    "\1\260\31\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\2\11\1\u0102\32\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\2\11\1\u0103\32\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\11\11\1\u0104\23\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\14\11"+
    "\1\u0105\20\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\6\11\1\u0106\26\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\27\11\1\u0107\5\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\12\11\1\u0108\22\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\2\11"+
    "\1\u0109\32\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\21\11\1\u010a\13\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\12\11\1\u010b\22\11\25\0\1\11"+
    "\70\0\1\u010c\25\0\1\324\1\0\3\324\1\0\1\324"+
    "\4\0\1\324\1\103\1\324\1\0\1\324\2\0\2\324"+
    "\10\0\2\324\3\0\1\103\4\0\2\324\46\0\1\326"+
    "\73\0\7\11\1\0\1\11\4\0\5\11\1\u010d\27\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\5\11"+
    "\1\u010e\27\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\17\11\1\u010f\15\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\10\11\1\u0110\24\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\16\11\1\u0111\16\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\6\11"+
    "\1\u0112\26\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\5\11\1\u0113\27\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\10\11\1\u0114\24\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\13\11\1\u0115\21\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\5\11"+
    "\1\u0116\27\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\3\11\1\u0117\31\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\30\11\1\u0118\4\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\14\11\1\u0119\20\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\4\11"+
    "\1\u011a\30\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\16\11\1\u011b\16\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\6\11\1\u0104\26\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\17\11\1\u011c\15\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\3\11"+
    "\1\u011d\31\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\27\11\1\u011e\5\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\2\11\1\u011f\32\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\5\11\1\u0120\27\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\5\11"+
    "\1\u0121\27\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\4\11\1\u0122\30\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\20\11\1\u0123\14\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\12\11\1\u0124\22\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\6\11"+
    "\1\u0125\26\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\12\11\1\u0126\22\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\2\11\1\u0127\32\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\4\11\1\u0128\30\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\2\11"+
    "\1\u0129\32\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\17\11\1\u012a\15\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\6\11\1\u012b\26\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\4\11\1\u012c\30\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\6\11"+
    "\1\u012d\26\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\2\11\1\u012e\32\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\10\11\1\u012f\24\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\6\11\1\u0130\26\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\5\11"+
    "\1\u0131\27\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\16\11\1\u0132\16\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\21\11\1\u0133\13\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\13\11\1\u0134\21\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\17\11"+
    "\1\u0135\15\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\3\11\1\u0136\31\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\2\11\1\u0137\32\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\13\11\1\u0138\21\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\4\11"+
    "\1\u0139\30\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\13\11\1\u013a\21\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\22\11\1\u013b\12\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\6\11\1\u013c\26\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\25\11"+
    "\1\u013d\7\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\12\11\1\u013e\22\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\4\11\1\u013f\30\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\12\11\1\u0140\22\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\24\11"+
    "\1\u0141\10\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\10\11\1\u0142\24\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\6\11\1\u0143\26\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\10\11\1\u0144\24\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\17\11"+
    "\1\u0145\15\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\10\11\1\u0146\24\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\22\11\1\u0147\12\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\11\11\1\u0148\23\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\3\11"+
    "\1\u0149\31\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\4\11\1\u014a\30\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\13\11\1\u014b\21\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\20\11\1\u014c\14\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\10\11"+
    "\1\u014d\24\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\2\11\1\u014e\32\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\4\11\1\u014f\30\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\6\11\1\u0150\26\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\15\11"+
    "\1\u0151\17\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\4\11\1\u0152\30\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\6\11\1\u0153\26\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\4\11\1\u0154\30\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\12\11"+
    "\1\u0155\22\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\6\11\1\u0156\26\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\26\11\1\u0157\6\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\13\11\1\u0158\21\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\13\11"+
    "\1\u0159\21\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\4\11\1\u015a\30\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\4\11\1\u015b\30\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\10\11\1\u015c\24\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\13\11"+
    "\1\u015d\21\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\4\11\1\u015e\30\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\4\11\1\u015f\30\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\17\11\1\u0160\15\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\6\11"+
    "\1\u0161\26\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\11\11\1\u0162\23\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\4\11\1\u0163\30\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\6\11\1\u0164\26\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\21\11"+
    "\1\u0165\13\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\31\11\1\u0166\3\11\25\0\1\11\6\0\7\11"+
    "\1\0\1\11\4\0\22\11\1\u0167\12\11\25\0\1\11"+
    "\6\0\7\11\1\0\1\11\4\0\3\11\1\u0168\31\11"+
    "\25\0\1\11\6\0\7\11\1\0\1\11\4\0\4\11"+
    "\1\u0169\30\11\25\0\1\11\6\0\7\11\1\0\1\11"+
    "\4\0\21\11\1\u016a\13\11\25\0\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17500];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\10\1\1\11\20\1\10\11"+
    "\4\1\3\11\5\1\2\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\0\2\11\1\1\2\0\1\1\1\0\3\11"+
    "\1\0\2\11\1\0\1\11\1\1\1\0\47\1\2\11"+
    "\1\1\1\11\1\1\12\11\2\1\11\11\1\1\1\0"+
    "\1\11\1\1\1\0\1\1\1\0\2\11\70\1\1\11"+
    "\1\1\2\11\2\0\1\11\1\0\10\11\54\1\1\11"+
    "\136\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  StringBuffer strbuf = new StringBuffer(128);
  int sub_line;
  int sub_column;
  int strlit_start_line, strlit_start_column;

  private Symbol sym(short id) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), str());
  }

  private Symbol sym(short id, String value) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), value);
  }

  private Symbol sym(short id, String value, int start_line, int start_column, int len) {
    return new Symbol(id, start_line, start_column, len, value);
  }

  private String str() { return yytext(); }
  private int len() { return yylength(); }

  private void error(String msg) throws Scanner.Exception {
    throw new Scanner.Exception(yyline + 1, yycolumn + 1, msg);
  }
  
  private HashMap<FileRange, String> comments = new HashMap<FileRange, String>();
  public HashMap<FileRange, String> comments() { return comments; }
  private void registerComment() {
    String comment = str();
    int startline = yyline + 1;
    int startcol = yycolumn + 1;
    int endline;
    int endcol;
    String eol = System.getProperty("line.separator");     
    String[] lines = comment.split(eol);
    int n = lines.length;
    if(n > 0 && lines[n-1].equals(""))
    	--n;
    endline = startline + n - 1;
    if(n == 1)
    	endcol = startcol + lines[0].length() - 1;
    else
    	endcol = lines[n-1].length();
    comments.put(new FileRange("", startline, startcol, endline, endcol), str());
  }

  private HashMap offsets = new java.util.LinkedHashMap();
  public HashMap offsets() { return offsets; }
  private void registerOffset() {
    Integer key = new Integer(yyline + 2);
    Integer value = new Integer(yychar + len());
    offsets.put(key, value);
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1792) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { return sym(Terminals.LTEQ);
          }
        case 137: break;
        case 41: 
          { return sym(Terminals.DOUBLE_LITERAL, str().substring(0,len()-1));
          }
        case 138: break;
        case 77: 
          { return sym(Terminals.INT);
          }
        case 139: break;
        case 72: 
          { return sym(Terminals.LONG_LITERAL, str().substring(0, len()-1));
          }
        case 140: break;
        case 45: 
          { error("unterminated character literal at end of line");
          }
        case 141: break;
        case 101: 
          { return sym(Terminals.VOID);
          }
        case 142: break;
        case 79: 
          { return sym(Terminals.RSHIFTEQ);
          }
        case 143: break;
        case 26: 
          { return sym(Terminals.AND);
          }
        case 144: break;
        case 121: 
          { return sym(Terminals.EXTENDS);
          }
        case 145: break;
        case 2: 
          { registerOffset();
          }
        case 146: break;
        case 116: 
          { return sym(Terminals.THROWS);
          }
        case 147: break;
        case 85: 
          { return sym(Terminals.CHARACTER_LITERAL, "\\");
          }
        case 148: break;
        case 54: 
          { return sym(Terminals.ANDEQ);
          }
        case 149: break;
        case 61: 
          { return sym(Terminals.MODEQ);
          }
        case 150: break;
        case 120: 
          { return sym(Terminals.PUBLIC);
          }
        case 151: break;
        case 5: 
          { return sym(Terminals.MULT);
          }
        case 152: break;
        case 57: 
          { return sym(Terminals.OROR);
          }
        case 153: break;
        case 112: 
          { return sym(Terminals.ASSERT);
          }
        case 154: break;
        case 82: 
          { int val = Integer.parseInt(str().substring(2,len()-1),8);
			                             return sym(Terminals.CHARACTER_LITERAL, new Character((char)val).toString());
          }
        case 155: break;
        case 22: 
          { return sym(Terminals.NOT);
          }
        case 156: break;
        case 40: 
          { return sym(Terminals.LONG_LITERAL, str().substring(0,len()-1));
          }
        case 157: break;
        case 105: 
          { return sym(Terminals.THROW);
          }
        case 158: break;
        case 20: 
          { return sym(Terminals.GT);
          }
        case 159: break;
        case 34: 
          { error("unterminated string at end of line");
          }
        case 160: break;
        case 91: 
          { return sym(Terminals.ELSE);
          }
        case 161: break;
        case 19: 
          { return sym(Terminals.EQ);
          }
        case 162: break;
        case 68: 
          { strbuf.append( '\t' );
          }
        case 163: break;
        case 88: 
          { return sym(Terminals.CHARACTER_LITERAL, "\b");
          }
        case 164: break;
        case 33: 
          { strbuf.append(str());
          }
        case 165: break;
        case 12: 
          { return sym(Terminals.RPAREN);
          }
        case 166: break;
        case 47: 
          { return sym(Terminals.DO);
          }
        case 167: break;
        case 122: 
          { return sym(Terminals.BOOLEAN);
          }
        case 168: break;
        case 49: 
          { return sym(Terminals.GTEQ);
          }
        case 169: break;
        case 108: 
          { return sym(Terminals.CLASS);
          }
        case 170: break;
        case 99: 
          { return sym(Terminals.NULL_LITERAL);
          }
        case 171: break;
        case 100: 
          { return sym(Terminals.EOF);
          }
        case 172: break;
        case 37: 
          { return sym(Terminals.DIVEQ);
          }
        case 173: break;
        case 38: 
          { return sym(Terminals.MULTEQ);
          }
        case 174: break;
        case 126: 
          { return sym(Terminals.PRIVATE);
          }
        case 175: break;
        case 95: 
          { return sym(Terminals.BYTE);
          }
        case 176: break;
        case 21: 
          { return sym(Terminals.LT);
          }
        case 177: break;
        case 102: 
          { return sym(Terminals.URSHIFTEQ);
          }
        case 178: break;
        case 29: 
          { return sym(Terminals.XOR);
          }
        case 179: break;
        case 124: 
          { return sym(Terminals.FINALLY);
          }
        case 180: break;
        case 128: 
          { return sym(Terminals.STRICTFP);
          }
        case 181: break;
        case 90: 
          { return sym(Terminals.CHARACTER_LITERAL, "\f");
          }
        case 182: break;
        case 10: 
          { yybegin(STRING); 
  				   // remember start position of string literal so we can
				   // set its position correctly in the end
  				   strlit_start_line = yyline+1;
				   strlit_start_column = yycolumn+1;
  				   strbuf.setLength(0);
          }
        case 183: break;
        case 93: 
          { return sym(Terminals.BOOLEAN_LITERAL);
          }
        case 184: break;
        case 106: 
          { return sym(Terminals.BREAK);
          }
        case 185: break;
        case 70: 
          { strbuf.append( '\n' );
          }
        case 186: break;
        case 134: 
          { return sym(Terminals.INSTANCEOF);
          }
        case 187: break;
        case 50: 
          { return sym(Terminals.RSHIFT);
          }
        case 188: break;
        case 117: 
          { return sym(Terminals.NATIVE);
          }
        case 189: break;
        case 80: 
          { return sym(Terminals.URSHIFT);
          }
        case 190: break;
        case 63: 
          { strbuf.append((char)Integer.parseInt(str().substring(1),8));
          }
        case 191: break;
        case 59: 
          { return sym(Terminals.PLUSPLUS);
          }
        case 192: break;
        case 123: 
          { return sym(Terminals.DEFAULT);
          }
        case 193: break;
        case 119: 
          { return sym(Terminals.DOUBLE);
          }
        case 194: break;
        case 130: 
          { return sym(Terminals.VOLATILE);
          }
        case 195: break;
        case 60: 
          { return sym(Terminals.XOREQ);
          }
        case 196: break;
        case 27: 
          { return sym(Terminals.OR);
          }
        case 197: break;
        case 125: 
          { return sym(Terminals.PACKAGE);
          }
        case 198: break;
        case 114: 
          { return sym(Terminals.SWITCH);
          }
        case 199: break;
        case 11: 
          { return sym(Terminals.LPAREN);
          }
        case 200: break;
        case 52: 
          { return sym(Terminals.LSHIFT);
          }
        case 201: break;
        case 39: 
          { return sym(Terminals.DOUBLE_LITERAL);
          }
        case 202: break;
        case 73: 
          { return sym(Terminals.ELLIPSIS);
          }
        case 203: break;
        case 48: 
          { return sym(Terminals.EQEQ);
          }
        case 204: break;
        case 44: 
          { return sym(Terminals.MINUSEQ);
          }
        case 205: break;
        case 129: 
          { return sym(Terminals.CONTINUE);
          }
        case 206: break;
        case 127: 
          { return sym(Terminals.ABSTRACT);
          }
        case 207: break;
        case 98: 
          { return sym(Terminals.LONG);
          }
        case 208: break;
        case 28: 
          { return sym(Terminals.PLUS);
          }
        case 209: break;
        case 89: 
          { return sym(Terminals.CHARACTER_LITERAL, "\n");
          }
        case 210: break;
        case 84: 
          { return sym(Terminals.CHARACTER_LITERAL, "\"");
          }
        case 211: break;
        case 17: 
          { return sym(Terminals.SEMICOLON);
          }
        case 212: break;
        case 16: 
          { return sym(Terminals.RBRACK);
          }
        case 213: break;
        case 110: 
          { return sym(Terminals.FINAL);
          }
        case 214: break;
        case 62: 
          { error("illegal escape sequence \""+str()+"\"");
          }
        case 215: break;
        case 118: 
          { return sym(Terminals.IMPORT);
          }
        case 216: break;
        case 94: 
          { return sym(Terminals.THIS);
          }
        case 217: break;
        case 67: 
          { strbuf.append( '\r' );
          }
        case 218: break;
        case 109: 
          { return sym(Terminals.FLOAT);
          }
        case 219: break;
        case 104: 
          { return sym(Terminals.SUPER);
          }
        case 220: break;
        case 92: 
          { return sym(Terminals.ENUM);
          }
        case 221: break;
        case 9: 
          { return sym(Terminals.MINUS);
          }
        case 222: break;
        case 69: 
          { strbuf.append( '\b' );
          }
        case 223: break;
        case 36: 
          { registerComment();
          }
        case 224: break;
        case 7: 
          { return sym(Terminals.INTEGER_LITERAL);
          }
        case 225: break;
        case 1: 
          { error("illegal character \""+str()+ "\"");
          }
        case 226: break;
        case 86: 
          { return sym(Terminals.CHARACTER_LITERAL, "\r");
          }
        case 227: break;
        case 46: 
          { return sym(Terminals.IF);
          }
        case 228: break;
        case 43: 
          { return sym(Terminals.MINUSMINUS);
          }
        case 229: break;
        case 133: 
          { return sym(Terminals.PROTECTED);
          }
        case 230: break;
        case 65: 
          { strbuf.append( '\"' );
          }
        case 231: break;
        case 83: 
          { return sym(Terminals.CHARACTER_LITERAL, "\'");
          }
        case 232: break;
        case 87: 
          { return sym(Terminals.CHARACTER_LITERAL, "\t");
          }
        case 233: break;
        case 25: 
          { return sym(Terminals.COLON);
          }
        case 234: break;
        case 78: 
          { return sym(Terminals.FOR);
          }
        case 235: break;
        case 64: 
          { strbuf.append( '\'' );
          }
        case 236: break;
        case 97: 
          { return sym(Terminals.CHAR);
          }
        case 237: break;
        case 66: 
          { strbuf.append( '\\' );
          }
        case 238: break;
        case 14: 
          { return sym(Terminals.RBRACE);
          }
        case 239: break;
        case 76: 
          { return sym(Terminals.NEW);
          }
        case 240: break;
        case 74: 
          { return sym(Terminals.CHARACTER_LITERAL, str().substring(1, len()-1));
          }
        case 241: break;
        case 15: 
          { return sym(Terminals.LBRACK);
          }
        case 242: break;
        case 23: 
          { return sym(Terminals.COMP);
          }
        case 243: break;
        case 4: 
          { return sym(Terminals.DIV);
          }
        case 244: break;
        case 132: 
          { return sym(Terminals.INTERFACE);
          }
        case 245: break;
        case 24: 
          { return sym(Terminals.QUESTION);
          }
        case 246: break;
        case 131: 
          { return sym(Terminals.TRANSIENT);
          }
        case 247: break;
        case 55: 
          { return sym(Terminals.ANDAND);
          }
        case 248: break;
        case 53: 
          { return sym(Terminals.NOTEQ);
          }
        case 249: break;
        case 30: 
          { return sym(Terminals.MOD);
          }
        case 250: break;
        case 111: 
          { return sym(Terminals.WHILE);
          }
        case 251: break;
        case 81: 
          { return sym(Terminals.LSHIFTEQ);
          }
        case 252: break;
        case 32: 
          { if(sub_line == 0 && sub_column == 0) {
                                     sub_line = yyline; sub_column = yycolumn;
                                   }
          }
        case 253: break;
        case 58: 
          { return sym(Terminals.PLUSEQ);
          }
        case 254: break;
        case 71: 
          { strbuf.append( '\f' );
          }
        case 255: break;
        case 107: 
          { return sym(Terminals.CATCH);
          }
        case 256: break;
        case 18: 
          { return sym(Terminals.COMMA);
          }
        case 257: break;
        case 136: 
          { return sym(Terminals.SYNCHRONIZED);
          }
        case 258: break;
        case 56: 
          { return sym(Terminals.OREQ);
          }
        case 259: break;
        case 115: 
          { return sym(Terminals.RETURN);
          }
        case 260: break;
        case 75: 
          { return sym(Terminals.TRY);
          }
        case 261: break;
        case 6: 
          { return sym(Terminals.IDENTIFIER);
          }
        case 262: break;
        case 96: 
          { return sym(Terminals.CASE);
          }
        case 263: break;
        case 13: 
          { return sym(Terminals.LBRACE);
          }
        case 264: break;
        case 35: 
          { yybegin(YYINITIAL); 
                                   return sym(Terminals.STRING_LITERAL, strbuf.toString(), strlit_start_line, strlit_start_column, strbuf.length()+2);
          }
        case 265: break;
        case 135: 
          { return sym(Terminals.IMPLEMENTS);
          }
        case 266: break;
        case 113: 
          { return sym(Terminals.STATIC);
          }
        case 267: break;
        case 31: 
          { return sym(Terminals.AT);
          }
        case 268: break;
        case 42: 
          { return sym(Terminals.FLOATING_POINT_LITERAL, str().substring(0,len()-1));
          }
        case 269: break;
        case 8: 
          { return sym(Terminals.DOT);
          }
        case 270: break;
        case 103: 
          { return sym(Terminals.SHORT);
          }
        case 271: break;
        case 3: 
          { 
          }
        case 272: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { // detect position of first SUB character
                                   if(!(sub_line == 0 && sub_column == 0) && (sub_line != yyline || sub_column != yycolumn-1)) {
                                     // reset to only return error once
                                     sub_line = 0;
                                     sub_column = 0;
                                     // return error
                                     error("error");
                                   }
                                   return sym(Terminals.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
